{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedValue = require('../nodes/AnimatedValue');\n\nvar AnimatedValueXY = require('../nodes/AnimatedValueXY');\n\nvar AnimatedInterpolation = require('../nodes/AnimatedInterpolation');\n\nvar Animation = require('./Animation');\n\nvar SpringConfig = require('../SpringConfig');\n\nvar invariant = require('invariant');\n\nvar _require = require('../NativeAnimatedHelper'),\n    shouldUseNativeDriver = _require.shouldUseNativeDriver;\n\nvar SpringAnimation = function (_Animation) {\n  _inherits(SpringAnimation, _Animation);\n\n  var _super = _createSuper(SpringAnimation);\n\n  function SpringAnimation(config) {\n    var _config$overshootClam, _config$restDisplacem, _config$restSpeedThre, _config$velocity, _config$velocity2, _config$delay, _config$isInteraction, _config$iterations;\n\n    var _this;\n\n    _classCallCheck(this, SpringAnimation);\n\n    _this = _super.call(this);\n    _this._overshootClamping = (_config$overshootClam = config.overshootClamping) != null ? _config$overshootClam : false;\n    _this._restDisplacementThreshold = (_config$restDisplacem = config.restDisplacementThreshold) != null ? _config$restDisplacem : 0.001;\n    _this._restSpeedThreshold = (_config$restSpeedThre = config.restSpeedThreshold) != null ? _config$restSpeedThre : 0.001;\n    _this._initialVelocity = (_config$velocity = config.velocity) != null ? _config$velocity : 0;\n    _this._lastVelocity = (_config$velocity2 = config.velocity) != null ? _config$velocity2 : 0;\n    _this._toValue = config.toValue;\n    _this._delay = (_config$delay = config.delay) != null ? _config$delay : 0;\n    _this._useNativeDriver = shouldUseNativeDriver(config);\n    _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;\n    _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      var _config$stiffness, _config$damping, _config$mass;\n\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      _this._stiffness = (_config$stiffness = config.stiffness) != null ? _config$stiffness : 100;\n      _this._damping = (_config$damping = config.damping) != null ? _config$damping : 10;\n      _this._mass = (_config$mass = config.mass) != null ? _config$mass : 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      var _config$bounciness, _config$speed;\n\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      var springConfig = SpringConfig.fromBouncinessAndSpeed((_config$bounciness = config.bounciness) != null ? _config$bounciness : 8, (_config$speed = config.speed) != null ? _config$speed : 12);\n      _this._stiffness = springConfig.stiffness;\n      _this._damping = springConfig.damping;\n      _this._mass = 1;\n    } else {\n      var _config$tension, _config$friction;\n\n      var _springConfig = SpringConfig.fromOrigamiTensionAndFriction((_config$tension = config.tension) != null ? _config$tension : 40, (_config$friction = config.friction) != null ? _config$friction : 7);\n\n      _this._stiffness = _springConfig.stiffness;\n      _this._damping = _springConfig.damping;\n      _this._mass = 1;\n    }\n\n    invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(_this._damping > 0, 'Damping value must be greater than 0');\n    invariant(_this._mass > 0, 'Mass value must be greater than 0');\n    return _this;\n  }\n\n  _createClass(SpringAnimation, [{\n    key: \"__getNativeAnimationConfig\",\n    value: function __getNativeAnimationConfig() {\n      var _this$_initialVelocit;\n\n      return {\n        type: 'spring',\n        overshootClamping: this._overshootClamping,\n        restDisplacementThreshold: this._restDisplacementThreshold,\n        restSpeedThreshold: this._restSpeedThreshold,\n        stiffness: this._stiffness,\n        damping: this._damping,\n        mass: this._mass,\n        initialVelocity: (_this$_initialVelocit = this._initialVelocity) != null ? _this$_initialVelocit : this._lastVelocity,\n        toValue: this._toValue,\n        iterations: this.__iterations\n      };\n    }\n  }, {\n    key: \"start\",\n    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n      var _this2 = this;\n\n      this.__active = true;\n      this._startPosition = fromValue;\n      this._lastPosition = this._startPosition;\n      this._onUpdate = onUpdate;\n      this.__onEnd = onEnd;\n      this._lastTime = Date.now();\n      this._frameTime = 0.0;\n\n      if (previousAnimation instanceof SpringAnimation) {\n        var internalState = previousAnimation.getInternalState();\n        this._lastPosition = internalState.lastPosition;\n        this._lastVelocity = internalState.lastVelocity;\n        this._initialVelocity = this._lastVelocity;\n        this._lastTime = internalState.lastTime;\n      }\n\n      var start = function start() {\n        if (_this2._useNativeDriver) {\n          _this2.__startNativeAnimation(animatedValue);\n        } else {\n          _this2.onUpdate();\n        }\n      };\n\n      if (this._delay) {\n        this._timeout = setTimeout(start, this._delay);\n      } else {\n        start();\n      }\n    }\n  }, {\n    key: \"getInternalState\",\n    value: function getInternalState() {\n      return {\n        lastPosition: this._lastPosition,\n        lastVelocity: this._lastVelocity,\n        lastTime: this._lastTime\n      };\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate() {\n      var MAX_STEPS = 64;\n      var now = Date.now();\n\n      if (now > this._lastTime + MAX_STEPS) {\n        now = this._lastTime + MAX_STEPS;\n      }\n\n      var deltaTime = (now - this._lastTime) / 1000;\n      this._frameTime += deltaTime;\n      var c = this._damping;\n      var m = this._mass;\n      var k = this._stiffness;\n      var v0 = -this._initialVelocity;\n      var zeta = c / (2 * Math.sqrt(k * m));\n      var omega0 = Math.sqrt(k / m);\n      var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);\n      var x0 = this._toValue - this._startPosition;\n      var position = 0.0;\n      var velocity = 0.0;\n      var t = this._frameTime;\n\n      if (zeta < 1) {\n        var envelope = Math.exp(-zeta * omega0 * t);\n        position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));\n        velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n      } else {\n        var _envelope = Math.exp(-omega0 * t);\n\n        position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);\n        velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n      }\n\n      this._lastTime = now;\n      this._lastPosition = position;\n      this._lastVelocity = velocity;\n\n      this._onUpdate(position);\n\n      if (!this.__active) {\n        return;\n      }\n\n      var isOvershooting = false;\n\n      if (this._overshootClamping && this._stiffness !== 0) {\n        if (this._startPosition < this._toValue) {\n          isOvershooting = position > this._toValue;\n        } else {\n          isOvershooting = position < this._toValue;\n        }\n      }\n\n      var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n\n      var isDisplacement = true;\n\n      if (this._stiffness !== 0) {\n        isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n      }\n\n      if (isOvershooting || isVelocity && isDisplacement) {\n        if (this._stiffness !== 0) {\n          this._lastPosition = this._toValue;\n          this._lastVelocity = 0;\n\n          this._onUpdate(this._toValue);\n        }\n\n        this.__debouncedOnEnd({\n          finished: true\n        });\n\n        return;\n      }\n\n      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      _get(_getPrototypeOf(SpringAnimation.prototype), \"stop\", this).call(this);\n\n      this.__active = false;\n      clearTimeout(this._timeout);\n      global.cancelAnimationFrame(this._animationFrame);\n\n      this.__debouncedOnEnd({\n        finished: false\n      });\n    }\n  }]);\n\n  return SpringAnimation;\n}(Animation);\n\nmodule.exports = SpringAnimation;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Animated/src/animations/SpringAnimation.js"],"names":["AnimatedValue","require","AnimatedValueXY","AnimatedInterpolation","Animation","SpringConfig","invariant","shouldUseNativeDriver","SpringAnimation","config","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","__isInteraction","isInteraction","__iterations","iterations","stiffness","undefined","damping","mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","springConfig","fromBouncinessAndSpeed","fromOrigamiTensionAndFriction","type","initialVelocity","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","start","__startNativeAnimation","_timeout","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","clearTimeout","global","cancelAnimationFrame","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst AnimatedValue = require('../nodes/AnimatedValue');\nconst AnimatedValueXY = require('../nodes/AnimatedValueXY');\nconst AnimatedInterpolation = require('../nodes/AnimatedInterpolation');\nconst Animation = require('./Animation');\nconst SpringConfig = require('../SpringConfig');\n\nconst invariant = require('invariant');\n\nconst {shouldUseNativeDriver} = require('../NativeAnimatedHelper');\n\nimport type {AnimationConfig, EndCallback} from './Animation';\n\nexport type SpringAnimationConfig = {\n  ...AnimationConfig,\n  toValue:\n    | number\n    | AnimatedValue\n    | {\n        x: number,\n        y: number,\n        ...\n      }\n    | AnimatedValueXY\n    | AnimatedInterpolation,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?:\n    | number\n    | {\n        x: number,\n        y: number,\n        ...\n      },\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport type SpringAnimationConfigSingle = {\n  ...AnimationConfig,\n  toValue: number | AnimatedValue | AnimatedInterpolation,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number,\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nclass SpringAnimation extends Animation {\n  _overshootClamping: boolean;\n  _restDisplacementThreshold: number;\n  _restSpeedThreshold: number;\n  _lastVelocity: number;\n  _startPosition: number;\n  _lastPosition: number;\n  _fromValue: number;\n  _toValue: any;\n  _stiffness: number;\n  _damping: number;\n  _mass: number;\n  _initialVelocity: number;\n  _delay: number;\n  _timeout: any;\n  _startTime: number;\n  _lastTime: number;\n  _frameTime: number;\n  _onUpdate: (value: number) => void;\n  _animationFrame: any;\n  _useNativeDriver: boolean;\n\n  constructor(config: SpringAnimationConfigSingle) {\n    super();\n\n    this._overshootClamping = config.overshootClamping ?? false;\n    this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;\n    this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;\n    this._initialVelocity = config.velocity ?? 0;\n    this._lastVelocity = config.velocity ?? 0;\n    this._toValue = config.toValue;\n    this._delay = config.delay ?? 0;\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction = config.isInteraction ?? !this._useNativeDriver;\n    this.__iterations = config.iterations ?? 1;\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      this._stiffness = config.stiffness ?? 100;\n      this._damping = config.damping ?? 10;\n      this._mass = config.mass ?? 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        config.bounciness ?? 8,\n        config.speed ?? 12,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        config.tension ?? 40,\n        config.friction ?? 7,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig(): {|\n    damping: number,\n    initialVelocity: number,\n    iterations: number,\n    mass: number,\n    overshootClamping: boolean,\n    restDisplacementThreshold: number,\n    restSpeedThreshold: number,\n    stiffness: number,\n    toValue: any,\n    type: $TEMPORARY$string<'spring'>,\n  |} {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: this._initialVelocity ?? this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations,\n    };\n  }\n\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      // Set the initial velocity to the last velocity\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    const start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n\n    //  If this._delay is more than 0, we start after the timeout.\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState(): Object {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime,\n    };\n  }\n\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n  onUpdate(): void {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n\n    const c: number = this._damping;\n    const m: number = this._mass;\n    const k: number = this._stiffness;\n    const v0: number = -this._initialVelocity;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position =\n        this._toValue -\n        envelope *\n          (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          ((Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0)) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // Conditions for stopping the spring animation\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement =\n        Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || (isVelocity && isDisplacement)) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({finished: true});\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop(): void {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({finished: false});\n  }\n}\n\nmodule.exports = SpringAnimation;\n"]},"metadata":{},"sourceType":"script"}