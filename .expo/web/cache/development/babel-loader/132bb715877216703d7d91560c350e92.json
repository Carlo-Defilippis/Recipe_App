{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Button = Button;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _text = require(\"../text/text\");\n\nvar _button = require(\"./button.presets\");\n\nvar _ramda = require(\"ramda\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\na2tt\\\\Desktop\\\\homework\\\\Recipe_App\\\\app\\\\components\\\\button\\\\button.tsx\";\n\nfunction Button(props) {\n  var _props$preset = props.preset,\n      preset = _props$preset === void 0 ? \"primary\" : _props$preset,\n      tx = props.tx,\n      text = props.text,\n      styleOverride = props.style,\n      textStyleOverride = props.textStyle,\n      children = props.children,\n      rest = (0, _objectWithoutProperties2.default)(props, [\"preset\", \"tx\", \"text\", \"style\", \"textStyle\", \"children\"]);\n  var viewStyle = (0, _ramda.mergeAll)((0, _ramda.flatten)([_button.viewPresets[preset] || _button.viewPresets.primary, styleOverride]));\n  var textStyle = (0, _ramda.mergeAll)((0, _ramda.flatten)([_button.textPresets[preset] || _button.textPresets.primary, textStyleOverride]));\n  var content = children || React.createElement(_text.Text, {\n    tx: tx,\n    text: text,\n    style: textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 31\n    }\n  });\n  return React.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({\n    style: viewStyle\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }), content);\n}","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/app/components/button/button.tsx"],"names":["Button","props","preset","tx","text","styleOverride","style","textStyleOverride","textStyle","children","rest","viewStyle","viewPresets","primary","textPresets","content"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AAOO,SAASA,MAAT,CAAgBC,KAAhB,EAAoC;AAAA,sBAUrCA,KAVqC,CAGvCC,MAHuC;AAAA,MAGvCA,MAHuC,8BAG9B,SAH8B;AAAA,MAIvCC,EAJuC,GAUrCF,KAVqC,CAIvCE,EAJuC;AAAA,MAKvCC,IALuC,GAUrCH,KAVqC,CAKvCG,IALuC;AAAA,MAMhCC,aANgC,GAUrCJ,KAVqC,CAMvCK,KANuC;AAAA,MAO5BC,iBAP4B,GAUrCN,KAVqC,CAOvCO,SAPuC;AAAA,MAQvCC,QARuC,GAUrCR,KAVqC,CAQvCQ,QARuC;AAAA,MASpCC,IAToC,0CAUrCT,KAVqC;AAYzC,MAAMU,SAAS,GAAG,qBAAS,oBAAQ,CAACC,oBAAYV,MAAZ,KAAuBU,oBAAYC,OAApC,EAA6CR,aAA7C,CAAR,CAAT,CAAlB;AACA,MAAMG,SAAS,GAAG,qBAChB,oBAAQ,CAACM,oBAAYZ,MAAZ,KAAuBY,oBAAYD,OAApC,EAA6CN,iBAA7C,CAAR,CADgB,CAAlB;AAIA,MAAMQ,OAAO,GAAGN,QAAQ,IAAI,oBAAC,UAAD;AAAM,IAAA,EAAE,EAAEN,EAAV;AAAc,IAAA,IAAI,EAAEC,IAApB;AAA0B,IAAA,KAAK,EAAEI,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B;AAEA,SACE,oBAAC,6BAAD;AAAkB,IAAA,KAAK,EAAEG;AAAzB,KAAwCD,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGK,OADH,CADF;AAKD","sourcesContent":["import * as React from \"react\"\r\nimport { TouchableOpacity } from \"react-native\"\r\nimport { Text } from \"../text/text\"\r\nimport { viewPresets, textPresets } from \"./button.presets\"\r\nimport { ButtonProps } from \"./button.props\"\r\nimport { mergeAll, flatten } from \"ramda\"\r\n\r\n/**\r\n * For your text displaying needs.\r\n *\r\n * This component is a HOC over the built-in React Native one.\r\n */\r\nexport function Button(props: ButtonProps) {\r\n  // grab the props\r\n  const {\r\n    preset = \"primary\",\r\n    tx,\r\n    text,\r\n    style: styleOverride,\r\n    textStyle: textStyleOverride,\r\n    children,\r\n    ...rest\r\n  } = props\r\n\r\n  const viewStyle = mergeAll(flatten([viewPresets[preset] || viewPresets.primary, styleOverride]))\r\n  const textStyle = mergeAll(\r\n    flatten([textPresets[preset] || textPresets.primary, textStyleOverride]),\r\n  )\r\n\r\n  const content = children || <Text tx={tx} text={text} style={textStyle} />\r\n\r\n  return (\r\n    <TouchableOpacity style={viewStyle} {...rest}>\r\n      {content}\r\n    </TouchableOpacity>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"script"}