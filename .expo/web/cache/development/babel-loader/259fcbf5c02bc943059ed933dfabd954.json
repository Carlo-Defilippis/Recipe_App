{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _requireNativeComponent = _interopRequireDefault(require(\"../../Libraries/ReactNative/requireNativeComponent\"));\n\nvar _UIManager = _interopRequireDefault(require(\"../ReactNative/UIManager\"));\n\nfunction codegenNativeComponent(componentName, options) {\n  var componentNameInUse = options && options.paperComponentName ? options.paperComponentName : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (_UIManager.default.getViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (options.paperComponentNameDeprecated != null && _UIManager.default.getViewManagerConfig(options.paperComponentNameDeprecated)) {\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\"Failed to find native component for either \" + componentName + \" or \" + (options.paperComponentNameDeprecated || '(unknown)'));\n    }\n  }\n\n  return (0, _requireNativeComponent.default)(componentNameInUse);\n}\n\nvar _default = codegenNativeComponent;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"],"names":["codegenNativeComponent","componentName","options","componentNameInUse","paperComponentName","paperComponentNameDeprecated","UIManager","getViewManagerConfig","Error"],"mappings":"AAYA;;;;;;;;;AAEA;;AAEA;;AAYA,SAASA,sBAAT,CACEC,aADF,EAEEC,OAFF,EAG8B;AAC5B,MAAIC,kBAAkB,GACpBD,OAAO,IAAIA,OAAO,CAACE,kBAAnB,GACIF,OAAO,CAACE,kBADZ,GAEIH,aAHN;;AAKA,MAAIC,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACG,4BAAR,IAAwC,IAA/D,EAAqE;AACnE,QAAIC,mBAAUC,oBAAV,CAA+BN,aAA/B,CAAJ,EAAmD;AACjDE,MAAAA,kBAAkB,GAAGF,aAArB;AACD,KAFD,MAEO,IACLC,OAAO,CAACG,4BAAR,IAAwC,IAAxC,IACAC,mBAAUC,oBAAV,CAA+BL,OAAO,CAACG,4BAAvC,CAFK,EAGL;AACAF,MAAAA,kBAAkB,GAAGD,OAAO,CAACG,4BAA7B;AACD,KALM,MAKA;AACL,YAAM,IAAIG,KAAJ,iDAC0CP,aAD1C,aAC8DC,OAAO,CAACG,4BAAR,IAChE,WAFE,EAAN;AAID;AACF;;AAMD,SAAQ,qCACNF,kBADM,CAAR;AAGD;;eAEcH,sB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n// TODO: move this file to shims/ReactNative (requires React update and sync)\n\n'use strict';\n\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\nimport UIManager from '../ReactNative/UIManager';\n\n// TODO: import from CodegenSchema once workspaces are enabled\ntype Options = $ReadOnly<{|\n  interfaceOnly?: boolean,\n  paperComponentName?: string,\n  paperComponentNameDeprecated?: string,\n  excludedPlatform?: 'iOS' | 'android',\n|}>;\n\nexport type NativeComponentType<T> = HostComponent<T>;\n\nfunction codegenNativeComponent<Props>(\n  componentName: string,\n  options?: Options,\n): NativeComponentType<Props> {\n  let componentNameInUse =\n    options && options.paperComponentName\n      ? options.paperComponentName\n      : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.getViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (\n      options.paperComponentNameDeprecated != null &&\n      UIManager.getViewManagerConfig(options.paperComponentNameDeprecated)\n    ) {\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\n        `Failed to find native component for either ${componentName} or ${options.paperComponentNameDeprecated ||\n          '(unknown)'}`,\n      );\n    }\n  }\n\n  // If this function is run at runtime then that means the view configs were not\n  // generated with the view config babel plugin, so we need to require the native component.\n  //\n  // This will be useful during migration, but eventually this will error.\n  return (requireNativeComponent<Props>(\n    componentNameInUse,\n  ): HostComponent<Props>);\n}\n\nexport default codegenNativeComponent;\n"]},"metadata":{},"sourceType":"script"}