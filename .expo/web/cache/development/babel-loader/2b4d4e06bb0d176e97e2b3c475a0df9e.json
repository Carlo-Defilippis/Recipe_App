{"ast":null,"code":"'use strict';\n\nvar _AndroidTextInputNativeComponent = require(\"../../Components/TextInput/AndroidTextInputNativeComponent\");\n\nvar _RCTSingelineTextInputNativeComponent = require(\"../../Components/TextInput/RCTSingelineTextInputNativeComponent\");\n\nvar React = require('react');\n\nvar Platform = require('../../Utilities/Platform');\n\nvar _require = require('../../Renderer/shims/ReactNative'),\n    findNodeHandle = _require.findNodeHandle;\n\nvar currentlyFocusedInputRef = null;\nvar inputs = new Set();\n\nfunction currentlyFocusedInput() {\n  return currentlyFocusedInputRef;\n}\n\nfunction currentlyFocusedField() {\n  if (__DEV__) {\n    console.error('currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput');\n  }\n\n  return findNodeHandle(currentlyFocusedInputRef);\n}\n\nfunction focusInput(textField) {\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    currentlyFocusedInputRef = textField;\n  }\n}\n\nfunction blurInput(textField) {\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    currentlyFocusedInputRef = null;\n  }\n}\n\nfunction focusField(textFieldID) {\n  if (__DEV__) {\n    console.error('focusField no longer works. Use focusInput');\n  }\n\n  return;\n}\n\nfunction blurField(textFieldID) {\n  if (__DEV__) {\n    console.error('blurField no longer works. Use blurInput');\n  }\n\n  return;\n}\n\nfunction focusTextInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    focusInput(textField);\n\n    if (Platform.OS === 'ios') {\n      _RCTSingelineTextInputNativeComponent.Commands.focus(textField);\n    } else if (Platform.OS === 'android') {\n      _AndroidTextInputNativeComponent.Commands.focus(textField);\n    }\n  }\n}\n\nfunction blurTextInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    blurInput(textField);\n\n    if (Platform.OS === 'ios') {\n      _RCTSingelineTextInputNativeComponent.Commands.blur(textField);\n    } else if (Platform.OS === 'android') {\n      _AndroidTextInputNativeComponent.Commands.blur(textField);\n    }\n  }\n}\n\nfunction registerInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('registerInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  inputs.add(textField);\n}\n\nfunction unregisterInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('unregisterInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return;\n  }\n\n  inputs.delete(textField);\n}\n\nfunction isTextInput(textField) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error('isTextInput must be called with a host component. Passing a react tag is deprecated.');\n    }\n\n    return false;\n  }\n\n  return inputs.has(textField);\n}\n\nmodule.exports = {\n  currentlyFocusedInput: currentlyFocusedInput,\n  focusInput: focusInput,\n  blurInput: blurInput,\n  currentlyFocusedField: currentlyFocusedField,\n  focusField: focusField,\n  blurField: blurField,\n  focusTextInput: focusTextInput,\n  blurTextInput: blurTextInput,\n  registerInput: registerInput,\n  unregisterInput: unregisterInput,\n  isTextInput: isTextInput\n};","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js"],"names":["React","require","Platform","findNodeHandle","currentlyFocusedInputRef","inputs","Set","currentlyFocusedInput","currentlyFocusedField","__DEV__","console","error","focusInput","textField","blurInput","focusField","textFieldID","blurField","focusTextInput","OS","iOSTextInputCommands","focus","AndroidTextInputCommands","blurTextInput","blur","registerInput","add","unregisterInput","delete","isTextInput","has","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// This class is responsible for coordinating the \"focused\" state for\n// TextInputs. All calls relating to the keyboard should be funneled\n// through here.\n\n'use strict';\n\nconst React = require('react');\nconst Platform = require('../../Utilities/Platform');\nconst {findNodeHandle} = require('../../Renderer/shims/ReactNative');\nimport {Commands as AndroidTextInputCommands} from '../../Components/TextInput/AndroidTextInputNativeComponent';\nimport {Commands as iOSTextInputCommands} from '../../Components/TextInput/RCTSingelineTextInputNativeComponent';\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\ntype ComponentRef = React.ElementRef<HostComponent<mixed>>;\n\nlet currentlyFocusedInputRef: ?ComponentRef = null;\nconst inputs = new Set();\n\nfunction currentlyFocusedInput(): ?ComponentRef {\n  return currentlyFocusedInputRef;\n}\n\n/**\n * Returns the ID of the currently focused text field, if one exists\n * If no text field is focused it returns null\n */\nfunction currentlyFocusedField(): ?number {\n  if (__DEV__) {\n    console.error(\n      'currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput',\n    );\n  }\n\n  return findNodeHandle(currentlyFocusedInputRef);\n}\n\nfunction focusInput(textField: ?ComponentRef): void {\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    currentlyFocusedInputRef = textField;\n  }\n}\n\nfunction blurInput(textField: ?ComponentRef): void {\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    currentlyFocusedInputRef = null;\n  }\n}\n\nfunction focusField(textFieldID: ?number): void {\n  if (__DEV__) {\n    console.error('focusField no longer works. Use focusInput');\n  }\n\n  return;\n}\n\nfunction blurField(textFieldID: ?number) {\n  if (__DEV__) {\n    console.error('blurField no longer works. Use blurInput');\n  }\n\n  return;\n}\n\n/**\n * @param {number} TextInputID id of the text field to focus\n * Focuses the specified text field\n * noop if the text field was already focused\n */\nfunction focusTextInput(textField: ?ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'focusTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    focusInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.focus(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.focus(textField);\n    }\n  }\n}\n\n/**\n * @param {number} textFieldID id of the text field to unfocus\n * Unfocuses the specified text field\n * noop if it wasn't focused\n */\nfunction blurTextInput(textField: ?ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'focusTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    blurInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.blur(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.blur(textField);\n    }\n  }\n}\n\nfunction registerInput(textField: ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'registerInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  inputs.add(textField);\n}\n\nfunction unregisterInput(textField: ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'unregisterInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n  inputs.delete(textField);\n}\n\nfunction isTextInput(textField: ComponentRef): boolean {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'isTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return false;\n  }\n\n  return inputs.has(textField);\n}\n\nmodule.exports = {\n  currentlyFocusedInput,\n  focusInput,\n  blurInput,\n\n  currentlyFocusedField,\n  focusField,\n  blurField,\n  focusTextInput,\n  blurTextInput,\n  registerInput,\n  unregisterInput,\n  isTextInput,\n};\n"]},"metadata":{},"sourceType":"script"}