{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _NativeWebSocketModule = _interopRequireDefault(require(\"./NativeWebSocketModule\"));\n\nvar NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\n\nvar base64 = require('base64-js');\n\nvar originalRCTWebSocketConnect = _NativeWebSocketModule.default.connect;\nvar originalRCTWebSocketSend = _NativeWebSocketModule.default.send;\nvar originalRCTWebSocketSendBinary = _NativeWebSocketModule.default.sendBinary;\nvar originalRCTWebSocketClose = _NativeWebSocketModule.default.close;\nvar eventEmitter;\nvar subscriptions;\nvar closeCallback;\nvar sendCallback;\nvar connectCallback;\nvar onOpenCallback;\nvar onMessageCallback;\nvar onErrorCallback;\nvar onCloseCallback;\nvar _isInterceptorEnabled = false;\nvar WebSocketInterceptor = {\n  setCloseCallback: function setCloseCallback(callback) {\n    closeCallback = callback;\n  },\n  setSendCallback: function setSendCallback(callback) {\n    sendCallback = callback;\n  },\n  setConnectCallback: function setConnectCallback(callback) {\n    connectCallback = callback;\n  },\n  setOnOpenCallback: function setOnOpenCallback(callback) {\n    onOpenCallback = callback;\n  },\n  setOnMessageCallback: function setOnMessageCallback(callback) {\n    onMessageCallback = callback;\n  },\n  setOnErrorCallback: function setOnErrorCallback(callback) {\n    onErrorCallback = callback;\n  },\n  setOnCloseCallback: function setOnCloseCallback(callback) {\n    onCloseCallback = callback;\n  },\n  isInterceptorEnabled: function isInterceptorEnabled() {\n    return _isInterceptorEnabled;\n  },\n  _unregisterEvents: function _unregisterEvents() {\n    subscriptions.forEach(function (e) {\n      return e.remove();\n    });\n    subscriptions = [];\n  },\n  _registerEvents: function _registerEvents() {\n    subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {\n      if (onMessageCallback) {\n        onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);\n      }\n    }), eventEmitter.addListener('websocketOpen', function (ev) {\n      if (onOpenCallback) {\n        onOpenCallback(ev.id);\n      }\n    }), eventEmitter.addListener('websocketClosed', function (ev) {\n      if (onCloseCallback) {\n        onCloseCallback(ev.id, {\n          code: ev.code,\n          reason: ev.reason\n        });\n      }\n    }), eventEmitter.addListener('websocketFailed', function (ev) {\n      if (onErrorCallback) {\n        onErrorCallback(ev.id, {\n          message: ev.message\n        });\n      }\n    })];\n  },\n  enableInterception: function enableInterception() {\n    if (_isInterceptorEnabled) {\n      return;\n    }\n\n    eventEmitter = new NativeEventEmitter(_NativeWebSocketModule.default);\n\n    WebSocketInterceptor._registerEvents();\n\n    _NativeWebSocketModule.default.connect = function (url, protocols, options, socketId) {\n      if (connectCallback) {\n        connectCallback(url, protocols, options, socketId);\n      }\n\n      originalRCTWebSocketConnect.apply(this, arguments);\n    };\n\n    _NativeWebSocketModule.default.send = function (data, socketId) {\n      if (sendCallback) {\n        sendCallback(data, socketId);\n      }\n\n      originalRCTWebSocketSend.apply(this, arguments);\n    };\n\n    _NativeWebSocketModule.default.sendBinary = function (data, socketId) {\n      if (sendCallback) {\n        sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);\n      }\n\n      originalRCTWebSocketSendBinary.apply(this, arguments);\n    };\n\n    _NativeWebSocketModule.default.close = function () {\n      if (closeCallback) {\n        if (arguments.length === 3) {\n          closeCallback(arguments[0], arguments[1], arguments[2]);\n        } else {\n          closeCallback(null, null, arguments[0]);\n        }\n      }\n\n      originalRCTWebSocketClose.apply(this, arguments);\n    };\n\n    _isInterceptorEnabled = true;\n  },\n  _arrayBufferToString: function _arrayBufferToString(data) {\n    var value = base64.toByteArray(data).buffer;\n\n    if (value === undefined || value === null) {\n      return '(no value)';\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {\n      return \"ArrayBuffer {\" + String(Array.from(new Uint8Array(value))) + \"}\";\n    }\n\n    return value;\n  },\n  disableInterception: function disableInterception() {\n    if (!_isInterceptorEnabled) {\n      return;\n    }\n\n    _isInterceptorEnabled = false;\n    _NativeWebSocketModule.default.send = originalRCTWebSocketSend;\n    _NativeWebSocketModule.default.sendBinary = originalRCTWebSocketSendBinary;\n    _NativeWebSocketModule.default.close = originalRCTWebSocketClose;\n    _NativeWebSocketModule.default.connect = originalRCTWebSocketConnect;\n    connectCallback = null;\n    closeCallback = null;\n    sendCallback = null;\n    onOpenCallback = null;\n    onMessageCallback = null;\n    onCloseCallback = null;\n    onErrorCallback = null;\n\n    WebSocketInterceptor._unregisterEvents();\n  }\n};\nmodule.exports = WebSocketInterceptor;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/WebSocket/WebSocketInterceptor.js"],"names":["NativeEventEmitter","require","base64","originalRCTWebSocketConnect","NativeWebSocketModule","connect","originalRCTWebSocketSend","send","originalRCTWebSocketSendBinary","sendBinary","originalRCTWebSocketClose","close","eventEmitter","subscriptions","closeCallback","sendCallback","connectCallback","onOpenCallback","onMessageCallback","onErrorCallback","onCloseCallback","isInterceptorEnabled","WebSocketInterceptor","setCloseCallback","callback","setSendCallback","setConnectCallback","setOnOpenCallback","setOnMessageCallback","setOnErrorCallback","setOnCloseCallback","_unregisterEvents","forEach","e","remove","_registerEvents","addListener","ev","id","type","_arrayBufferToString","data","code","reason","message","enableInterception","url","protocols","options","socketId","apply","arguments","length","value","toByteArray","buffer","undefined","ArrayBuffer","Uint8Array","String","Array","from","disableInterception","module","exports"],"mappings":"AASA;;;;AAIA;;AAFA,IAAMA,kBAAkB,GAAGC,OAAO,CAAC,oCAAD,CAAlC;;AAIA,IAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAME,2BAA2B,GAAGC,+BAAsBC,OAA1D;AACA,IAAMC,wBAAwB,GAAGF,+BAAsBG,IAAvD;AACA,IAAMC,8BAA8B,GAAGJ,+BAAsBK,UAA7D;AACA,IAAMC,yBAAyB,GAAGN,+BAAsBO,KAAxD;AAEA,IAAIC,YAAJ;AACA,IAAIC,aAAJ;AAEA,IAAIC,aAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,cAAJ;AACA,IAAIC,iBAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,eAAJ;AAEA,IAAIC,qBAAoB,GAAG,KAA3B;AAQA,IAAMC,oBAAoB,GAAG;AAI3BC,EAAAA,gBAJ2B,4BAIVC,QAJU,EAIA;AACzBV,IAAAA,aAAa,GAAGU,QAAhB;AACD,GAN0B;AAW3BC,EAAAA,eAX2B,2BAWXD,QAXW,EAWD;AACxBT,IAAAA,YAAY,GAAGS,QAAf;AACD,GAb0B;AAkB3BE,EAAAA,kBAlB2B,8BAkBRF,QAlBQ,EAkBE;AAC3BR,IAAAA,eAAe,GAAGQ,QAAlB;AACD,GApB0B;AAyB3BG,EAAAA,iBAzB2B,6BAyBTH,QAzBS,EAyBC;AAC1BP,IAAAA,cAAc,GAAGO,QAAjB;AACD,GA3B0B;AAgC3BI,EAAAA,oBAhC2B,gCAgCNJ,QAhCM,EAgCI;AAC7BN,IAAAA,iBAAiB,GAAGM,QAApB;AACD,GAlC0B;AAuC3BK,EAAAA,kBAvC2B,8BAuCRL,QAvCQ,EAuCE;AAC3BL,IAAAA,eAAe,GAAGK,QAAlB;AACD,GAzC0B;AA8C3BM,EAAAA,kBA9C2B,8BA8CRN,QA9CQ,EA8CE;AAC3BJ,IAAAA,eAAe,GAAGI,QAAlB;AACD,GAhD0B;AAkD3BH,EAAAA,oBAlD2B,kCAkDJ;AACrB,WAAOA,qBAAP;AACD,GApD0B;AAsD3BU,EAAAA,iBAtD2B,+BAsDP;AAClBlB,IAAAA,aAAa,CAACmB,OAAd,CAAsB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,MAAF,EAAJ;AAAA,KAAvB;AACArB,IAAAA,aAAa,GAAG,EAAhB;AACD,GAzD0B;AA8D3BsB,EAAAA,eA9D2B,6BA8DT;AAChBtB,IAAAA,aAAa,GAAG,CACdD,YAAY,CAACwB,WAAb,CAAyB,kBAAzB,EAA6C,UAAAC,EAAE,EAAI;AACjD,UAAInB,iBAAJ,EAAuB;AACrBA,QAAAA,iBAAiB,CACfmB,EAAE,CAACC,EADY,EAEfD,EAAE,CAACE,IAAH,KAAY,QAAZ,GACIjB,oBAAoB,CAACkB,oBAArB,CAA0CH,EAAE,CAACI,IAA7C,CADJ,GAEIJ,EAAE,CAACI,IAJQ,CAAjB;AAMD;AACF,KATD,CADc,EAWd7B,YAAY,CAACwB,WAAb,CAAyB,eAAzB,EAA0C,UAAAC,EAAE,EAAI;AAC9C,UAAIpB,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACoB,EAAE,CAACC,EAAJ,CAAd;AACD;AACF,KAJD,CAXc,EAgBd1B,YAAY,CAACwB,WAAb,CAAyB,iBAAzB,EAA4C,UAAAC,EAAE,EAAI;AAChD,UAAIjB,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACiB,EAAE,CAACC,EAAJ,EAAQ;AAACI,UAAAA,IAAI,EAAEL,EAAE,CAACK,IAAV;AAAgBC,UAAAA,MAAM,EAAEN,EAAE,CAACM;AAA3B,SAAR,CAAf;AACD;AACF,KAJD,CAhBc,EAqBd/B,YAAY,CAACwB,WAAb,CAAyB,iBAAzB,EAA4C,UAAAC,EAAE,EAAI;AAChD,UAAIlB,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACkB,EAAE,CAACC,EAAJ,EAAQ;AAACM,UAAAA,OAAO,EAAEP,EAAE,CAACO;AAAb,SAAR,CAAf;AACD;AACF,KAJD,CArBc,CAAhB;AA2BD,GA1F0B;AA4F3BC,EAAAA,kBA5F2B,gCA4FN;AACnB,QAAIxB,qBAAJ,EAA0B;AACxB;AACD;;AACDT,IAAAA,YAAY,GAAG,IAAIZ,kBAAJ,CAAuBI,8BAAvB,CAAf;;AACAkB,IAAAA,oBAAoB,CAACa,eAArB;;AAKA/B,mCAAsBC,OAAtB,GAAgC,UAC9ByC,GAD8B,EAE9BC,SAF8B,EAG9BC,OAH8B,EAI9BC,QAJ8B,EAK9B;AACA,UAAIjC,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAAC8B,GAAD,EAAMC,SAAN,EAAiBC,OAAjB,EAA0BC,QAA1B,CAAf;AACD;;AACD9C,MAAAA,2BAA2B,CAAC+C,KAA5B,CAAkC,IAAlC,EAAwCC,SAAxC;AACD,KAVD;;AAcA/C,mCAAsBG,IAAtB,GAA6B,UAASkC,IAAT,EAAeQ,QAAf,EAAyB;AACpD,UAAIlC,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAAC0B,IAAD,EAAOQ,QAAP,CAAZ;AACD;;AACD3C,MAAAA,wBAAwB,CAAC4C,KAAzB,CAA+B,IAA/B,EAAqCC,SAArC;AACD,KALD;;AASA/C,mCAAsBK,UAAtB,GAAmC,UAASgC,IAAT,EAAeQ,QAAf,EAAyB;AAC1D,UAAIlC,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACO,oBAAoB,CAACkB,oBAArB,CAA0CC,IAA1C,CAAD,EAAkDQ,QAAlD,CAAZ;AACD;;AACDzC,MAAAA,8BAA8B,CAAC0C,KAA/B,CAAqC,IAArC,EAA2CC,SAA3C;AACD,KALD;;AASA/C,mCAAsBO,KAAtB,GAA8B,YAAW;AACvC,UAAIG,aAAJ,EAAmB;AACjB,YAAIqC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BtC,UAAAA,aAAa,CAACqC,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,EAA6BA,SAAS,CAAC,CAAD,CAAtC,CAAb;AACD,SAFD,MAEO;AACLrC,UAAAA,aAAa,CAAC,IAAD,EAAO,IAAP,EAAaqC,SAAS,CAAC,CAAD,CAAtB,CAAb;AACD;AACF;;AACDzC,MAAAA,yBAAyB,CAACwC,KAA1B,CAAgC,IAAhC,EAAsCC,SAAtC;AACD,KATD;;AAWA9B,IAAAA,qBAAoB,GAAG,IAAvB;AACD,GAlJ0B;AAoJ3BmB,EAAAA,oBApJ2B,gCAoJNC,IApJM,EAoJA;AACzB,QAAMY,KAAK,GAAGnD,MAAM,CAACoD,WAAP,CAAmBb,IAAnB,EAAyBc,MAAvC;;AACA,QAAIF,KAAK,KAAKG,SAAV,IAAuBH,KAAK,KAAK,IAArC,EAA2C;AACzC,aAAO,YAAP;AACD;;AACD,QACE,OAAOI,WAAP,KAAuB,WAAvB,IACA,OAAOC,UAAP,KAAsB,WADtB,IAEAL,KAAK,YAAYI,WAHnB,EAIE;AACA,+BAAuBE,MAAM,CAACC,KAAK,CAACC,IAAN,CAAW,IAAIH,UAAJ,CAAeL,KAAf,CAAX,CAAD,CAA7B;AACD;;AACD,WAAOA,KAAP;AACD,GAjK0B;AAoK3BS,EAAAA,mBApK2B,iCAoKL;AACpB,QAAI,CAACzC,qBAAL,EAA2B;AACzB;AACD;;AACDA,IAAAA,qBAAoB,GAAG,KAAvB;AACAjB,mCAAsBG,IAAtB,GAA6BD,wBAA7B;AACAF,mCAAsBK,UAAtB,GAAmCD,8BAAnC;AACAJ,mCAAsBO,KAAtB,GAA8BD,yBAA9B;AACAN,mCAAsBC,OAAtB,GAAgCF,2BAAhC;AAEAa,IAAAA,eAAe,GAAG,IAAlB;AACAF,IAAAA,aAAa,GAAG,IAAhB;AACAC,IAAAA,YAAY,GAAG,IAAf;AACAE,IAAAA,cAAc,GAAG,IAAjB;AACAC,IAAAA,iBAAiB,GAAG,IAApB;AACAE,IAAAA,eAAe,GAAG,IAAlB;AACAD,IAAAA,eAAe,GAAG,IAAlB;;AAEAG,IAAAA,oBAAoB,CAACS,iBAArB;AACD;AAvL0B,CAA7B;AA0LAgC,MAAM,CAACC,OAAP,GAAiB1C,oBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\n\nimport NativeWebSocketModule from './NativeWebSocketModule';\n\nconst base64 = require('base64-js');\n\nconst originalRCTWebSocketConnect = NativeWebSocketModule.connect;\nconst originalRCTWebSocketSend = NativeWebSocketModule.send;\nconst originalRCTWebSocketSendBinary = NativeWebSocketModule.sendBinary;\nconst originalRCTWebSocketClose = NativeWebSocketModule.close;\n\nlet eventEmitter: NativeEventEmitter;\nlet subscriptions: Array<EventSubscription>;\n\nlet closeCallback;\nlet sendCallback;\nlet connectCallback;\nlet onOpenCallback;\nlet onMessageCallback;\nlet onErrorCallback;\nlet onCloseCallback;\n\nlet isInterceptorEnabled = false;\n\n/**\n * A network interceptor which monkey-patches RCTWebSocketModule methods\n * to gather all websocket network requests/responses, in order to show\n * their information in the React Native inspector development tool.\n */\n\nconst WebSocketInterceptor = {\n  /**\n   * Invoked when RCTWebSocketModule.close(...) is called.\n   */\n  setCloseCallback(callback) {\n    closeCallback = callback;\n  },\n\n  /**\n   * Invoked when RCTWebSocketModule.send(...) or sendBinary(...) is called.\n   */\n  setSendCallback(callback) {\n    sendCallback = callback;\n  },\n\n  /**\n   * Invoked when RCTWebSocketModule.connect(...) is called.\n   */\n  setConnectCallback(callback) {\n    connectCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketOpen\" happens.\n   */\n  setOnOpenCallback(callback) {\n    onOpenCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketMessage\" happens.\n   */\n  setOnMessageCallback(callback) {\n    onMessageCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketFailed\" happens.\n   */\n  setOnErrorCallback(callback) {\n    onErrorCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketClosed\" happens.\n   */\n  setOnCloseCallback(callback) {\n    onCloseCallback = callback;\n  },\n\n  isInterceptorEnabled() {\n    return isInterceptorEnabled;\n  },\n\n  _unregisterEvents() {\n    subscriptions.forEach(e => e.remove());\n    subscriptions = [];\n  },\n\n  /**\n   * Add listeners to the RCTWebSocketModule events to intercept them.\n   */\n  _registerEvents() {\n    subscriptions = [\n      eventEmitter.addListener('websocketMessage', ev => {\n        if (onMessageCallback) {\n          onMessageCallback(\n            ev.id,\n            ev.type === 'binary'\n              ? WebSocketInterceptor._arrayBufferToString(ev.data)\n              : ev.data,\n          );\n        }\n      }),\n      eventEmitter.addListener('websocketOpen', ev => {\n        if (onOpenCallback) {\n          onOpenCallback(ev.id);\n        }\n      }),\n      eventEmitter.addListener('websocketClosed', ev => {\n        if (onCloseCallback) {\n          onCloseCallback(ev.id, {code: ev.code, reason: ev.reason});\n        }\n      }),\n      eventEmitter.addListener('websocketFailed', ev => {\n        if (onErrorCallback) {\n          onErrorCallback(ev.id, {message: ev.message});\n        }\n      }),\n    ];\n  },\n\n  enableInterception() {\n    if (isInterceptorEnabled) {\n      return;\n    }\n    eventEmitter = new NativeEventEmitter(NativeWebSocketModule);\n    WebSocketInterceptor._registerEvents();\n\n    // Override `connect` method for all RCTWebSocketModule requests\n    // to intercept the request url, protocols, options and socketId,\n    // then pass them through the `connectCallback`.\n    NativeWebSocketModule.connect = function(\n      url,\n      protocols,\n      options,\n      socketId,\n    ) {\n      if (connectCallback) {\n        connectCallback(url, protocols, options, socketId);\n      }\n      originalRCTWebSocketConnect.apply(this, arguments);\n    };\n\n    // Override `send` method for all RCTWebSocketModule requests to intercept\n    // the data sent, then pass them through the `sendCallback`.\n    NativeWebSocketModule.send = function(data, socketId) {\n      if (sendCallback) {\n        sendCallback(data, socketId);\n      }\n      originalRCTWebSocketSend.apply(this, arguments);\n    };\n\n    // Override `sendBinary` method for all RCTWebSocketModule requests to\n    // intercept the data sent, then pass them through the `sendCallback`.\n    NativeWebSocketModule.sendBinary = function(data, socketId) {\n      if (sendCallback) {\n        sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);\n      }\n      originalRCTWebSocketSendBinary.apply(this, arguments);\n    };\n\n    // Override `close` method for all RCTWebSocketModule requests to intercept\n    // the close information, then pass them through the `closeCallback`.\n    NativeWebSocketModule.close = function() {\n      if (closeCallback) {\n        if (arguments.length === 3) {\n          closeCallback(arguments[0], arguments[1], arguments[2]);\n        } else {\n          closeCallback(null, null, arguments[0]);\n        }\n      }\n      originalRCTWebSocketClose.apply(this, arguments);\n    };\n\n    isInterceptorEnabled = true;\n  },\n\n  _arrayBufferToString(data) {\n    const value = base64.toByteArray(data).buffer;\n    if (value === undefined || value === null) {\n      return '(no value)';\n    }\n    if (\n      typeof ArrayBuffer !== 'undefined' &&\n      typeof Uint8Array !== 'undefined' &&\n      value instanceof ArrayBuffer\n    ) {\n      return `ArrayBuffer {${String(Array.from(new Uint8Array(value)))}}`;\n    }\n    return value;\n  },\n\n  // Unpatch RCTWebSocketModule methods and remove the callbacks.\n  disableInterception() {\n    if (!isInterceptorEnabled) {\n      return;\n    }\n    isInterceptorEnabled = false;\n    NativeWebSocketModule.send = originalRCTWebSocketSend;\n    NativeWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;\n    NativeWebSocketModule.close = originalRCTWebSocketClose;\n    NativeWebSocketModule.connect = originalRCTWebSocketConnect;\n\n    connectCallback = null;\n    closeCallback = null;\n    sendCallback = null;\n    onOpenCallback = null;\n    onMessageCallback = null;\n    onCloseCallback = null;\n    onErrorCallback = null;\n\n    WebSocketInterceptor._unregisterEvents();\n  },\n};\n\nmodule.exports = WebSocketInterceptor;\n"]},"metadata":{},"sourceType":"script"}