{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar EventEmitter = require('../vendor/emitter/EventEmitter');\n\nvar Platform = require('../Utilities/Platform');\n\nvar RCTDeviceEventEmitter = require('./RCTDeviceEventEmitter');\n\nvar invariant = require('invariant');\n\nvar NativeEventEmitter = function (_EventEmitter) {\n  _inherits(NativeEventEmitter, _EventEmitter);\n\n  var _super = _createSuper(NativeEventEmitter);\n\n  function NativeEventEmitter(nativeModule) {\n    var _this;\n\n    _classCallCheck(this, NativeEventEmitter);\n\n    _this = _super.call(this, RCTDeviceEventEmitter.sharedSubscriber);\n\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule, 'Native module cannot be null.');\n      _this._nativeModule = nativeModule;\n    }\n\n    return _this;\n  }\n\n  _createClass(NativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      if (this._nativeModule != null) {\n        this._nativeModule.addListener(eventType);\n      }\n\n      return _get(_getPrototypeOf(NativeEventEmitter.prototype), \"addListener\", this).call(this, eventType, listener, context);\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      invariant(eventType, 'eventType argument is required.');\n      var count = this.listeners(eventType).length;\n\n      if (this._nativeModule != null) {\n        this._nativeModule.removeListeners(count);\n      }\n\n      _get(_getPrototypeOf(NativeEventEmitter.prototype), \"removeAllListeners\", this).call(this, eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      if (this._nativeModule != null) {\n        this._nativeModule.removeListeners(1);\n      }\n\n      _get(_getPrototypeOf(NativeEventEmitter.prototype), \"removeSubscription\", this).call(this, subscription);\n    }\n  }]);\n\n  return NativeEventEmitter;\n}(EventEmitter);\n\nmodule.exports = NativeEventEmitter;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","nativeModule","sharedSubscriber","OS","_nativeModule","eventType","listener","context","addListener","count","listeners","length","removeListeners","subscription","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAD,CAAxB;;AACA,IAAME,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAArC;;AAEA,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;IAcMI,kB;;;;;AAGJ,8BAAYC,YAAZ,EAAyC;AAAA;;AAAA;;AACvC,8BAAMH,qBAAqB,CAACI,gBAA5B;;AACA,QAAIL,QAAQ,CAACM,EAAT,KAAgB,KAApB,EAA2B;AACzBJ,MAAAA,SAAS,CAACE,YAAD,EAAe,+BAAf,CAAT;AACA,YAAKG,aAAL,GAAqBH,YAArB;AACD;;AALsC;AAMxC;;;;gCAGCI,S,EACAC,Q,EACAC,O,EACqB;AACrB,UAAI,KAAKH,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,aAAKA,aAAL,CAAmBI,WAAnB,CAA+BH,SAA/B;AACD;;AACD,iGAAyBA,SAAzB,EAAoCC,QAApC,EAA8CC,OAA9C;AACD;;;uCAEkBF,S,EAAmB;AACpCN,MAAAA,SAAS,CAACM,SAAD,EAAY,iCAAZ,CAAT;AACA,UAAMI,KAAK,GAAG,KAAKC,SAAL,CAAeL,SAAf,EAA0BM,MAAxC;;AACA,UAAI,KAAKP,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,aAAKA,aAAL,CAAmBQ,eAAnB,CAAmCH,KAAnC;AACD;;AACD,iGAAyBJ,SAAzB;AACD;;;uCAEkBQ,Y,EAAmC;AACpD,UAAI,KAAKT,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,aAAKA,aAAL,CAAmBQ,eAAnB,CAAmC,CAAnC;AACD;;AACD,iGAAyBC,YAAzB;AACD;;;;EApC8BlB,Y;;AAuCjCmB,MAAM,CAACC,OAAP,GAAiBf,kBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\nconst Platform = require('../Utilities/Platform');\nconst RCTDeviceEventEmitter = require('./RCTDeviceEventEmitter');\n\nconst invariant = require('invariant');\n\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\n\ntype NativeModule = {\n  +addListener: (eventType: string) => void,\n  +removeListeners: (count: number) => void,\n  ...\n};\n\n/**\n * Abstract base class for implementing event-emitting modules. This implements\n * a subset of the standard EventEmitter node module API.\n */\nclass NativeEventEmitter extends EventEmitter {\n  _nativeModule: ?NativeModule;\n\n  constructor(nativeModule: ?NativeModule) {\n    super(RCTDeviceEventEmitter.sharedSubscriber);\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule, 'Native module cannot be null.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    if (this._nativeModule != null) {\n      this._nativeModule.addListener(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: string) {\n    invariant(eventType, 'eventType argument is required.');\n    const count = this.listeners(eventType).length;\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(count);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(1);\n    }\n    super.removeSubscription(subscription);\n  }\n}\n\nmodule.exports = NativeEventEmitter;\n"]},"metadata":{},"sourceType":"script"}