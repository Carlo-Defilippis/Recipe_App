{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Commands = exports.__INTERNAL_VIEW_CONFIG = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _codegenNativeCommands = _interopRequireDefault(require(\"../../Utilities/codegenNativeCommands\"));\n\nvar Platform = require('../../Utilities/Platform');\n\nvar ReactNativeViewViewConfigAndroid = require('./ReactNativeViewViewConfigAndroid');\n\nvar registerGeneratedViewConfig = require('../../Utilities/registerGeneratedViewConfig');\n\nvar requireNativeComponent = require('../../ReactNative/requireNativeComponent');\n\nvar NativeViewComponent;\nvar viewConfig;\n\nif (__DEV__ || global.RN$Bridgeless) {\n  if (Platform.OS === 'android') {\n    viewConfig = ReactNativeViewViewConfigAndroid;\n    registerGeneratedViewConfig('RCTView', ReactNativeViewViewConfigAndroid);\n  } else {\n    viewConfig = {};\n    registerGeneratedViewConfig('RCTView', {\n      uiViewClassName: 'RCTView'\n    });\n  }\n\n  NativeViewComponent = 'RCTView';\n} else {\n  NativeViewComponent = requireNativeComponent('RCTView');\n}\n\nvar __INTERNAL_VIEW_CONFIG = viewConfig;\nexports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;\nvar Commands = (0, _codegenNativeCommands.default)({\n  supportedCommands: ['hotspotUpdate', 'setPressed']\n});\nexports.Commands = Commands;\nvar _default = NativeViewComponent;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js"],"names":["Platform","require","ReactNativeViewViewConfigAndroid","registerGeneratedViewConfig","requireNativeComponent","NativeViewComponent","viewConfig","__DEV__","global","RN$Bridgeless","OS","uiViewClassName","__INTERNAL_VIEW_CONFIG","Commands","supportedCommands"],"mappings":"AAUA;;;;;;;;;;;AAQA;;AAEA;;AARA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMC,gCAAgC,GAAGD,OAAO,CAAC,oCAAD,CAAhD;;AAEA,IAAME,2BAA2B,GAAGF,OAAO,CAAC,6CAAD,CAA3C;;AACA,IAAMG,sBAAsB,GAAGH,OAAO,CAAC,0CAAD,CAAtC;;AAUA,IAAII,mBAAJ;AACA,IAAIC,UAAJ;;AA4BA,IAAIC,OAAO,IAAIC,MAAM,CAACC,aAAtB,EAAqC;AAGnC,MAAIT,QAAQ,CAACU,EAAT,KAAgB,SAApB,EAA+B;AAC7BJ,IAAAA,UAAU,GAAGJ,gCAAb;AACAC,IAAAA,2BAA2B,CAAC,SAAD,EAAYD,gCAAZ,CAA3B;AACD,GAHD,MAGO;AACLI,IAAAA,UAAU,GAAG,EAAb;AACAH,IAAAA,2BAA2B,CAAC,SAAD,EAAY;AAACQ,MAAAA,eAAe,EAAE;AAAlB,KAAZ,CAA3B;AACD;;AAEDN,EAAAA,mBAAmB,GAAG,SAAtB;AACD,CAZD,MAYO;AACLA,EAAAA,mBAAmB,GAAGD,sBAAsB,CAAC,SAAD,CAA5C;AACD;;AAEM,IAAMQ,sBAAsB,GAAGN,UAA/B;;AAcA,IAAMO,QAAwB,GAAG,oCAAsC;AAC5EC,EAAAA,iBAAiB,EAAE,CAAC,eAAD,EAAkB,YAAlB;AADyD,CAAtC,CAAjC;;eAIUT,mB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst ReactNativeViewViewConfigAndroid = require('./ReactNativeViewViewConfigAndroid');\n\nconst registerGeneratedViewConfig = require('../../Utilities/registerGeneratedViewConfig');\nconst requireNativeComponent = require('../../ReactNative/requireNativeComponent');\n\nimport * as React from 'react';\n\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport type {ViewProps} from './ViewPropTypes';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\n\nexport type ViewNativeComponentType = HostComponent<ViewProps>;\n\nlet NativeViewComponent;\nlet viewConfig:\n  | {...}\n  | {|\n      bubblingEventTypes?: $ReadOnly<{\n        [eventName: string]: $ReadOnly<{|\n          phasedRegistrationNames: $ReadOnly<{|\n            bubbled: string,\n            captured: string,\n          |}>,\n        |}>,\n        ...,\n      }>,\n      directEventTypes?: $ReadOnly<{\n        [eventName: string]: $ReadOnly<{|registrationName: string|}>,\n        ...,\n      }>,\n      uiViewClassName: string,\n      validAttributes?: {\n        [propName: string]:\n          | true\n          | $ReadOnly<{|\n              diff?: <T>(arg1: any, arg2: any) => boolean,\n              process?: (arg1: any) => any,\n            |}>,\n        ...,\n      },\n    |};\n\nif (__DEV__ || global.RN$Bridgeless) {\n  // On Android, View extends the base component with additional view-only props\n  // On iOS, the base component is View\n  if (Platform.OS === 'android') {\n    viewConfig = ReactNativeViewViewConfigAndroid;\n    registerGeneratedViewConfig('RCTView', ReactNativeViewViewConfigAndroid);\n  } else {\n    viewConfig = {};\n    registerGeneratedViewConfig('RCTView', {uiViewClassName: 'RCTView'});\n  }\n\n  NativeViewComponent = 'RCTView';\n} else {\n  NativeViewComponent = requireNativeComponent('RCTView');\n}\n\nexport const __INTERNAL_VIEW_CONFIG = viewConfig;\n\ninterface NativeCommands {\n  +hotspotUpdate: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    x: number,\n    y: number,\n  ) => void;\n  +setPressed: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    pressed: boolean,\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['hotspotUpdate', 'setPressed'],\n});\n\nexport default ((NativeViewComponent: any): ViewNativeComponentType);\n"]},"metadata":{},"sourceType":"script"}