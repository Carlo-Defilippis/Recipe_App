{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withStatus = void 0;\n\nvar _mobx = require(\"mobx\");\n\nvar withStatus = function withStatus() {\n  var status = _mobx.observable.box(\"idle\");\n\n  return {\n    views: {\n      get status() {\n        return status.get();\n      },\n\n      set status(value) {\n        status.set(value);\n      }\n\n    },\n    actions: {\n      setStatus: function setStatus(value) {\n        status.set(value);\n      }\n    }\n  };\n};\n\nexports.withStatus = withStatus;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/app/models/extensions/with-status.ts"],"names":["withStatus","status","observable","box","views","get","value","set","actions","setStatus"],"mappings":";;;;;AAAA;;AAyBO,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAM;AAI9B,MAAMC,MAAgC,GAAGC,iBAAWC,GAAX,CAAe,MAAf,CAAzC;;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAE;AAEL,UAAIH,MAAJ,GAAa;AACX,eAAOA,MAAM,CAACI,GAAP,EAAP;AACD,OAJI;;AAML,UAAIJ,MAAJ,CAAWK,KAAX,EAA8B;AAC5BL,QAAAA,MAAM,CAACM,GAAP,CAAWD,KAAX;AACD;;AARI,KADF;AAWLE,IAAAA,OAAO,EAAE;AAMPC,MAAAA,SANO,qBAMGH,KANH,EAMsB;AAC3BL,QAAAA,MAAM,CAACM,GAAP,CAAWD,KAAX;AACD;AARM;AAXJ,GAAP;AAsBD,CA5BM","sourcesContent":["import { observable, IObservableValue } from \"mobx\"\r\n\r\nexport type StatusType = \"idle\" | \"pending\" | \"done\" | \"error\"\r\n\r\n/**\r\n * Adds a status field to the model often for tracking api access.\r\n *\r\n * This property is a string which can be observed, but will not\r\n * participate in any serialization.\r\n *\r\n * Use this to extend your models:\r\n *\r\n * ```ts\r\n *   types.model(\"MyModel\")\r\n *     .props({})\r\n *     .actions(self => ({}))\r\n *     .extend(withStatus) // <--- time to shine baby!!!\r\n * ```\r\n *\r\n * This will give you these 3 options:\r\n *\r\n *   .status            // returns a string\r\n *   .status = \"done\"   // change the status directly\r\n *   .setStatus(\"done\") // change the status and trigger an mst action\r\n */\r\nexport const withStatus = () => {\r\n  /**\r\n   * The observable backing store for the status field.\r\n   */\r\n  const status: IObservableValue<string> = observable.box(\"idle\")\r\n\r\n  return {\r\n    views: {\r\n      // a getter\r\n      get status() {\r\n        return status.get() as StatusType\r\n      },\r\n      // as setter\r\n      set status(value: StatusType) {\r\n        status.set(value)\r\n      },\r\n    },\r\n    actions: {\r\n      /**\r\n       * Set the status to something new.\r\n       *\r\n       * @param value The new status.\r\n       */\r\n      setStatus(value: StatusType) {\r\n        status.set(value)\r\n      },\r\n    },\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}