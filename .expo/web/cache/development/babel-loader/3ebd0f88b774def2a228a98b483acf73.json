{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.NAVIGATION_PERSISTENCE_KEY = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nrequire(\"./i18n\");\n\nrequire(\"./utils/ignore-warnings\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar storage = _interopRequireWildcard(require(\"./utils/storage\"));\n\nvar _navigation = require(\"./navigation\");\n\nvar _models = require(\"./models\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\na2tt\\\\Desktop\\\\homework\\\\Recipe_App\\\\app\\\\app.tsx\";\n(0, _reactNativeScreens.enableScreens)();\nvar NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\";\nexports.NAVIGATION_PERSISTENCE_KEY = NAVIGATION_PERSISTENCE_KEY;\n\nfunction App() {\n  var navigationRef = (0, _react.useRef)();\n\n  var _useState = (0, _react.useState)(undefined),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      rootStore = _useState2[0],\n      setRootStore = _useState2[1];\n\n  (0, _navigation.setRootNavigation)(navigationRef);\n  (0, _navigation.useBackButtonHandler)(navigationRef, _navigation.canExit);\n\n  var _useNavigationPersist = (0, _navigation.useNavigationPersistence)(storage, NAVIGATION_PERSISTENCE_KEY),\n      initialNavigationState = _useNavigationPersist.initialNavigationState,\n      onNavigationStateChange = _useNavigationPersist.onNavigationStateChange;\n\n  (0, _react.useEffect)(function () {\n    (function _callee() {\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              (0, _models.setupRootStore)().then(setRootStore);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  if (!rootStore) return null;\n  return _react.default.createElement(_models.RootStoreProvider, {\n    value: rootStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialSafeAreaInsets: _reactNativeSafeAreaContext.initialWindowSafeAreaInsets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_navigation.RootNavigator, {\n    ref: navigationRef,\n    initialState: initialNavigationState,\n    onStateChange: onNavigationStateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/app/app.tsx"],"names":["NAVIGATION_PERSISTENCE_KEY","App","navigationRef","undefined","rootStore","setRootStore","canExit","storage","initialNavigationState","onNavigationStateChange","then","initialWindowSafeAreaInsets"],"mappings":";;;;;;;;;;;;;AAWA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAOA;;AAKA;;;AACA;AAEO,IAAMA,0BAA0B,GAAG,kBAAnC;;;AAKP,SAASC,GAAT,GAAe;AACb,MAAMC,aAAa,GAAG,oBAAtB;;AADa,kBAEqB,qBAAgCC,SAAhC,CAFrB;AAAA;AAAA,MAENC,SAFM;AAAA,MAEKC,YAFL;;AAIb,qCAAkBH,aAAlB;AACA,wCAAqBA,aAArB,EAAoCI,mBAApC;;AALa,8BAM+C,0CAC1DC,OAD0D,EAE1DP,0BAF0D,CAN/C;AAAA,MAMLQ,sBANK,yBAMLA,sBANK;AAAA,MAMmBC,uBANnB,yBAMmBA,uBANnB;;AAYb,wBAAU,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AACC,4CAAiBC,IAAjB,CAAsBL,YAAtB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAGD,GAJD,EAIG,EAJH;AAUA,MAAI,CAACD,SAAL,EAAgB,OAAO,IAAP;AAGhB,SACE,6BAAC,yBAAD;AAAmB,IAAA,KAAK,EAAEA,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,4CAAD;AAAkB,IAAA,qBAAqB,EAAEO,uDAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6BAAC,yBAAD;AACE,IAAA,GAAG,EAAET,aADP;AAEE,IAAA,YAAY,EAAEM,sBAFhB;AAGE,IAAA,aAAa,EAAEC,uBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAWD;;eAEcR,G","sourcesContent":["/**\r\n * Welcome to the main entry point of the app. In this file, we'll\r\n * be kicking off our app or storybook.\r\n *\r\n * Most of this file is boilerplate and you shouldn't need to modify\r\n * it very often. But take some time to look through and understand\r\n * what is going on here.\r\n *\r\n * The app navigation resides in ./app/navigation, so head over there\r\n * if you're interested in adding screens and navigators.\r\n */\r\nimport \"./i18n\"\r\nimport \"./utils/ignore-warnings\"\r\nimport React, { useState, useEffect, useRef } from \"react\"\r\nimport { NavigationContainerRef } from \"@react-navigation/native\"\r\nimport { SafeAreaProvider, initialWindowSafeAreaInsets } from \"react-native-safe-area-context\"\r\nimport * as storage from \"./utils/storage\"\r\nimport {\r\n  useBackButtonHandler,\r\n  RootNavigator,\r\n  canExit,\r\n  setRootNavigation,\r\n  useNavigationPersistence,\r\n} from \"./navigation\"\r\nimport { RootStore, RootStoreProvider, setupRootStore } from \"./models\"\r\n\r\n// This puts screens in a native ViewController or Activity. If you want fully native\r\n// stack navigation, use `createNativeStackNavigator` in place of `createStackNavigator`:\r\n// https://github.com/kmagiera/react-native-screens#using-native-stack-navigator\r\nimport { enableScreens } from 'react-native-screens'\r\nenableScreens()\r\n\r\nexport const NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\"\r\n\r\n/**\r\n * This is the root component of our app.\r\n */\r\nfunction App() {\r\n  const navigationRef = useRef<NavigationContainerRef>()\r\n  const [rootStore, setRootStore] = useState<RootStore | undefined>(undefined)\r\n\r\n  setRootNavigation(navigationRef)\r\n  useBackButtonHandler(navigationRef, canExit)\r\n  const { initialNavigationState, onNavigationStateChange } = useNavigationPersistence(\r\n    storage,\r\n    NAVIGATION_PERSISTENCE_KEY,\r\n  )\r\n\r\n  // Kick off initial async loading actions, like loading fonts and RootStore\r\n  useEffect(() => {\r\n    (async () => {\r\n      setupRootStore().then(setRootStore)\r\n    })()\r\n  }, [])\r\n\r\n  // Before we show the app, we have to wait for our state to be ready.\r\n  // In the meantime, don't render anything. This will be the background\r\n  // color set in native by rootView's background color. You can replace\r\n  // with your own loading component if you wish.\r\n  if (!rootStore) return null\r\n\r\n  // otherwise, we're ready to render the app\r\n  return (\r\n    <RootStoreProvider value={rootStore}>\r\n      <SafeAreaProvider initialSafeAreaInsets={initialWindowSafeAreaInsets}>\r\n        <RootNavigator\r\n          ref={navigationRef}\r\n          initialState={initialNavigationState}\r\n          onStateChange={onNavigationStateChange}\r\n        />\r\n      </SafeAreaProvider>\r\n    </RootStoreProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"script"}