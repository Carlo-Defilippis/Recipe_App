{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar InspectorAgent = require('./InspectorAgent');\n\nvar JSInspector = require('./JSInspector');\n\nvar XMLHttpRequest = require('../Network/XMLHttpRequest');\n\nvar Interceptor = function () {\n  function Interceptor(agent) {\n    _classCallCheck(this, Interceptor);\n\n    this._agent = agent;\n    this._requests = new Map();\n  }\n\n  _createClass(Interceptor, [{\n    key: \"getData\",\n    value: function getData(requestId) {\n      return this._requests.get(requestId);\n    }\n  }, {\n    key: \"requestSent\",\n    value: function requestSent(id, url, method, headers) {\n      var requestId = String(id);\n\n      this._requests.set(requestId, '');\n\n      var request = {\n        url: url,\n        method: method,\n        headers: headers,\n        initialPriority: 'Medium'\n      };\n      var event = {\n        requestId: requestId,\n        documentURL: '',\n        frameId: '1',\n        loaderId: '1',\n        request: request,\n        timestamp: JSInspector.getTimestamp(),\n        initiator: {\n          type: 'other'\n        },\n        type: 'Other'\n      };\n\n      this._agent.sendEvent('requestWillBeSent', event);\n    }\n  }, {\n    key: \"responseReceived\",\n    value: function responseReceived(id, url, status, headers) {\n      var requestId = String(id);\n      var response = {\n        url: url,\n        status: status,\n        statusText: String(status),\n        headers: headers,\n        requestHeaders: {},\n        mimeType: this._getMimeType(headers),\n        connectionReused: false,\n        connectionId: -1,\n        encodedDataLength: 0,\n        securityState: 'unknown'\n      };\n      var event = {\n        requestId: requestId,\n        frameId: '1',\n        loaderId: '1',\n        timestamp: JSInspector.getTimestamp(),\n        type: 'Other',\n        response: response\n      };\n\n      this._agent.sendEvent('responseReceived', event);\n    }\n  }, {\n    key: \"dataReceived\",\n    value: function dataReceived(id, data) {\n      var requestId = String(id);\n      var existingData = this._requests.get(requestId) || '';\n\n      this._requests.set(requestId, existingData.concat(data));\n\n      var event = {\n        requestId: requestId,\n        timestamp: JSInspector.getTimestamp(),\n        dataLength: data.length,\n        encodedDataLength: data.length\n      };\n\n      this._agent.sendEvent('dataReceived', event);\n    }\n  }, {\n    key: \"loadingFinished\",\n    value: function loadingFinished(id, encodedDataLength) {\n      var event = {\n        requestId: String(id),\n        timestamp: JSInspector.getTimestamp(),\n        encodedDataLength: encodedDataLength\n      };\n\n      this._agent.sendEvent('loadingFinished', event);\n    }\n  }, {\n    key: \"loadingFailed\",\n    value: function loadingFailed(id, error) {\n      var event = {\n        requestId: String(id),\n        timestamp: JSInspector.getTimestamp(),\n        type: 'Other',\n        errorText: error\n      };\n\n      this._agent.sendEvent('loadingFailed', event);\n    }\n  }, {\n    key: \"_getMimeType\",\n    value: function _getMimeType(headers) {\n      var contentType = headers['Content-Type'] || '';\n      return contentType.split(';')[0];\n    }\n  }]);\n\n  return Interceptor;\n}();\n\nvar NetworkAgent = function (_InspectorAgent) {\n  _inherits(NetworkAgent, _InspectorAgent);\n\n  var _super = _createSuper(NetworkAgent);\n\n  function NetworkAgent() {\n    _classCallCheck(this, NetworkAgent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NetworkAgent, [{\n    key: \"enable\",\n    value: function enable(_ref) {\n      var maxResourceBufferSize = _ref.maxResourceBufferSize,\n          maxTotalBufferSize = _ref.maxTotalBufferSize;\n      this._interceptor = new Interceptor(this);\n      XMLHttpRequest.setInterceptor(this._interceptor);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      XMLHttpRequest.setInterceptor(null);\n      this._interceptor = null;\n    }\n  }, {\n    key: \"getResponseBody\",\n    value: function getResponseBody(_ref2) {\n      var requestId = _ref2.requestId;\n      return {\n        body: this.interceptor().getData(requestId),\n        base64Encoded: false\n      };\n    }\n  }, {\n    key: \"interceptor\",\n    value: function interceptor() {\n      if (this._interceptor) {\n        return this._interceptor;\n      } else {\n        throw Error('_interceptor can not be null');\n      }\n    }\n  }]);\n\n  return NetworkAgent;\n}(InspectorAgent);\n\nNetworkAgent.DOMAIN = 'Network';\nmodule.exports = NetworkAgent;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/JSInspector/NetworkAgent.js"],"names":["InspectorAgent","require","JSInspector","XMLHttpRequest","Interceptor","agent","_agent","_requests","Map","requestId","get","id","url","method","headers","String","set","request","initialPriority","event","documentURL","frameId","loaderId","timestamp","getTimestamp","initiator","type","sendEvent","status","response","statusText","requestHeaders","mimeType","_getMimeType","connectionReused","connectionId","encodedDataLength","securityState","data","existingData","concat","dataLength","length","error","errorText","contentType","split","NetworkAgent","maxResourceBufferSize","maxTotalBufferSize","_interceptor","setInterceptor","body","interceptor","getData","base64Encoded","Error","DOMAIN","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst InspectorAgent = require('./InspectorAgent');\nconst JSInspector = require('./JSInspector');\nconst XMLHttpRequest = require('../Network/XMLHttpRequest');\n\nimport type EventSender from './InspectorAgent';\n\ntype RequestId = string;\n\ntype LoaderId = string;\ntype FrameId = string;\ntype Timestamp = number;\n\ntype Headers = Object;\n\n// We don't currently care about this\ntype ResourceTiming = null;\n\ntype ResourceType =\n  | 'Document'\n  | 'Stylesheet'\n  | 'Image'\n  | 'Media'\n  | 'Font'\n  | 'Script'\n  | 'TextTrack'\n  | 'XHR'\n  | 'Fetch'\n  | 'EventSource'\n  | 'WebSocket'\n  | 'Manifest'\n  | 'Other';\n\ntype SecurityState =\n  | 'unknown'\n  | 'neutral'\n  | 'insecure'\n  | 'warning'\n  | 'secure'\n  | 'info';\ntype BlockedReason =\n  | 'csp'\n  | 'mixed-content'\n  | 'origin'\n  | 'inspector'\n  | 'subresource-filter'\n  | 'other';\n\ntype StackTrace = null;\n\ntype Initiator = {\n  type: 'script' | 'other',\n  stackTrace?: StackTrace,\n  url?: string,\n  lineNumber?: number,\n  ...\n};\n\ntype ResourcePriority = 'VeryLow' | 'Low' | 'Medium' | 'High' | 'VeryHigh';\n\ntype Request = {\n  url: string,\n  method: string,\n  headers: Headers,\n  postData?: string,\n  mixedContentType?: 'blockable' | 'optionally-blockable' | 'none',\n  initialPriority: ResourcePriority,\n  ...\n};\n\ntype Response = {\n  url: string,\n  status: number,\n  statusText: string,\n  headers: Headers,\n  headersText?: string,\n  mimeType: string,\n  requestHeaders?: Headers,\n  requestHeadersText?: string,\n  connectionReused: boolean,\n  connectionId: number,\n  fromDiskCache?: boolean,\n  encodedDataLength: number,\n  timing?: ResourceTiming,\n  securityState: SecurityState,\n  ...\n};\n\ntype RequestWillBeSentEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  documentURL: string,\n  request: Request,\n  timestamp: Timestamp,\n  initiator: Initiator,\n  redirectResponse?: Response,\n  // This is supposed to be optional but the inspector crashes without it,\n  // see https://bugs.chromium.org/p/chromium/issues/detail?id=653138\n  type: ResourceType,\n  ...\n};\n\ntype ResponseReceivedEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  response: Response,\n  ...\n};\n\ntype DataReceived = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  dataLength: number,\n  encodedDataLength: number,\n  ...\n};\n\ntype LoadingFinishedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  encodedDataLength: number,\n  ...\n};\n\ntype LoadingFailedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  errorText: string,\n  canceled?: boolean,\n  blockedReason?: BlockedReason,\n  ...\n};\n\nclass Interceptor {\n  _agent: NetworkAgent;\n  _requests: Map<string, string>;\n\n  constructor(agent: NetworkAgent) {\n    this._agent = agent;\n    this._requests = new Map();\n  }\n\n  getData(requestId: string): ?string {\n    return this._requests.get(requestId);\n  }\n\n  requestSent(id: number, url: string, method: string, headers: Object) {\n    const requestId = String(id);\n    this._requests.set(requestId, '');\n\n    const request: Request = {\n      url,\n      method,\n      headers,\n      initialPriority: 'Medium',\n    };\n    const event: RequestWillBeSentEvent = {\n      requestId,\n      documentURL: '',\n      frameId: '1',\n      loaderId: '1',\n      request,\n      timestamp: JSInspector.getTimestamp(),\n      initiator: {\n        // TODO(blom): Get stack trace\n        // If type is 'script' the inspector will try to execute\n        // `stack.callFrames[0]`\n        type: 'other',\n      },\n      type: 'Other',\n    };\n    this._agent.sendEvent('requestWillBeSent', event);\n  }\n\n  responseReceived(id: number, url: string, status: number, headers: Object) {\n    const requestId = String(id);\n    const response: Response = {\n      url,\n      status,\n      statusText: String(status),\n      headers,\n      // TODO(blom) refined headers, can we get this?\n      requestHeaders: {},\n      mimeType: this._getMimeType(headers),\n      connectionReused: false,\n      connectionId: -1,\n      encodedDataLength: 0,\n      securityState: 'unknown',\n    };\n\n    const event: ResponseReceivedEvent = {\n      requestId,\n      frameId: '1',\n      loaderId: '1',\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      response,\n    };\n    this._agent.sendEvent('responseReceived', event);\n  }\n\n  dataReceived(id: number, data: string) {\n    const requestId = String(id);\n    const existingData = this._requests.get(requestId) || '';\n    this._requests.set(requestId, existingData.concat(data));\n    const event: DataReceived = {\n      requestId,\n      timestamp: JSInspector.getTimestamp(),\n      dataLength: data.length,\n      encodedDataLength: data.length,\n    };\n    this._agent.sendEvent('dataReceived', event);\n  }\n\n  loadingFinished(id: number, encodedDataLength: number) {\n    const event: LoadingFinishedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      encodedDataLength: encodedDataLength,\n    };\n    this._agent.sendEvent('loadingFinished', event);\n  }\n\n  loadingFailed(id: number, error: string) {\n    const event: LoadingFailedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      errorText: error,\n    };\n    this._agent.sendEvent('loadingFailed', event);\n  }\n\n  _getMimeType(headers: Object): string {\n    const contentType = headers['Content-Type'] || '';\n    return contentType.split(';')[0];\n  }\n}\n\ntype EnableArgs = {\n  maxResourceBufferSize?: number,\n  maxTotalBufferSize?: number,\n  ...\n};\n\nclass NetworkAgent extends InspectorAgent {\n  static DOMAIN: $TEMPORARY$string<'Network'> = 'Network';\n\n  _sendEvent: EventSender;\n  _interceptor: ?Interceptor;\n\n  enable({maxResourceBufferSize, maxTotalBufferSize}: EnableArgs) {\n    this._interceptor = new Interceptor(this);\n    XMLHttpRequest.setInterceptor(this._interceptor);\n  }\n\n  disable() {\n    XMLHttpRequest.setInterceptor(null);\n    this._interceptor = null;\n  }\n\n  getResponseBody({\n    requestId,\n  }: {\n    requestId: RequestId,\n    ...\n  }): {\n    body: ?string,\n    base64Encoded: boolean,\n    ...\n  } {\n    return {body: this.interceptor().getData(requestId), base64Encoded: false};\n  }\n\n  interceptor(): Interceptor {\n    if (this._interceptor) {\n      return this._interceptor;\n    } else {\n      throw Error('_interceptor can not be null');\n    }\n  }\n}\n\nmodule.exports = NetworkAgent;\n"]},"metadata":{},"sourceType":"script"}