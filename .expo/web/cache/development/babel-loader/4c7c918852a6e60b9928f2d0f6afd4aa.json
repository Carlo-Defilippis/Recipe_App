{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../../StyleSheet/StyleSheet\"));\n\nvar _TouchableWithoutFeedback = _interopRequireDefault(require(\"../../Components/Touchable/TouchableWithoutFeedback\"));\n\nvar _View = _interopRequireDefault(require(\"../../Components/View/View\"));\n\nvar LogBoxStyle = _interopRequireWildcard(require(\"./LogBoxStyle\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\na2tt\\\\Desktop\\\\homework\\\\Recipe_App\\\\node_modules\\\\react-native\\\\Libraries\\\\LogBox\\\\UI\\\\LogBoxButton.js\";\n\nfunction LogBoxButton(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      pressed = _React$useState2[0],\n      setPressed = _React$useState2[1];\n\n  var backgroundColor = props.backgroundColor;\n\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6)\n    };\n  }\n\n  var content = React.createElement(_View.default, {\n    style: _StyleSheet.default.compose({\n      backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default\n    }, props.style),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, props.children);\n  return props.onPress == null ? content : React.createElement(_TouchableWithoutFeedback.default, {\n    hitSlop: props.hitSlop,\n    onPress: props.onPress,\n    onPressIn: function onPressIn() {\n      return setPressed(true);\n    },\n    onPressOut: function onPressOut() {\n      return setPressed(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, content);\n}\n\nvar _default = LogBoxButton;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js"],"names":["LogBoxButton","props","React","useState","pressed","setPressed","backgroundColor","default","LogBoxStyle","getBackgroundColor","content","StyleSheet","compose","style","children","onPress","hitSlop"],"mappings":"AAUA;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AAgBA,SAASA,YAAT,CAAsBC,KAAtB,EAAgD;AAAA,wBAChBC,KAAK,CAACC,QAAN,CAAe,KAAf,CADgB;AAAA;AAAA,MACvCC,OADuC;AAAA,MAC9BC,UAD8B;;AAG9C,MAAIC,eAAe,GAAGL,KAAK,CAACK,eAA5B;;AACA,MAAI,CAACA,eAAL,EAAsB;AACpBA,IAAAA,eAAe,GAAG;AAChBC,MAAAA,OAAO,EAAEC,WAAW,CAACC,kBAAZ,CAA+B,IAA/B,CADO;AAEhBL,MAAAA,OAAO,EAAEI,WAAW,CAACC,kBAAZ,CAA+B,GAA/B;AAFO,KAAlB;AAID;;AAED,MAAMC,OAAO,GACX,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEC,oBAAWC,OAAX,CACL;AACEN,MAAAA,eAAe,EAAEF,OAAO,GACpBE,eAAe,CAACF,OADI,GAEpBE,eAAe,CAACC;AAHtB,KADK,EAMLN,KAAK,CAACY,KAND,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGZ,KAAK,CAACa,QATT,CADF;AAcA,SAAOb,KAAK,CAACc,OAAN,IAAiB,IAAjB,GACLL,OADK,GAGL,oBAAC,iCAAD;AACE,IAAA,OAAO,EAAET,KAAK,CAACe,OADjB;AAEE,IAAA,OAAO,EAAEf,KAAK,CAACc,OAFjB;AAGE,IAAA,SAAS,EAAE;AAAA,aAAMV,UAAU,CAAC,IAAD,CAAhB;AAAA,KAHb;AAIE,IAAA,UAAU,EAAE;AAAA,aAAMA,UAAU,CAAC,KAAD,CAAhB;AAAA,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGK,OALH,CAHF;AAWD;;eAEcV,Y","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport TouchableWithoutFeedback from '../../Components/Touchable/TouchableWithoutFeedback';\nimport View from '../../Components/View/View';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\ntype Props = $ReadOnly<{|\n  backgroundColor: $ReadOnly<{|\n    default: string,\n    pressed: string,\n  |}>,\n  children?: React.Node,\n  hitSlop?: ?EdgeInsetsProp,\n  onPress?: ?(event: PressEvent) => void,\n  style?: ViewStyleProp,\n|}>;\n\nfunction LogBoxButton(props: Props): React.Node {\n  const [pressed, setPressed] = React.useState(false);\n\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6),\n    };\n  }\n\n  const content = (\n    <View\n      style={StyleSheet.compose(\n        {\n          backgroundColor: pressed\n            ? backgroundColor.pressed\n            : backgroundColor.default,\n        },\n        props.style,\n      )}>\n      {props.children}\n    </View>\n  );\n\n  return props.onPress == null ? (\n    content\n  ) : (\n    <TouchableWithoutFeedback\n      hitSlop={props.hitSlop}\n      onPress={props.onPress}\n      onPressIn={() => setPressed(true)}\n      onPressOut={() => setPressed(false)}>\n      {content}\n    </TouchableWithoutFeedback>\n  );\n}\n\nexport default LogBoxButton;\n"]},"metadata":{},"sourceType":"script"}