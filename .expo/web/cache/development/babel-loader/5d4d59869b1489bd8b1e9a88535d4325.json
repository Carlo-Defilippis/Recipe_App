{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar AnimatedNode = require('./AnimatedNode');\n\nvar AnimatedWithChildren = require('./AnimatedWithChildren');\n\nvar NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nvar invariant = require('invariant');\n\nvar normalizeColor = require('../../../StyleSheet/normalizeColor');\n\nvar linear = function linear(t) {\n  return t;\n};\n\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  var outputRange = config.outputRange;\n  checkInfiniteRange('outputRange', outputRange);\n  var inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  var extrapolateRight = 'extend';\n\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n\n    return outputMax;\n  }\n\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  result = easing(result);\n\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\n\nfunction findRange(input, inputRange) {\n  var i;\n\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n  }\n}\n\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\n\nvar AnimatedInterpolation = function (_AnimatedWithChildren) {\n  _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n  var _super = _createSuper(AnimatedInterpolation);\n\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedInterpolation);\n\n    _this = _super.call(this);\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n\n  _createClass(AnimatedInterpolation, [{\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      this._parent.__makeNative();\n\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var parentValue = this._parent.__getValue();\n\n      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n      return this._interpolation(parentValue);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._parent.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._parent.__removeChild(this);\n\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__transformDataType\",\n    value: function __transformDataType(range) {\n      return range.map(NativeAnimatedHelper.transformDataType);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      if (__DEV__) {\n        NativeAnimatedHelper.validateInterpolation(this._config);\n      }\n\n      return {\n        inputRange: this._config.inputRange,\n        outputRange: this.__transformDataType(this._config.outputRange),\n        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n        type: 'interpolation'\n      };\n    }\n  }]);\n\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\n\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nmodule.exports = AnimatedInterpolation;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedInterpolation.js"],"names":["AnimatedNode","require","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","checkInfiniteRange","inputRange","checkValidInputRange","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","normalizedColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","__makeNative","parentValue","__getValue","__addChild","__removeChild","transformDataType","__DEV__","validateInterpolation","__transformDataType","type","__createInterpolation","module","exports"],"mappings":"AAYA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAME,oBAAoB,GAAGF,OAAO,CAAC,yBAAD,CAApC;;AAEA,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMI,cAAc,GAAGJ,OAAO,CAAC,oCAAD,CAA9B;;AAaA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAAAC,CAAC;AAAA,SAAIA,CAAJ;AAAA,CAAhB;;AAMA,SAASC,mBAAT,CACEC,MADF,EAEsC;AACpC,MAAIA,MAAM,CAACC,WAAP,IAAsB,OAAOD,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAP,KAAiC,QAA3D,EAAqE;AACnE,WAAOC,wCAAwC,CAACF,MAAD,CAA/C;AACD;;AAED,MAAMC,WAA0B,GAAID,MAAM,CAACC,WAA3C;AACAE,EAAAA,kBAAkB,CAAC,aAAD,EAAgBF,WAAhB,CAAlB;AAEA,MAAMG,UAAU,GAAGJ,MAAM,CAACI,UAA1B;AACAD,EAAAA,kBAAkB,CAAC,YAAD,EAAeC,UAAf,CAAlB;AACAC,EAAAA,oBAAoB,CAACD,UAAD,CAApB;AAEAT,EAAAA,SAAS,CACPS,UAAU,CAACE,MAAX,KAAsBL,WAAW,CAACK,MAD3B,EAEP,iBACEF,UAAU,CAACE,MADb,GAEE,qBAFF,GAGEL,WAAW,CAACK,MAHd,GAIE,6BANK,CAAT;AASA,MAAMC,MAAM,GAAGP,MAAM,CAACO,MAAP,IAAiBV,MAAhC;AAEA,MAAIW,eAAgC,GAAG,QAAvC;;AACA,MAAIR,MAAM,CAACQ,eAAP,KAA2BC,SAA/B,EAA0C;AACxCD,IAAAA,eAAe,GAAGR,MAAM,CAACQ,eAAzB;AACD,GAFD,MAEO,IAAIR,MAAM,CAACU,WAAP,KAAuBD,SAA3B,EAAsC;AAC3CD,IAAAA,eAAe,GAAGR,MAAM,CAACU,WAAzB;AACD;;AAED,MAAIC,gBAAiC,GAAG,QAAxC;;AACA,MAAIX,MAAM,CAACW,gBAAP,KAA4BF,SAAhC,EAA2C;AACzCE,IAAAA,gBAAgB,GAAGX,MAAM,CAACW,gBAA1B;AACD,GAFD,MAEO,IAAIX,MAAM,CAACU,WAAP,KAAuBD,SAA3B,EAAsC;AAC3CE,IAAAA,gBAAgB,GAAGX,MAAM,CAACU,WAA1B;AACD;;AAED,SAAO,UAAAE,KAAK,EAAI;AACdjB,IAAAA,SAAS,CACP,OAAOiB,KAAP,KAAiB,QADV,EAEP,qDAFO,CAAT;AAKA,QAAMC,KAAK,GAAGC,SAAS,CAACF,KAAD,EAAQR,UAAR,CAAvB;AACA,WAAOW,WAAW,CAChBH,KADgB,EAEhBR,UAAU,CAACS,KAAD,CAFM,EAGhBT,UAAU,CAACS,KAAK,GAAG,CAAT,CAHM,EAIhBZ,WAAW,CAACY,KAAD,CAJK,EAKhBZ,WAAW,CAACY,KAAK,GAAG,CAAT,CALK,EAMhBN,MANgB,EAOhBC,eAPgB,EAQhBG,gBARgB,CAAlB;AAUD,GAjBD;AAkBD;;AAED,SAASI,WAAT,CACEH,KADF,EAEEI,QAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,SALF,EAMEZ,MANF,EAOEC,eAPF,EAQEG,gBARF,EASE;AACA,MAAIS,MAAM,GAAGR,KAAb;;AAGA,MAAIQ,MAAM,GAAGJ,QAAb,EAAuB;AACrB,QAAIR,eAAe,KAAK,UAAxB,EAAoC;AAClC,aAAOY,MAAP;AACD,KAFD,MAEO,IAAIZ,eAAe,KAAK,OAAxB,EAAiC;AACtCY,MAAAA,MAAM,GAAGJ,QAAT;AACD,KAFM,MAEA,IAAIR,eAAe,KAAK,QAAxB,EAAkC,CAExC;AACF;;AAED,MAAIY,MAAM,GAAGH,QAAb,EAAuB;AACrB,QAAIN,gBAAgB,KAAK,UAAzB,EAAqC;AACnC,aAAOS,MAAP;AACD,KAFD,MAEO,IAAIT,gBAAgB,KAAK,OAAzB,EAAkC;AACvCS,MAAAA,MAAM,GAAGH,QAAT;AACD,KAFM,MAEA,IAAIN,gBAAgB,KAAK,QAAzB,EAAmC,CAEzC;AACF;;AAED,MAAIO,SAAS,KAAKC,SAAlB,EAA6B;AAC3B,WAAOD,SAAP;AACD;;AAED,MAAIF,QAAQ,KAAKC,QAAjB,EAA2B;AACzB,QAAIL,KAAK,IAAII,QAAb,EAAuB;AACrB,aAAOE,SAAP;AACD;;AACD,WAAOC,SAAP;AACD;;AAGD,MAAIH,QAAQ,KAAK,CAACK,QAAlB,EAA4B;AAC1BD,IAAAA,MAAM,GAAG,CAACA,MAAV;AACD,GAFD,MAEO,IAAIH,QAAQ,KAAKI,QAAjB,EAA2B;AAChCD,IAAAA,MAAM,GAAGA,MAAM,GAAGJ,QAAlB;AACD,GAFM,MAEA;AACLI,IAAAA,MAAM,GAAG,CAACA,MAAM,GAAGJ,QAAV,KAAuBC,QAAQ,GAAGD,QAAlC,CAAT;AACD;;AAGDI,EAAAA,MAAM,GAAGb,MAAM,CAACa,MAAD,CAAf;;AAGA,MAAIF,SAAS,KAAK,CAACG,QAAnB,EAA6B;AAC3BD,IAAAA,MAAM,GAAG,CAACA,MAAV;AACD,GAFD,MAEO,IAAID,SAAS,KAAKE,QAAlB,EAA4B;AACjCD,IAAAA,MAAM,GAAGA,MAAM,GAAGF,SAAlB;AACD,GAFM,MAEA;AACLE,IAAAA,MAAM,GAAGA,MAAM,IAAID,SAAS,GAAGD,SAAhB,CAAN,GAAmCA,SAA5C;AACD;;AAED,SAAOE,MAAP;AACD;;AAED,SAASE,WAAT,CAAqBV,KAArB,EAA4C;AAC1C,MAAIW,eAAe,GAAG3B,cAAc,CAACgB,KAAD,CAApC;;AACA,MAAIW,eAAe,KAAK,IAApB,IAA4B,OAAOA,eAAP,KAA2B,QAA3D,EAAqE;AACnE,WAAOX,KAAP;AACD;;AAEDW,EAAAA,eAAe,GAAGA,eAAe,IAAI,CAArC;AAEA,MAAMC,CAAC,GAAG,CAACD,eAAe,GAAG,UAAnB,MAAmC,EAA7C;AACA,MAAME,CAAC,GAAG,CAACF,eAAe,GAAG,UAAnB,MAAmC,EAA7C;AACA,MAAMG,CAAC,GAAG,CAACH,eAAe,GAAG,UAAnB,MAAmC,CAA7C;AACA,MAAMI,CAAC,GAAG,CAACJ,eAAe,GAAG,UAAnB,IAAiC,GAA3C;AAEA,mBAAeC,CAAf,UAAqBC,CAArB,UAA2BC,CAA3B,UAAiCC,CAAjC;AACD;;AAED,IAAMC,gBAAgB,GAAG,4CAAzB;;AAUA,SAAS1B,wCAAT,CACEF,MADF,EAE6B;AAC3B,MAAIC,WAA0B,GAAID,MAAM,CAACC,WAAzC;AACAN,EAAAA,SAAS,CAACM,WAAW,CAACK,MAAZ,IAAsB,CAAvB,EAA0B,kBAA1B,CAAT;AACAL,EAAAA,WAAW,GAAGA,WAAW,CAAC4B,GAAZ,CAAgBP,WAAhB,CAAd;AACAQ,EAAAA,YAAY,CAAC7B,WAAD,CAAZ;AAaA,MAAM8B,YAAY,GAAG9B,WAAW,CAAC,CAAD,CAAX,CAAe+B,KAAf,CAAqBJ,gBAArB,EAAuCC,GAAvC,CAA2C;AAAA,WAAM,EAAN;AAAA,GAA3C,CAArB;AACA5B,EAAAA,WAAW,CAACgC,OAAZ,CAAoB,UAAAC,KAAK,EAAI;AAI3BA,IAAAA,KAAK,CAACF,KAAN,CAAYJ,gBAAZ,EAA8BK,OAA9B,CAAsC,UAACE,MAAD,EAASC,CAAT,EAAe;AACnDL,MAAAA,YAAY,CAACK,CAAD,CAAZ,CAAgBC,IAAhB,CAAqB,CAACF,MAAtB;AACD,KAFD;AAGD,GAPD;AASA,MAAMG,cAAc,GAAGrC,WAAW,CAAC,CAAD,CAAX,CACpB+B,KADoB,CACdJ,gBADc,EAIpBC,GAJoB,CAIhB,UAACK,KAAD,EAAQE,CAAR,EAAc;AACjB,WAAOrC,mBAAmB,iCACrBC,MADqB;AAExBC,MAAAA,WAAW,EAAE8B,YAAY,CAACK,CAAD;AAFD,OAA1B;AAID,GAToB,CAAvB;AAaA,MAAMG,WAAW,GAAGC,WAAW,CAACvC,WAAW,CAAC,CAAD,CAAZ,CAA/B;AAEA,SAAO,UAAAW,KAAK,EAAI;AACd,QAAIwB,CAAC,GAAG,CAAR;AAIA,WAAOnC,WAAW,CAAC,CAAD,CAAX,CAAewC,OAAf,CAAuBb,gBAAvB,EAAyC,YAAM;AACpD,UAAIc,GAAG,GAAG,CAACJ,cAAc,CAACF,CAAC,EAAF,CAAd,CAAoBxB,KAApB,CAAX;;AACA,UAAI2B,WAAJ,EAAiB;AACfG,QAAAA,GAAG,GAAGN,CAAC,GAAG,CAAJ,GAAQO,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAR,GAA0BC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,IAAjB,IAAyB,IAAzD;AACD;;AACD,aAAOG,MAAM,CAACH,GAAD,CAAb;AACD,KANM,CAAP;AAOD,GAZD;AAaD;;AAED,SAASF,WAAT,CAAqB3B,KAArB,EAA4B;AAC1B,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACiC,UAAN,CAAiB,KAAjB,CAApC;AACD;;AAED,SAAShB,YAAT,CAAsBiB,GAAtB,EAAmD;AACjD,MAAMC,OAAO,GAAGD,GAAG,CAAC,CAAD,CAAH,CAAON,OAAP,CAAeb,gBAAf,EAAiC,EAAjC,CAAhB;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,GAAG,CAACzC,MAAxB,EAAgC,EAAE8B,CAAlC,EAAqC;AACnCzC,IAAAA,SAAS,CACPqD,OAAO,KAAKD,GAAG,CAACX,CAAD,CAAH,CAAOK,OAAP,CAAeb,gBAAf,EAAiC,EAAjC,CADL,EAEP,qBAAqBmB,GAAG,CAAC,CAAD,CAAxB,GAA8B,OAA9B,GAAwCA,GAAG,CAACX,CAAD,CAFpC,CAAT;AAID;AACF;;AAED,SAAStB,SAAT,CAAmBF,KAAnB,EAAkCR,UAAlC,EAAsE;AACpE,MAAIgC,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhC,UAAU,CAACE,MAAX,GAAoB,CAApC,EAAuC,EAAE8B,CAAzC,EAA4C;AAC1C,QAAIhC,UAAU,CAACgC,CAAD,CAAV,IAAiBxB,KAArB,EAA4B;AAC1B;AACD;AACF;;AACD,SAAOwB,CAAC,GAAG,CAAX;AACD;;AAED,SAAS/B,oBAAT,CAA8B0C,GAA9B,EAA2D;AACzDpD,EAAAA,SAAS,CAACoD,GAAG,CAACzC,MAAJ,IAAc,CAAf,EAAkB,0CAAlB,CAAT;;AACA,OAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,GAAG,CAACzC,MAAxB,EAAgC,EAAE8B,CAAlC,EAAqC;AACnCzC,IAAAA,SAAS,CACPoD,GAAG,CAACX,CAAD,CAAH,IAAUW,GAAG,CAACX,CAAC,GAAG,CAAL,CADN,EAQP,qDAAqDW,GAR9C,CAAT;AAUD;AACF;;AAED,SAAS5C,kBAAT,CAA4B8C,IAA5B,EAA0CF,GAA1C,EAAuE;AACrEpD,EAAAA,SAAS,CAACoD,GAAG,CAACzC,MAAJ,IAAc,CAAf,EAAkB2C,IAAI,GAAG,gCAAzB,CAAT;AACAtD,EAAAA,SAAS,CACPoD,GAAG,CAACzC,MAAJ,KAAe,CAAf,IAAoByC,GAAG,CAAC,CAAD,CAAH,KAAW,CAAC1B,QAAhC,IAA4C0B,GAAG,CAAC,CAAD,CAAH,KAAW1B,QADhD,EAQP4B,IAAI,GAAG,kCAAP,GAA4CF,GARrC,CAAT;AAUD;;IAEKG,qB;;;;;AAUJ,iCAAYC,MAAZ,EAAkCnD,MAAlC,EAAmE;AAAA;;AAAA;;AACjE;AACA,UAAKoD,OAAL,GAAeD,MAAf;AACA,UAAKE,OAAL,GAAerD,MAAf;AACA,UAAKsD,cAAL,GAAsBvD,mBAAmB,CAACC,MAAD,CAAzC;AAJiE;AAKlE;;;;mCAEc;AACb,WAAKoD,OAAL,CAAaG,YAAb;;AACA;AACD;;;iCAE6B;AAC5B,UAAMC,WAAmB,GAAG,KAAKJ,OAAL,CAAaK,UAAb,EAA5B;;AACA9D,MAAAA,SAAS,CACP,OAAO6D,WAAP,KAAuB,QADhB,EAEP,oDAFO,CAAT;AAIA,aAAO,KAAKF,cAAL,CAAoBE,WAApB,CAAP;AACD;;;gCAEWxD,M,EAAwD;AAClE,aAAO,IAAIkD,qBAAJ,CAA0B,IAA1B,EAAgClD,MAAhC,CAAP;AACD;;;+BAEgB;AACf,WAAKoD,OAAL,CAAaM,UAAb,CAAwB,IAAxB;AACD;;;+BAEgB;AACf,WAAKN,OAAL,CAAaO,aAAb,CAA2B,IAA3B;;AACA;AACD;;;wCAEmB9C,K,EAA+B;AACjD,aAAOA,KAAK,CAACgB,GAAN,CAAUnC,oBAAoB,CAACkE,iBAA/B,CAAP;AACD;;;wCAEwB;AACvB,UAAIC,OAAJ,EAAa;AACXnE,QAAAA,oBAAoB,CAACoE,qBAArB,CAA2C,KAAKT,OAAhD;AACD;;AAED,aAAO;AACLjD,QAAAA,UAAU,EAAE,KAAKiD,OAAL,CAAajD,UADpB;AAKLH,QAAAA,WAAW,EAAE,KAAK8D,mBAAL,CAAyB,KAAKV,OAAL,CAAapD,WAAtC,CALR;AAMLO,QAAAA,eAAe,EACb,KAAK6C,OAAL,CAAa7C,eAAb,IAAgC,KAAK6C,OAAL,CAAa3C,WAA7C,IAA4D,QAPzD;AAQLC,QAAAA,gBAAgB,EACd,KAAK0C,OAAL,CAAa1C,gBAAb,IAAiC,KAAK0C,OAAL,CAAa3C,WAA9C,IAA6D,QAT1D;AAULsD,QAAAA,IAAI,EAAE;AAVD,OAAP;AAYD;;;;EAjEiCvE,oB;;AAA9ByD,qB,CAEGe,qB,GAEmClE,mB;AAgE5CmE,MAAM,CAACC,OAAP,GAAiBjB,qBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst invariant = require('invariant');\nconst normalizeColor = require('../../../StyleSheet/normalizeColor');\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType = {\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<number> | $ReadOnlyArray<string>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n};\n\nconst linear = t => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(\n  config: InterpolationConfigType,\n): (input: number) => number | string {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n\n  const outputRange: Array<number> = (config.outputRange: any);\n  checkInfiniteRange('outputRange', outputRange);\n\n  const inputRange = config.inputRange;\n  checkInfiniteRange('inputRange', inputRange);\n  checkValidInputRange(inputRange);\n\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange (' +\n      inputRange.length +\n      ') and outputRange (' +\n      outputRange.length +\n      ') must have the same length',\n  );\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    );\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need\n     * to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      arr[i] >= arr[i - 1],\n      /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n       * one or both of the operands may be something that doesn't cleanly\n       * convert to a string, like undefined, null, and object, etc. If you really\n       * mean this implicit string conversion, you can do something like\n       * String(myThing)\n       */\n      'inputRange must be monotonically non-decreasing ' + arr,\n    );\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly convert\n     * to a string, like undefined, null, and object, etc. If you really mean\n     * this implicit string conversion, you can do something like\n     * String(myThing)\n     */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType,\n  ) => (input: number) => number | string = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType;\n  _interpolation: (input: number) => number | string;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative() {\n    this._parent.__makeNative();\n    super.__makeNative();\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: Array<any>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      /* $FlowFixMe(>=0.38.0) - Flow error detected during the deployment of\n       * v0.38.0. To see the error, remove this comment and run flow */\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n\nmodule.exports = AnimatedInterpolation;\n"]},"metadata":{},"sourceType":"script"}