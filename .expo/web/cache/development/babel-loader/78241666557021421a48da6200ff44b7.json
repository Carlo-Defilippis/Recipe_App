{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Screen = Screen;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _screen = require(\"./screen.presets\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\na2tt\\\\Desktop\\\\homework\\\\Recipe_App\\\\app\\\\components\\\\screen\\\\screen.tsx\";\nvar isIos = _reactNative.Platform.OS === \"ios\";\n\nfunction ScreenWithoutScrolling(props) {\n  var insets = (0, _reactNativeSafeAreaContext.useSafeArea)();\n  var preset = _screen.presets.fixed;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n  return React.createElement(_reactNative.KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : null,\n    keyboardVerticalOffset: _screen.offsets[props.keyboardOffset || \"none\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.StatusBar, {\n    barStyle: props.statusBar || \"light-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), React.createElement(_reactNative.View, {\n    style: [preset.inner, style, insetStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, props.children));\n}\n\nfunction ScreenWithScrolling(props) {\n  var insets = (0, _reactNativeSafeAreaContext.useSafeArea)();\n  var preset = _screen.presets.scroll;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n  return React.createElement(_reactNative.KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : null,\n    keyboardVerticalOffset: _screen.offsets[props.keyboardOffset || \"none\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.StatusBar, {\n    barStyle: props.statusBar || \"light-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), React.createElement(_reactNative.View, {\n    style: [preset.outer, backgroundStyle, insetStyle],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, React.createElement(_reactNative.ScrollView, {\n    style: [preset.outer, backgroundStyle],\n    contentContainerStyle: [preset.inner, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, props.children)));\n}\n\nfunction Screen(props) {\n  if ((0, _screen.isNonScrolling)(props.preset)) {\n    return React.createElement(ScreenWithoutScrolling, (0, _extends2.default)({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    }));\n  } else {\n    return React.createElement(ScreenWithScrolling, (0, _extends2.default)({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/app/components/screen/screen.tsx"],"names":["isIos","Platform","OS","ScreenWithoutScrolling","props","insets","preset","presets","fixed","style","backgroundStyle","backgroundColor","insetStyle","paddingTop","unsafe","top","outer","offsets","keyboardOffset","statusBar","inner","children","ScreenWithScrolling","scroll","Screen"],"mappings":"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","sourcesContent":["import * as React from \"react\"\r\nimport { KeyboardAvoidingView, Platform, ScrollView, StatusBar, View } from \"react-native\"\r\nimport { useSafeArea } from \"react-native-safe-area-context\"\r\nimport { ScreenProps } from \"./screen.props\"\r\nimport { isNonScrolling, offsets, presets } from \"./screen.presets\"\r\n\r\nconst isIos = Platform.OS === \"ios\"\r\n\r\nfunction ScreenWithoutScrolling(props: ScreenProps) {\r\n  const insets = useSafeArea()\r\n  const preset = presets.fixed\r\n  const style = props.style || {}\r\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\r\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\r\n\r\n  return (\r\n    <KeyboardAvoidingView\r\n      style={[preset.outer, backgroundStyle]}\r\n      behavior={isIos ? \"padding\" : null}\r\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\r\n    >\r\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\r\n      <View style={[preset.inner, style, insetStyle]}>{props.children}</View>\r\n    </KeyboardAvoidingView>\r\n  )\r\n}\r\n\r\nfunction ScreenWithScrolling(props: ScreenProps) {\r\n  const insets = useSafeArea()\r\n  const preset = presets.scroll\r\n  const style = props.style || {}\r\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\r\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\r\n\r\n  return (\r\n    <KeyboardAvoidingView\r\n      style={[preset.outer, backgroundStyle]}\r\n      behavior={isIos ? \"padding\" : null}\r\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\r\n    >\r\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\r\n      <View style={[preset.outer, backgroundStyle, insetStyle]}>\r\n        <ScrollView\r\n          style={[preset.outer, backgroundStyle]}\r\n          contentContainerStyle={[preset.inner, style]}\r\n        >\r\n          {props.children}\r\n        </ScrollView>\r\n      </View>\r\n    </KeyboardAvoidingView>\r\n  )\r\n}\r\n\r\n/**\r\n * The starting component on every screen in the app.\r\n *\r\n * @param props The screen props\r\n */\r\nexport function Screen(props: ScreenProps) {\r\n  if (isNonScrolling(props.preset)) {\r\n    return <ScreenWithoutScrolling {...props} />\r\n  } else {\r\n    return <ScreenWithScrolling {...props} />\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}