{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = HeaderConfig;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _FontProcessor = require(\"./FontProcessor\");\n\nfunction HeaderConfig(_ref) {\n  var backButtonImage = _ref.backButtonImage,\n      backButtonInCustomView = _ref.backButtonInCustomView,\n      direction = _ref.direction,\n      headerBackTitle = _ref.headerBackTitle,\n      _ref$headerBackTitleS = _ref.headerBackTitleStyle,\n      headerBackTitleStyle = _ref$headerBackTitleS === void 0 ? {} : _ref$headerBackTitleS,\n      _ref$headerBackTitleV = _ref.headerBackTitleVisible,\n      headerBackTitleVisible = _ref$headerBackTitleV === void 0 ? true : _ref$headerBackTitleV,\n      headerCenter = _ref.headerCenter,\n      headerHideBackButton = _ref.headerHideBackButton,\n      headerHideShadow = _ref.headerHideShadow,\n      _ref$headerLargeStyle = _ref.headerLargeStyle,\n      headerLargeStyle = _ref$headerLargeStyle === void 0 ? {} : _ref$headerLargeStyle,\n      headerLargeTitle = _ref.headerLargeTitle,\n      headerLargeTitleHideShadow = _ref.headerLargeTitleHideShadow,\n      _ref$headerLargeTitle = _ref.headerLargeTitleStyle,\n      headerLargeTitleStyle = _ref$headerLargeTitle === void 0 ? {} : _ref$headerLargeTitle,\n      headerLeft = _ref.headerLeft,\n      headerRight = _ref.headerRight,\n      headerShown = _ref.headerShown,\n      _ref$headerStyle = _ref.headerStyle,\n      headerStyle = _ref$headerStyle === void 0 ? {} : _ref$headerStyle,\n      headerTintColor = _ref.headerTintColor,\n      headerTitle = _ref.headerTitle,\n      _ref$headerTitleStyle = _ref.headerTitleStyle,\n      headerTitleStyle = _ref$headerTitleStyle === void 0 ? {} : _ref$headerTitleStyle,\n      _ref$headerTopInsetEn = _ref.headerTopInsetEnabled,\n      headerTopInsetEnabled = _ref$headerTopInsetEn === void 0 ? true : _ref$headerTopInsetEn,\n      headerTranslucent = _ref.headerTranslucent,\n      route = _ref.route,\n      statusBarAnimation = _ref.statusBarAnimation,\n      statusBarHidden = _ref.statusBarHidden,\n      statusBarStyle = _ref.statusBarStyle,\n      title = _ref.title;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var tintColor = headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.primary;\n\n  var _processFonts = (0, _FontProcessor.processFonts)([headerBackTitleStyle.fontFamily, headerLargeTitleStyle.fontFamily, headerTitleStyle.fontFamily]),\n      _processFonts2 = (0, _slicedToArray2.default)(_processFonts, 3),\n      backTitleFontFamily = _processFonts2[0],\n      largeTitleFontFamily = _processFonts2[1],\n      titleFontFamily = _processFonts2[2];\n\n  return React.createElement(_reactNativeScreens.ScreenStackHeaderConfig, {\n    backButtonInCustomView: backButtonInCustomView,\n    backgroundColor: headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card,\n    backTitle: headerBackTitleVisible ? headerBackTitle : ' ',\n    backTitleFontFamily: backTitleFontFamily,\n    backTitleFontSize: headerBackTitleStyle.fontSize,\n    blurEffect: headerStyle.blurEffect,\n    color: tintColor,\n    direction: direction,\n    hidden: headerShown === false,\n    hideBackButton: headerHideBackButton,\n    hideShadow: headerHideShadow,\n    largeTitle: headerLargeTitle,\n    largeTitleBackgroundColor: headerLargeStyle.backgroundColor,\n    largeTitleColor: headerLargeTitleStyle.color,\n    largeTitleFontFamily: largeTitleFontFamily,\n    largeTitleFontSize: headerLargeTitleStyle.fontSize,\n    largeTitleHideShadow: headerLargeTitleHideShadow,\n    statusBarAnimation: statusBarAnimation,\n    statusBarHidden: statusBarHidden,\n    statusBarStyle: statusBarStyle,\n    title: headerTitle !== undefined ? headerTitle : title !== undefined ? title : route.name,\n    titleColor: headerTitleStyle.color !== undefined ? headerTitleStyle.color : headerTintColor !== undefined ? headerTintColor : colors.text,\n    titleFontFamily: titleFontFamily,\n    titleFontSize: headerTitleStyle.fontSize,\n    topInsetEnabled: headerTopInsetEnabled,\n    translucent: headerTranslucent === true\n  }, headerRight !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderRightView, null, headerRight({\n    tintColor: tintColor\n  })) : null, backButtonImage !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderBackButtonImage, {\n    key: \"backImage\",\n    source: backButtonImage\n  }) : null, headerLeft !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderLeftView, null, headerLeft({\n    tintColor: tintColor\n  })) : null, headerCenter !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderCenterView, null, headerCenter({\n    tintColor: tintColor\n  })) : null);\n}","map":{"version":3,"sources":["HeaderConfig.tsx"],"names":["headerBackTitleStyle","headerBackTitleVisible","headerLargeStyle","headerLargeTitleStyle","headerStyle","headerTitleStyle","headerTopInsetEnabled","title","colors","tintColor","headerTintColor","processFonts","headerShown","headerTitle","route","headerTranslucent","headerRight","backButtonImage","headerLeft","headerCenter"],"mappings":"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","sourcesContent":["import { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n} from 'react-native-screens';\nimport { NativeStackNavigationOptions } from '../types';\nimport { processFonts } from './FontProcessor';\n\ntype Props = NativeStackNavigationOptions & {\n  route: Route<string>;\n};\n\nexport default function HeaderConfig({\n  backButtonImage,\n  backButtonInCustomView,\n  direction,\n  headerBackTitle,\n  headerBackTitleStyle = {},\n  headerBackTitleVisible = true,\n  headerCenter,\n  headerHideBackButton,\n  headerHideShadow,\n  headerLargeStyle = {},\n  headerLargeTitle,\n  headerLargeTitleHideShadow,\n  headerLargeTitleStyle = {},\n  headerLeft,\n  headerRight,\n  headerShown,\n  headerStyle = {},\n  headerTintColor,\n  headerTitle,\n  headerTitleStyle = {},\n  headerTopInsetEnabled = true,\n  headerTranslucent,\n  route,\n  statusBarAnimation,\n  statusBarHidden,\n  statusBarStyle,\n  title,\n}: Props): JSX.Element {\n  const { colors } = useTheme();\n  const tintColor = headerTintColor ?? colors.primary;\n\n  const [\n    backTitleFontFamily,\n    largeTitleFontFamily,\n    titleFontFamily,\n  ] = processFonts([\n    headerBackTitleStyle.fontFamily,\n    headerLargeTitleStyle.fontFamily,\n    headerTitleStyle.fontFamily,\n  ]);\n\n  return (\n    <ScreenStackHeaderConfig\n      backButtonInCustomView={backButtonInCustomView}\n      backgroundColor={\n        headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card\n      }\n      backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n      backTitleFontFamily={backTitleFontFamily}\n      backTitleFontSize={headerBackTitleStyle.fontSize}\n      blurEffect={headerStyle.blurEffect}\n      color={tintColor}\n      direction={direction}\n      hidden={headerShown === false}\n      hideBackButton={headerHideBackButton}\n      hideShadow={headerHideShadow}\n      largeTitle={headerLargeTitle}\n      largeTitleBackgroundColor={headerLargeStyle.backgroundColor}\n      largeTitleColor={headerLargeTitleStyle.color}\n      largeTitleFontFamily={largeTitleFontFamily}\n      largeTitleFontSize={headerLargeTitleStyle.fontSize}\n      largeTitleHideShadow={headerLargeTitleHideShadow}\n      statusBarAnimation={statusBarAnimation}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      title={\n        headerTitle !== undefined\n          ? headerTitle\n          : title !== undefined\n          ? title\n          : route.name\n      }\n      titleColor={\n        headerTitleStyle.color !== undefined\n          ? headerTitleStyle.color\n          : headerTintColor !== undefined\n          ? headerTintColor\n          : colors.text\n      }\n      titleFontFamily={titleFontFamily}\n      titleFontSize={headerTitleStyle.fontSize}\n      topInsetEnabled={headerTopInsetEnabled}\n      translucent={headerTranslucent === true}>\n      {headerRight !== undefined ? (\n        <ScreenStackHeaderRightView>\n          {headerRight({ tintColor })}\n        </ScreenStackHeaderRightView>\n      ) : null}\n      {backButtonImage !== undefined ? (\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={backButtonImage}\n        />\n      ) : null}\n      {headerLeft !== undefined ? (\n        <ScreenStackHeaderLeftView>\n          {headerLeft({ tintColor })}\n        </ScreenStackHeaderLeftView>\n      ) : null}\n      {headerCenter !== undefined ? (\n        <ScreenStackHeaderCenterView>\n          {headerCenter({ tintColor })}\n        </ScreenStackHeaderCenterView>\n      ) : null}\n    </ScreenStackHeaderConfig>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}