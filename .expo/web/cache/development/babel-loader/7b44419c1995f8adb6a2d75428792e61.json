{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.swipeDirections = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\na2tt\\\\Desktop\\\\homework\\\\Recipe_App\\\\node_modules\\\\react-native-swipe-gestures\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar swipeDirections = {\n  SWIPE_UP: \"SWIPE_UP\",\n  SWIPE_DOWN: \"SWIPE_DOWN\",\n  SWIPE_LEFT: \"SWIPE_LEFT\",\n  SWIPE_RIGHT: \"SWIPE_RIGHT\"\n};\nexports.swipeDirections = swipeDirections;\nvar swipeConfig = {\n  velocityThreshold: 0.3,\n  directionalOffsetThreshold: 80,\n  gestureIsClickThreshold: 5\n};\n\nfunction isValidSwipe(velocity, velocityThreshold, directionalOffset, directionalOffsetThreshold) {\n  return Math.abs(velocity) > velocityThreshold && Math.abs(directionalOffset) < directionalOffsetThreshold;\n}\n\nvar GestureRecognizer = function (_Component) {\n  (0, _inherits2.default)(GestureRecognizer, _Component);\n\n  var _super = _createSuper(GestureRecognizer);\n\n  function GestureRecognizer(props, context) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, GestureRecognizer);\n    _this = _super.call(this, props, context);\n    _this.swipeConfig = (0, _extends2.default)(swipeConfig, props.config);\n\n    var responderEnd = _this._handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this));\n\n    var shouldSetResponder = _this._handleShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this));\n\n    _this._panResponder = _reactNative.PanResponder.create({\n      onStartShouldSetPanResponder: shouldSetResponder,\n      onMoveShouldSetPanResponder: shouldSetResponder,\n      onPanResponderRelease: responderEnd,\n      onPanResponderTerminate: responderEnd\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(GestureRecognizer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.config !== prevProps.config) {\n        this.swipeConfig = (0, _extends2.default)(swipeConfig, this.props.config);\n      }\n    }\n  }, {\n    key: \"_handleShouldSetPanResponder\",\n    value: function _handleShouldSetPanResponder(evt, gestureState) {\n      return evt.nativeEvent.touches.length === 1 && !this._gestureIsClick(gestureState);\n    }\n  }, {\n    key: \"_gestureIsClick\",\n    value: function _gestureIsClick(gestureState) {\n      return Math.abs(gestureState.dx) < swipeConfig.gestureIsClickThreshold && Math.abs(gestureState.dy) < swipeConfig.gestureIsClickThreshold;\n    }\n  }, {\n    key: \"_handlePanResponderEnd\",\n    value: function _handlePanResponderEnd(evt, gestureState) {\n      var swipeDirection = this._getSwipeDirection(gestureState);\n\n      this._triggerSwipeHandlers(swipeDirection, gestureState);\n    }\n  }, {\n    key: \"_triggerSwipeHandlers\",\n    value: function _triggerSwipeHandlers(swipeDirection, gestureState) {\n      var _this$props = this.props,\n          onSwipe = _this$props.onSwipe,\n          onSwipeUp = _this$props.onSwipeUp,\n          onSwipeDown = _this$props.onSwipeDown,\n          onSwipeLeft = _this$props.onSwipeLeft,\n          onSwipeRight = _this$props.onSwipeRight;\n      var SWIPE_LEFT = swipeDirections.SWIPE_LEFT,\n          SWIPE_RIGHT = swipeDirections.SWIPE_RIGHT,\n          SWIPE_UP = swipeDirections.SWIPE_UP,\n          SWIPE_DOWN = swipeDirections.SWIPE_DOWN;\n      onSwipe && onSwipe(swipeDirection, gestureState);\n\n      switch (swipeDirection) {\n        case SWIPE_LEFT:\n          onSwipeLeft && onSwipeLeft(gestureState);\n          break;\n\n        case SWIPE_RIGHT:\n          onSwipeRight && onSwipeRight(gestureState);\n          break;\n\n        case SWIPE_UP:\n          onSwipeUp && onSwipeUp(gestureState);\n          break;\n\n        case SWIPE_DOWN:\n          onSwipeDown && onSwipeDown(gestureState);\n          break;\n      }\n    }\n  }, {\n    key: \"_getSwipeDirection\",\n    value: function _getSwipeDirection(gestureState) {\n      var SWIPE_LEFT = swipeDirections.SWIPE_LEFT,\n          SWIPE_RIGHT = swipeDirections.SWIPE_RIGHT,\n          SWIPE_UP = swipeDirections.SWIPE_UP,\n          SWIPE_DOWN = swipeDirections.SWIPE_DOWN;\n      var dx = gestureState.dx,\n          dy = gestureState.dy;\n\n      if (this._isValidHorizontalSwipe(gestureState)) {\n        return dx > 0 ? SWIPE_RIGHT : SWIPE_LEFT;\n      } else if (this._isValidVerticalSwipe(gestureState)) {\n        return dy > 0 ? SWIPE_DOWN : SWIPE_UP;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_isValidHorizontalSwipe\",\n    value: function _isValidHorizontalSwipe(gestureState) {\n      var vx = gestureState.vx,\n          dy = gestureState.dy;\n      var _this$swipeConfig = this.swipeConfig,\n          velocityThreshold = _this$swipeConfig.velocityThreshold,\n          directionalOffsetThreshold = _this$swipeConfig.directionalOffsetThreshold;\n      return isValidSwipe(vx, velocityThreshold, dy, directionalOffsetThreshold);\n    }\n  }, {\n    key: \"_isValidVerticalSwipe\",\n    value: function _isValidVerticalSwipe(gestureState) {\n      var vy = gestureState.vy,\n          dx = gestureState.dx;\n      var _this$swipeConfig2 = this.swipeConfig,\n          velocityThreshold = _this$swipeConfig2.velocityThreshold,\n          directionalOffsetThreshold = _this$swipeConfig2.directionalOffsetThreshold;\n      return isValidSwipe(vy, velocityThreshold, dx, directionalOffsetThreshold);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, this.props, this._panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n  return GestureRecognizer;\n}(_react.Component);\n\nvar _default = GestureRecognizer;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native-swipe-gestures/index.js"],"names":["swipeDirections","SWIPE_UP","SWIPE_DOWN","SWIPE_LEFT","SWIPE_RIGHT","swipeConfig","velocityThreshold","directionalOffsetThreshold","gestureIsClickThreshold","isValidSwipe","velocity","directionalOffset","Math","abs","GestureRecognizer","props","context","config","responderEnd","_handlePanResponderEnd","bind","shouldSetResponder","_handleShouldSetPanResponder","_panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderRelease","onPanResponderTerminate","prevProps","evt","gestureState","nativeEvent","touches","length","_gestureIsClick","dx","dy","swipeDirection","_getSwipeDirection","_triggerSwipeHandlers","onSwipe","onSwipeUp","onSwipeDown","onSwipeLeft","onSwipeRight","_isValidHorizontalSwipe","_isValidVerticalSwipe","vx","vy","panHandlers","Component"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport React, { Component } from \"react\";\nimport { View, PanResponder } from \"react-native\";\n\nexport const swipeDirections = {\n  SWIPE_UP: \"SWIPE_UP\",\n  SWIPE_DOWN: \"SWIPE_DOWN\",\n  SWIPE_LEFT: \"SWIPE_LEFT\",\n  SWIPE_RIGHT: \"SWIPE_RIGHT\"\n};\n\nconst swipeConfig = {\n  velocityThreshold: 0.3,\n  directionalOffsetThreshold: 80,\n  gestureIsClickThreshold: 5\n};\n\nfunction isValidSwipe(\n  velocity,\n  velocityThreshold,\n  directionalOffset,\n  directionalOffsetThreshold\n) {\n  return (\n    Math.abs(velocity) > velocityThreshold &&\n    Math.abs(directionalOffset) < directionalOffsetThreshold\n  );\n}\n\nclass GestureRecognizer extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.swipeConfig = Object.assign(swipeConfig, props.config);\n\n    const responderEnd = this._handlePanResponderEnd.bind(this);\n    const shouldSetResponder = this._handleShouldSetPanResponder.bind(this);\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: shouldSetResponder,\n      onMoveShouldSetPanResponder: shouldSetResponder,\n      onPanResponderRelease: responderEnd,\n      onPanResponderTerminate: responderEnd\n    });\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.config !== prevProps.config) {\n      this.swipeConfig = Object.assign(swipeConfig, this.props.config);\n    }\n  }\n  \n  _handleShouldSetPanResponder(evt, gestureState) {\n    return (\n      evt.nativeEvent.touches.length === 1 &&\n      !this._gestureIsClick(gestureState)\n    );\n  }\n\n  _gestureIsClick(gestureState) {\n    return (\n      Math.abs(gestureState.dx) < swipeConfig.gestureIsClickThreshold &&\n      Math.abs(gestureState.dy) < swipeConfig.gestureIsClickThreshold\n    );\n  }\n\n  _handlePanResponderEnd(evt, gestureState) {\n    const swipeDirection = this._getSwipeDirection(gestureState);\n    this._triggerSwipeHandlers(swipeDirection, gestureState);\n  }\n\n  _triggerSwipeHandlers(swipeDirection, gestureState) {\n    const {\n      onSwipe,\n      onSwipeUp,\n      onSwipeDown,\n      onSwipeLeft,\n      onSwipeRight\n    } = this.props;\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n    onSwipe && onSwipe(swipeDirection, gestureState);\n    switch (swipeDirection) {\n      case SWIPE_LEFT:\n        onSwipeLeft && onSwipeLeft(gestureState);\n        break;\n      case SWIPE_RIGHT:\n        onSwipeRight && onSwipeRight(gestureState);\n        break;\n      case SWIPE_UP:\n        onSwipeUp && onSwipeUp(gestureState);\n        break;\n      case SWIPE_DOWN:\n        onSwipeDown && onSwipeDown(gestureState);\n        break;\n    }\n  }\n\n  _getSwipeDirection(gestureState) {\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n    const { dx, dy } = gestureState;\n    if (this._isValidHorizontalSwipe(gestureState)) {\n      return dx > 0 ? SWIPE_RIGHT : SWIPE_LEFT;\n    } else if (this._isValidVerticalSwipe(gestureState)) {\n      return dy > 0 ? SWIPE_DOWN : SWIPE_UP;\n    }\n    return null;\n  }\n\n  _isValidHorizontalSwipe(gestureState) {\n    const { vx, dy } = gestureState;\n    const { velocityThreshold, directionalOffsetThreshold } = this.swipeConfig;\n    return isValidSwipe(vx, velocityThreshold, dy, directionalOffsetThreshold);\n  }\n\n  _isValidVerticalSwipe(gestureState) {\n    const { vy, dx } = gestureState;\n    const { velocityThreshold, directionalOffsetThreshold } = this.swipeConfig;\n    return isValidSwipe(vy, velocityThreshold, dx, directionalOffsetThreshold);\n  }\n\n  render() {\n    return <View {...this.props} {...this._panResponder.panHandlers} />;\n  }\n}\n\nexport default GestureRecognizer;\n"]},"metadata":{},"sourceType":"script"}