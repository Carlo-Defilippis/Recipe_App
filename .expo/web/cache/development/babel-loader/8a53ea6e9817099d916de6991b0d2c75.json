{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lefthandObjectDiff = lefthandObjectDiff;\nexports.getConfigWithoutViewProps = getConfigWithoutViewProps;\nexports.stringifyViewConfig = stringifyViewConfig;\nexports.default = void 0;\n\nvar _ReactNativeViewViewConfig = _interopRequireDefault(require(\"../Components/View/ReactNativeViewViewConfig\"));\n\nvar getNativeComponentAttributes = require('../ReactNative/getNativeComponentAttributes');\n\nvar IGNORED_KEYS = ['transform', 'hitSlop'];\n\nfunction verifyComponentAttributeEquivalence(componentName, config) {\n  if (!global.RN$Bridgeless) {\n    var nativeAttributes = getNativeComponentAttributes(componentName);\n    ['validAttributes', 'bubblingEventTypes', 'directEventTypes'].forEach(function (prop) {\n      var diffKeys = Object.keys(lefthandObjectDiff(nativeAttributes[prop], config[prop]));\n\n      if (diffKeys.length) {\n        console.error(componentName + \" generated view config for \" + prop + \" does not match native, missing: \" + diffKeys.join(' '));\n      }\n    });\n  }\n}\n\nfunction lefthandObjectDiff(leftObj, rightObj) {\n  var differentKeys = {};\n\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      var objDiff = lefthandObjectDiff(leftItem, rightItem);\n\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (var key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\n\nfunction getConfigWithoutViewProps(viewConfig, propName) {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName]).filter(function (prop) {\n    return !_ReactNativeViewViewConfig.default[propName][prop];\n  }).reduce(function (obj, prop) {\n    obj[prop] = viewConfig[propName][prop];\n    return obj;\n  }, {});\n}\n\nfunction stringifyViewConfig(viewConfig) {\n  return JSON.stringify(viewConfig, function (key, val) {\n    if (typeof val === 'function') {\n      return \"\\u0192 \" + val.name;\n    }\n\n    return val;\n  }, 2);\n}\n\nvar _default = verifyComponentAttributeEquivalence;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js"],"names":["getNativeComponentAttributes","require","IGNORED_KEYS","verifyComponentAttributeEquivalence","componentName","config","global","RN$Bridgeless","nativeAttributes","forEach","prop","diffKeys","Object","keys","lefthandObjectDiff","length","console","error","join","leftObj","rightObj","differentKeys","compare","leftItem","rightItem","key","objDiff","includes","hasOwnProperty","getConfigWithoutViewProps","viewConfig","propName","filter","ReactNativeViewViewConfig","reduce","obj","stringifyViewConfig","JSON","stringify","val","name"],"mappings":"AAUA;;;;;;;;;;;;AAIA;;AAFA,IAAMA,4BAA4B,GAAGC,OAAO,CAAC,6CAAD,CAA5C;;AAKA,IAAMC,YAAY,GAAG,CAAC,WAAD,EAAc,SAAd,CAArB;;AAwBA,SAASC,mCAAT,CACEC,aADF,EAEEC,MAFF,EAGE;AACA,MAAI,CAACC,MAAM,CAACC,aAAZ,EAA2B;AACzB,QAAMC,gBAAgB,GAAGR,4BAA4B,CAACI,aAAD,CAArD;AAEA,KAAC,iBAAD,EAAoB,oBAApB,EAA0C,kBAA1C,EAA8DK,OAA9D,CACE,UAAAC,IAAI,EAAI;AACN,UAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CACfC,kBAAkB,CAACN,gBAAgB,CAACE,IAAD,CAAjB,EAAyBL,MAAM,CAACK,IAAD,CAA/B,CADH,CAAjB;;AAIA,UAAIC,QAAQ,CAACI,MAAb,EAAqB;AACnBC,QAAAA,OAAO,CAACC,KAAR,CACKb,aADL,mCACgDM,IADhD,yCACwFC,QAAQ,CAACO,IAAT,CACpF,GADoF,CADxF;AAKD;AACF,KAbH;AAeD;AACF;;AAEM,SAASJ,kBAAT,CAA4BK,OAA5B,EAA6CC,QAA7C,EAAuE;AAC5E,MAAMC,aAAa,GAAG,EAAtB;;AAEA,WAASC,OAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,GAAtC,EAA2C;AACzC,QAAI,OAAOF,QAAP,KAAoB,OAAOC,SAA3B,IAAwCD,QAAQ,IAAI,IAAxD,EAA8D;AAC5DF,MAAAA,aAAa,CAACI,GAAD,CAAb,GAAqBD,SAArB;AACA;AACD;;AAED,QAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAMG,OAAO,GAAGZ,kBAAkB,CAACS,QAAD,EAAWC,SAAX,CAAlC;;AACA,UAAIZ,MAAM,CAACC,IAAP,CAAYa,OAAZ,EAAqBX,MAArB,GAA8B,CAAlC,EAAqC;AACnCM,QAAAA,aAAa,CAACI,GAAD,CAAb,GAAqBC,OAArB;AACD;;AACD;AACD;;AAED,QAAIH,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BH,MAAAA,aAAa,CAACI,GAAD,CAAb,GAAqBD,SAArB;AACA;AACD;AACF;;AAED,OAAK,IAAMC,GAAX,IAAkBN,OAAlB,EAA2B;AACzB,QAAIjB,YAAY,CAACyB,QAAb,CAAsBF,GAAtB,CAAJ,EAAgC;AAC9B;AACD;;AAED,QAAI,CAACL,QAAL,EAAe;AACbC,MAAAA,aAAa,CAACI,GAAD,CAAb,GAAqB,EAArB;AACD,KAFD,MAEO,IAAIN,OAAO,CAACS,cAAR,CAAuBH,GAAvB,CAAJ,EAAiC;AACtCH,MAAAA,OAAO,CAACH,OAAO,CAACM,GAAD,CAAR,EAAeL,QAAQ,CAACK,GAAD,CAAvB,EAA8BA,GAA9B,CAAP;AACD;AACF;;AAED,SAAOJ,aAAP;AACD;;AAEM,SAASQ,yBAAT,CACLC,UADK,EAELC,QAFK,EAGE;AACP,MAAI,CAACD,UAAU,CAACC,QAAD,CAAf,EAA2B;AACzB,WAAO,EAAP;AACD;;AAED,SAAOnB,MAAM,CAACC,IAAP,CAAYiB,UAAU,CAACC,QAAD,CAAtB,EACJC,MADI,CACG,UAAAtB,IAAI;AAAA,WAAI,CAACuB,mCAA0BF,QAA1B,EAAoCrB,IAApC,CAAL;AAAA,GADP,EAEJwB,MAFI,CAEG,UAACC,GAAD,EAAMzB,IAAN,EAAe;AACrByB,IAAAA,GAAG,CAACzB,IAAD,CAAH,GAAYoB,UAAU,CAACC,QAAD,CAAV,CAAqBrB,IAArB,CAAZ;AACA,WAAOyB,GAAP;AACD,GALI,EAKF,EALE,CAAP;AAMD;;AAEM,SAASC,mBAAT,CAA6BN,UAA7B,EAAsD;AAC3D,SAAOO,IAAI,CAACC,SAAL,CACLR,UADK,EAEL,UAACL,GAAD,EAAMc,GAAN,EAAc;AACZ,QAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,yBAAYA,GAAG,CAACC,IAAhB;AACD;;AACD,WAAOD,GAAP;AACD,GAPI,EAQL,CARK,CAAP;AAUD;;eAEcpC,mC","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getNativeComponentAttributes = require('../ReactNative/getNativeComponentAttributes');\n\nimport ReactNativeViewViewConfig from '../Components/View/ReactNativeViewViewConfig';\nimport type {ReactNativeBaseComponentViewConfig} from '../Renderer/shims/ReactNativeTypes';\n\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\n/**\n * The purpose of this function is to validate that the view config that\n * native exposes for a given view manager is the same as the view config\n * that is specified for that view manager in JS.\n *\n * In order to improve perf, we want to avoid calling into native to get\n * the view config when each view manager is used. To do this, we are moving\n * the configs to JS. In the future we will use these JS based view configs\n * to codegen the view manager on native to ensure they stay in sync without\n * this runtime check.\n *\n * If this function fails, that likely means a change was made to the native\n * view manager without updating the JS config as well. Ideally you can make\n * that direct change to the JS config. If you don't know what the differences\n * are, the best approach I've found is to create a view that prints\n * the return value of getNativeComponentAttributes, and then copying that\n * text and pasting it back into JS:\n * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>\n *\n * This is meant to be a stopgap until the time comes when we only have a\n * single source of truth. I wonder if this message will still be here two\n * years from now...\n */\nfunction verifyComponentAttributeEquivalence(\n  componentName: string,\n  config: ReactNativeBaseComponentViewConfig<>,\n) {\n  if (!global.RN$Bridgeless) {\n    const nativeAttributes = getNativeComponentAttributes(componentName);\n\n    ['validAttributes', 'bubblingEventTypes', 'directEventTypes'].forEach(\n      prop => {\n        const diffKeys = Object.keys(\n          lefthandObjectDiff(nativeAttributes[prop], config[prop]),\n        );\n\n        if (diffKeys.length) {\n          console.error(\n            `${componentName} generated view config for ${prop} does not match native, missing: ${diffKeys.join(\n              ' ',\n            )}`,\n          );\n        }\n      },\n    );\n  }\n}\n\nexport function lefthandObjectDiff(leftObj: Object, rightObj: Object): Object {\n  const differentKeys = {};\n\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (const key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\n\nexport function getConfigWithoutViewProps(\n  viewConfig: ReactNativeBaseComponentViewConfig<>,\n  propName: string,\n): {...} {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName])\n    .filter(prop => !ReactNativeViewViewConfig[propName][prop])\n    .reduce((obj, prop) => {\n      obj[prop] = viewConfig[propName][prop];\n      return obj;\n    }, {});\n}\n\nexport function stringifyViewConfig(viewConfig: any): string {\n  return JSON.stringify(\n    viewConfig,\n    (key, val) => {\n      if (typeof val === 'function') {\n        return `Æ’ ${val.name}`;\n      }\n      return val;\n    },\n    2,\n  );\n}\n\nexport default verifyComponentAttributeEquivalence;\n"]},"metadata":{},"sourceType":"script"}