{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\na2tt\\\\Desktop\\\\homework\\\\Recipe_App\\\\node_modules\\\\react-native\\\\Libraries\\\\Text\\\\Text.js\",\n    _this5 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar DeprecatedTextPropTypes = require('../DeprecatedPropTypes/DeprecatedTextPropTypes');\n\nvar React = require('react');\n\nvar ReactNativeViewAttributes = require('../Components/View/ReactNativeViewAttributes');\n\nvar TextAncestor = require('./TextAncestor');\n\nvar Touchable = require('../Components/Touchable/Touchable');\n\nvar UIManager = require('../ReactNative/UIManager');\n\nvar createReactNativeComponentClass = require('../Renderer/shims/createReactNativeComponentClass');\n\nvar nullthrows = require('nullthrows');\n\nvar processColor = require('../StyleSheet/processColor');\n\nvar PRESS_RECT_OFFSET = {\n  top: 20,\n  left: 20,\n  right: 20,\n  bottom: 30\n};\nvar viewConfig = {\n  validAttributes: _objectSpread(_objectSpread({}, ReactNativeViewAttributes.UIView), {}, {\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n    onInlineViewLayout: true,\n    dataDetectorType: true\n  }),\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout'\n    },\n    topInlineViewLayout: {\n      registrationName: 'onInlineViewLayout'\n    }\n  },\n  uiViewClassName: 'RCTText'\n};\n\nvar TouchableText = function (_React$Component) {\n  _inherits(TouchableText, _React$Component);\n\n  var _super = _createSuper(TouchableText);\n\n  function TouchableText() {\n    var _this;\n\n    _classCallCheck(this, TouchableText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = _objectSpread(_objectSpread({}, Touchable.Mixin.touchableGetInitialState()), {}, {\n      isHighlighted: false,\n      createResponderHandlers: _this._createResponseHandlers.bind(_assertThisInitialized(_this)),\n      responseHandlers: null\n    });\n    return _this;\n  }\n\n  _createClass(TouchableText, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n\n      if (isTouchable(props)) {\n        props = _objectSpread(_objectSpread(_objectSpread({}, props), this.state.responseHandlers), {}, {\n          isHighlighted: this.state.isHighlighted\n        });\n      }\n\n      if (props.selectionColor != null) {\n        props = _objectSpread(_objectSpread({}, props), {}, {\n          selectionColor: processColor(props.selectionColor)\n        });\n      }\n\n      if (__DEV__) {\n        if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {\n          props = _objectSpread(_objectSpread({}, props), {}, {\n            style: [props.style, {\n              color: 'magenta'\n            }]\n          });\n        }\n      }\n\n      return React.createElement(TextAncestor.Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }\n      }, function (hasTextAncestor) {\n        return hasTextAncestor ? React.createElement(RCTVirtualText, _extends({}, props, {\n          ref: props.forwardedRef,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }\n        })) : React.createElement(TextAncestor.Provider, {\n          value: true,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }\n        }, React.createElement(RCTText, _extends({}, props, {\n          ref: props.forwardedRef,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }\n        })));\n      });\n    }\n  }, {\n    key: \"_createResponseHandlers\",\n    value: function _createResponseHandlers() {\n      var _this3 = this;\n\n      return {\n        onStartShouldSetResponder: function onStartShouldSetResponder() {\n          var onStartShouldSetResponder = _this3.props.onStartShouldSetResponder;\n          var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this3.props);\n\n          if (shouldSetResponder) {\n            _this3._attachTouchHandlers();\n          }\n\n          return shouldSetResponder;\n        },\n        onResponderGrant: function onResponderGrant(event, dispatchID) {\n          nullthrows(_this3.touchableHandleResponderGrant)(event, dispatchID);\n\n          if (_this3.props.onResponderGrant != null) {\n            _this3.props.onResponderGrant.call(_this3, event, dispatchID);\n          }\n        },\n        onResponderMove: function onResponderMove(event) {\n          nullthrows(_this3.touchableHandleResponderMove)(event);\n\n          if (_this3.props.onResponderMove != null) {\n            _this3.props.onResponderMove.call(_this3, event);\n          }\n        },\n        onResponderRelease: function onResponderRelease(event) {\n          nullthrows(_this3.touchableHandleResponderRelease)(event);\n\n          if (_this3.props.onResponderRelease != null) {\n            _this3.props.onResponderRelease.call(_this3, event);\n          }\n        },\n        onResponderTerminate: function onResponderTerminate(event) {\n          nullthrows(_this3.touchableHandleResponderTerminate)(event);\n\n          if (_this3.props.onResponderTerminate != null) {\n            _this3.props.onResponderTerminate.call(_this3, event);\n          }\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest() {\n          var onResponderTerminationRequest = _this3.props.onResponderTerminationRequest;\n\n          if (!nullthrows(_this3.touchableHandleResponderTerminationRequest)()) {\n            return false;\n          }\n\n          if (onResponderTerminationRequest == null) {\n            return true;\n          }\n\n          return onResponderTerminationRequest();\n        }\n      };\n    }\n  }, {\n    key: \"_attachTouchHandlers\",\n    value: function _attachTouchHandlers() {\n      var _this4 = this;\n\n      if (this.touchableGetPressRectOffset != null) {\n        return;\n      }\n\n      for (var key in Touchable.Mixin) {\n        if (typeof Touchable.Mixin[key] === 'function') {\n          this[key] = Touchable.Mixin[key].bind(this);\n        }\n      }\n\n      this.touchableHandleActivePressIn = function () {\n        if (!_this4.props.suppressHighlighting && isTouchable(_this4.props)) {\n          _this4.setState({\n            isHighlighted: true\n          });\n        }\n      };\n\n      this.touchableHandleActivePressOut = function () {\n        if (!_this4.props.suppressHighlighting && isTouchable(_this4.props)) {\n          _this4.setState({\n            isHighlighted: false\n          });\n        }\n      };\n\n      this.touchableHandlePress = function (event) {\n        if (_this4.props.onPress != null) {\n          _this4.props.onPress(event);\n        }\n      };\n\n      this.touchableHandleLongPress = function (event) {\n        if (_this4.props.onLongPress != null) {\n          _this4.props.onLongPress(event);\n        }\n      };\n\n      this.touchableGetPressRectOffset = function () {\n        return _this4.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this4.props.pressRetentionOffset;\n      };\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return prevState.responseHandlers == null && isTouchable(nextProps) ? {\n        responseHandlers: prevState.createResponderHandlers()\n      } : null;\n    }\n  }]);\n\n  return TouchableText;\n}(React.Component);\n\nTouchableText.defaultProps = {\n  accessible: true,\n  allowFontScaling: true,\n  ellipsizeMode: 'tail'\n};\nTouchableText.viewConfig = viewConfig;\n\nvar isTouchable = function isTouchable(props) {\n  return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;\n};\n\nvar RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {\n  return viewConfig;\n});\nvar RCTVirtualText = UIManager.getViewManagerConfig('RCTVirtualText') == null ? RCTText : createReactNativeComponentClass('RCTVirtualText', function () {\n  return {\n    validAttributes: _objectSpread(_objectSpread({}, ReactNativeViewAttributes.UIView), {}, {\n      isHighlighted: true,\n      maxFontSizeMultiplier: true\n    }),\n    uiViewClassName: 'RCTVirtualText'\n  };\n});\n\nvar Text = function Text(props, forwardedRef) {\n  return React.createElement(TouchableText, _extends({}, props, {\n    forwardedRef: forwardedRef,\n    __self: _this5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 10\n    }\n  }));\n};\n\nvar TextToExport = React.forwardRef(Text);\nTextToExport.displayName = 'Text';\nTextToExport.propTypes = DeprecatedTextPropTypes;\nmodule.exports = TextToExport;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Text/Text.js"],"names":["DeprecatedTextPropTypes","require","React","ReactNativeViewAttributes","TextAncestor","Touchable","UIManager","createReactNativeComponentClass","nullthrows","processColor","PRESS_RECT_OFFSET","top","left","right","bottom","viewConfig","validAttributes","UIView","isHighlighted","numberOfLines","ellipsizeMode","allowFontScaling","maxFontSizeMultiplier","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","onInlineViewLayout","dataDetectorType","directEventTypes","topTextLayout","registrationName","topInlineViewLayout","uiViewClassName","TouchableText","state","Mixin","touchableGetInitialState","createResponderHandlers","_createResponseHandlers","bind","responseHandlers","props","isTouchable","__DEV__","TOUCH_TARGET_DEBUG","onPress","style","color","hasTextAncestor","forwardedRef","onStartShouldSetResponder","shouldSetResponder","_attachTouchHandlers","onResponderGrant","event","dispatchID","touchableHandleResponderGrant","call","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","onResponderTerminationRequest","touchableHandleResponderTerminationRequest","touchableGetPressRectOffset","key","touchableHandleActivePressIn","suppressHighlighting","setState","touchableHandleActivePressOut","touchableHandlePress","touchableHandleLongPress","onLongPress","pressRetentionOffset","nextProps","prevState","Component","defaultProps","accessible","RCTText","RCTVirtualText","getViewManagerConfig","Text","TextToExport","forwardRef","displayName","propTypes","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst DeprecatedTextPropTypes = require('../DeprecatedPropTypes/DeprecatedTextPropTypes');\nconst React = require('react');\nconst ReactNativeViewAttributes = require('../Components/View/ReactNativeViewAttributes');\nconst TextAncestor = require('./TextAncestor');\nconst Touchable = require('../Components/Touchable/Touchable');\nconst UIManager = require('../ReactNative/UIManager');\n\nconst createReactNativeComponentClass = require('../Renderer/shims/createReactNativeComponentClass');\nconst nullthrows = require('nullthrows');\nconst processColor = require('../StyleSheet/processColor');\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport type {PressRetentionOffset, TextProps} from './TextProps';\n\ntype ResponseHandlers = $ReadOnly<{|\n  onStartShouldSetResponder: () => boolean,\n  onResponderGrant: (event: PressEvent, dispatchID: string) => void,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: () => boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n|}>;\n\ntype State = {|\n  touchable: {|\n    touchState: ?string,\n    responderID: ?number,\n  |},\n  isHighlighted: boolean,\n  createResponderHandlers: () => ResponseHandlers,\n  responseHandlers: ?ResponseHandlers,\n|};\n\nconst PRESS_RECT_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nconst viewConfig = {\n  validAttributes: {\n    ...ReactNativeViewAttributes.UIView,\n    isHighlighted: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n    onInlineViewLayout: true,\n    dataDetectorType: true,\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout',\n    },\n    topInlineViewLayout: {\n      registrationName: 'onInlineViewLayout',\n    },\n  },\n  uiViewClassName: 'RCTText',\n};\n\n/**\n * A React component for displaying text.\n *\n * See https://reactnative.dev/docs/text.html\n */\nclass TouchableText extends React.Component<Props, State> {\n  static defaultProps = {\n    accessible: true,\n    allowFontScaling: true,\n    ellipsizeMode: 'tail',\n  };\n\n  touchableGetPressRectOffset: ?() => PressRetentionOffset;\n  touchableHandleActivePressIn: ?() => void;\n  touchableHandleActivePressOut: ?() => void;\n  touchableHandleLongPress: ?(event: PressEvent) => void;\n  touchableHandlePress: ?(event: PressEvent) => void;\n  touchableHandleResponderGrant: ?(\n    event: PressEvent,\n    dispatchID: string,\n  ) => void;\n  touchableHandleResponderMove: ?(event: PressEvent) => void;\n  touchableHandleResponderRelease: ?(event: PressEvent) => void;\n  touchableHandleResponderTerminate: ?(event: PressEvent) => void;\n  touchableHandleResponderTerminationRequest: ?() => boolean;\n\n  state = {\n    ...Touchable.Mixin.touchableGetInitialState(),\n    isHighlighted: false,\n    createResponderHandlers: this._createResponseHandlers.bind(this),\n    responseHandlers: null,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State,\n  ): $Shape<State> | null {\n    return prevState.responseHandlers == null && isTouchable(nextProps)\n      ? {\n          responseHandlers: prevState.createResponderHandlers(),\n        }\n      : null;\n  }\n\n  static viewConfig = viewConfig;\n\n  render(): React.Node {\n    let props = this.props;\n    if (isTouchable(props)) {\n      props = {\n        ...props,\n        ...this.state.responseHandlers,\n        isHighlighted: this.state.isHighlighted,\n      };\n    }\n    if (props.selectionColor != null) {\n      props = {\n        ...props,\n        selectionColor: processColor(props.selectionColor),\n      };\n    }\n    if (__DEV__) {\n      if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {\n        props = {\n          ...props,\n          style: [props.style, {color: 'magenta'}],\n        };\n      }\n    }\n    return (\n      <TextAncestor.Consumer>\n        {hasTextAncestor =>\n          hasTextAncestor ? (\n            <RCTVirtualText {...props} ref={props.forwardedRef} />\n          ) : (\n            <TextAncestor.Provider value={true}>\n              <RCTText {...props} ref={props.forwardedRef} />\n            </TextAncestor.Provider>\n          )\n        }\n      </TextAncestor.Consumer>\n    );\n  }\n\n  _createResponseHandlers(): ResponseHandlers {\n    return {\n      onStartShouldSetResponder: (): boolean => {\n        const {onStartShouldSetResponder} = this.props;\n        const shouldSetResponder =\n          (onStartShouldSetResponder == null\n            ? false\n            : onStartShouldSetResponder()) || isTouchable(this.props);\n\n        if (shouldSetResponder) {\n          this._attachTouchHandlers();\n        }\n        return shouldSetResponder;\n      },\n      onResponderGrant: (event: PressEvent, dispatchID: string): void => {\n        nullthrows(this.touchableHandleResponderGrant)(event, dispatchID);\n        if (this.props.onResponderGrant != null) {\n          this.props.onResponderGrant.call(this, event, dispatchID);\n        }\n      },\n      onResponderMove: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderMove)(event);\n        if (this.props.onResponderMove != null) {\n          this.props.onResponderMove.call(this, event);\n        }\n      },\n      onResponderRelease: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderRelease)(event);\n        if (this.props.onResponderRelease != null) {\n          this.props.onResponderRelease.call(this, event);\n        }\n      },\n      onResponderTerminate: (event: PressEvent): void => {\n        nullthrows(this.touchableHandleResponderTerminate)(event);\n        if (this.props.onResponderTerminate != null) {\n          this.props.onResponderTerminate.call(this, event);\n        }\n      },\n      onResponderTerminationRequest: (): boolean => {\n        const {onResponderTerminationRequest} = this.props;\n        if (!nullthrows(this.touchableHandleResponderTerminationRequest)()) {\n          return false;\n        }\n        if (onResponderTerminationRequest == null) {\n          return true;\n        }\n        return onResponderTerminationRequest();\n      },\n    };\n  }\n\n  /**\n   * Lazily attaches Touchable.Mixin handlers.\n   */\n  _attachTouchHandlers(): void {\n    if (this.touchableGetPressRectOffset != null) {\n      return;\n    }\n    for (const key in Touchable.Mixin) {\n      if (typeof Touchable.Mixin[key] === 'function') {\n        (this: any)[key] = Touchable.Mixin[key].bind(this);\n      }\n    }\n    this.touchableHandleActivePressIn = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: true});\n      }\n    };\n    this.touchableHandleActivePressOut = (): void => {\n      if (!this.props.suppressHighlighting && isTouchable(this.props)) {\n        this.setState({isHighlighted: false});\n      }\n    };\n    this.touchableHandlePress = (event: PressEvent): void => {\n      if (this.props.onPress != null) {\n        this.props.onPress(event);\n      }\n    };\n    this.touchableHandleLongPress = (event: PressEvent): void => {\n      if (this.props.onLongPress != null) {\n        this.props.onLongPress(event);\n      }\n    };\n    this.touchableGetPressRectOffset = (): PressRetentionOffset =>\n      this.props.pressRetentionOffset == null\n        ? PRESS_RECT_OFFSET\n        : this.props.pressRetentionOffset;\n  }\n}\n\nconst isTouchable = (props: Props): boolean =>\n  props.onPress != null ||\n  props.onLongPress != null ||\n  props.onStartShouldSetResponder != null;\n\nconst RCTText = createReactNativeComponentClass(\n  viewConfig.uiViewClassName,\n  () => viewConfig,\n);\n\nconst RCTVirtualText =\n  UIManager.getViewManagerConfig('RCTVirtualText') == null\n    ? RCTText\n    : createReactNativeComponentClass('RCTVirtualText', () => ({\n        validAttributes: {\n          ...ReactNativeViewAttributes.UIView,\n          isHighlighted: true,\n          maxFontSizeMultiplier: true,\n        },\n        uiViewClassName: 'RCTVirtualText',\n      }));\n\nconst Text = (\n  props: TextProps,\n  forwardedRef: ?React.Ref<'RCTText' | 'RCTVirtualText'>,\n) => {\n  return <TouchableText {...props} forwardedRef={forwardedRef} />;\n};\nconst TextToExport = React.forwardRef(Text);\nTextToExport.displayName = 'Text';\n\n// TODO: Deprecate this.\n/* $FlowFixMe(>=0.89.0 site=react_native_fb) This comment suppresses an error\n * found when Flow v0.89 was deployed. To see the error, delete this comment\n * and run Flow. */\nTextToExport.propTypes = DeprecatedTextPropTypes;\n\ntype TextStatics = $ReadOnly<{|\n  propTypes: typeof DeprecatedTextPropTypes,\n|}>;\n\nmodule.exports = ((TextToExport: any): React.AbstractComponent<\n  TextProps,\n  React.ElementRef<HostComponent<TextProps>>,\n> &\n  TextStatics);\n"]},"metadata":{},"sourceType":"script"}