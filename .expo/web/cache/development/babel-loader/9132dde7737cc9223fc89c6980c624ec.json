{"ast":null,"code":"'use strict';\n\nvar defineLazyObjectProperty = require('./defineLazyObjectProperty');\n\nfunction polyfillObjectProperty(object, name, getValue) {\n  var descriptor = Object.getOwnPropertyDescriptor(object, name);\n\n  if (__DEV__ && descriptor) {\n    var backupName = \"original\" + name[0].toUpperCase() + name.substr(1);\n    Object.defineProperty(object, backupName, descriptor);\n  }\n\n  var _ref = descriptor || {},\n      enumerable = _ref.enumerable,\n      writable = _ref.writable,\n      configurable = _ref.configurable;\n\n  if (descriptor && !configurable) {\n    console.error('Failed to set polyfill. ' + name + ' is not configurable.');\n    return;\n  }\n\n  defineLazyObjectProperty(object, name, {\n    get: getValue,\n    enumerable: enumerable !== false,\n    writable: writable !== false\n  });\n}\n\nfunction polyfillGlobal(name, getValue) {\n  polyfillObjectProperty(global, name, getValue);\n}\n\nmodule.exports = {\n  polyfillObjectProperty: polyfillObjectProperty,\n  polyfillGlobal: polyfillGlobal\n};","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Utilities/PolyfillFunctions.js"],"names":["defineLazyObjectProperty","require","polyfillObjectProperty","object","name","getValue","descriptor","Object","getOwnPropertyDescriptor","__DEV__","backupName","toUpperCase","substr","defineProperty","enumerable","writable","configurable","console","error","get","polyfillGlobal","global","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAxC;;AAeA,SAASC,sBAAT,CACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIQ;AACN,MAAMC,UAAU,GAAGC,MAAM,CAACC,wBAAP,CAAgCL,MAAhC,EAAwCC,IAAxC,CAAnB;;AACA,MAAIK,OAAO,IAAIH,UAAf,EAA2B;AACzB,QAAMI,UAAU,gBAAcN,IAAI,CAAC,CAAD,CAAJ,CAAQO,WAAR,EAAd,GAAsCP,IAAI,CAACQ,MAAL,CAAY,CAAZ,CAAtD;AACAL,IAAAA,MAAM,CAACM,cAAP,CAAsBV,MAAtB,EAA8BO,UAA9B,EAA0CJ,UAA1C;AACD;;AALK,aAOuCA,UAAU,IAAI,EAPrD;AAAA,MAOCQ,UAPD,QAOCA,UAPD;AAAA,MAOaC,QAPb,QAOaA,QAPb;AAAA,MAOuBC,YAPvB,QAOuBA,YAPvB;;AAQN,MAAIV,UAAU,IAAI,CAACU,YAAnB,EAAiC;AAC/BC,IAAAA,OAAO,CAACC,KAAR,CAAc,6BAA6Bd,IAA7B,GAAoC,uBAAlD;AACA;AACD;;AAEDJ,EAAAA,wBAAwB,CAACG,MAAD,EAASC,IAAT,EAAe;AACrCe,IAAAA,GAAG,EAAEd,QADgC;AAErCS,IAAAA,UAAU,EAAEA,UAAU,KAAK,KAFU;AAGrCC,IAAAA,QAAQ,EAAEA,QAAQ,KAAK;AAHc,GAAf,CAAxB;AAKD;;AAED,SAASK,cAAT,CAA2BhB,IAA3B,EAAyCC,QAAzC,EAAkE;AAChEH,EAAAA,sBAAsB,CAACmB,MAAD,EAASjB,IAAT,EAAeC,QAAf,CAAtB;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiB;AAACrB,EAAAA,sBAAsB,EAAtBA,sBAAD;AAAyBkB,EAAAA,cAAc,EAAdA;AAAzB,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst defineLazyObjectProperty = require('./defineLazyObjectProperty');\n\n/**\n * Sets an object's property. If a property with the same name exists, this will\n * replace it but maintain its descriptor configuration. The property will be\n * replaced with a lazy getter.\n *\n * In DEV mode the original property value will be preserved as `original[PropertyName]`\n * so that, if necessary, it can be restored. For example, if you want to route\n * network requests through DevTools (to trace them):\n *\n *   global.XMLHttpRequest = global.originalXMLHttpRequest;\n *\n * @see https://github.com/facebook/react-native/issues/934\n */\nfunction polyfillObjectProperty<T>(\n  object: Object,\n  name: string,\n  getValue: () => T,\n): void {\n  const descriptor = Object.getOwnPropertyDescriptor(object, name);\n  if (__DEV__ && descriptor) {\n    const backupName = `original${name[0].toUpperCase()}${name.substr(1)}`;\n    Object.defineProperty(object, backupName, descriptor);\n  }\n\n  const {enumerable, writable, configurable} = descriptor || {};\n  if (descriptor && !configurable) {\n    console.error('Failed to set polyfill. ' + name + ' is not configurable.');\n    return;\n  }\n\n  defineLazyObjectProperty(object, name, {\n    get: getValue,\n    enumerable: enumerable !== false,\n    writable: writable !== false,\n  });\n}\n\nfunction polyfillGlobal<T>(name: string, getValue: () => T): void {\n  polyfillObjectProperty(global, name, getValue);\n}\n\nmodule.exports = {polyfillObjectProperty, polyfillGlobal};\n"]},"metadata":{},"sourceType":"script"}