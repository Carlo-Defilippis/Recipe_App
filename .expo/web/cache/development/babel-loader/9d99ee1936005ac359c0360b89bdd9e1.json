{"ast":null,"code":"'use strict';\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar LogBoxSymbolication = _interopRequireWildcard(require(\"./LogBoxSymbolication\"));\n\nvar LogBoxLog = function () {\n  function LogBoxLog(data) {\n    (0, _classCallCheck2.default)(this, LogBoxLog);\n    this.symbolicated = {\n      error: null,\n      stack: null,\n      status: 'NONE'\n    };\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  (0, _createClass2.default)(LogBoxLog, [{\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.count += 1;\n    }\n  }, {\n    key: \"getAvailableStack\",\n    value: function getAvailableStack() {\n      return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;\n    }\n  }, {\n    key: \"retrySymbolicate\",\n    value: function retrySymbolicate(callback) {\n      if (this.symbolicated.status !== 'COMPLETE') {\n        LogBoxSymbolication.deleteStack(this.stack);\n        this.handleSymbolicate(callback);\n      }\n    }\n  }, {\n    key: \"symbolicate\",\n    value: function symbolicate(callback) {\n      if (this.symbolicated.status === 'NONE') {\n        this.handleSymbolicate(callback);\n      }\n    }\n  }, {\n    key: \"handleSymbolicate\",\n    value: function handleSymbolicate(callback) {\n      var _this = this;\n\n      if (this.symbolicated.status !== 'PENDING') {\n        this.updateStatus(null, null, null, callback);\n        LogBoxSymbolication.symbolicate(this.stack).then(function (data) {\n          _this.updateStatus(null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame, callback);\n        }, function (error) {\n          _this.updateStatus(error, null, null, callback);\n        });\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(error, stack, codeFrame, callback) {\n      var lastStatus = this.symbolicated.status;\n\n      if (error != null) {\n        this.symbolicated = {\n          error: error,\n          stack: null,\n          status: 'FAILED'\n        };\n      } else if (stack != null) {\n        if (codeFrame) {\n          this.codeFrame = codeFrame;\n        }\n\n        this.symbolicated = {\n          error: null,\n          stack: stack,\n          status: 'COMPLETE'\n        };\n      } else {\n        this.symbolicated = {\n          error: null,\n          stack: null,\n          status: 'PENDING'\n        };\n      }\n\n      if (callback && lastStatus !== this.symbolicated.status) {\n        callback(this.symbolicated.status);\n      }\n    }\n  }]);\n  return LogBoxLog;\n}();\n\nvar _default = LogBoxLog;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"],"names":["LogBoxLog","data","symbolicated","error","stack","status","level","type","message","category","componentStack","codeFrame","isComponentError","count","callback","LogBoxSymbolication","deleteStack","handleSymbolicate","updateStatus","symbolicate","then","lastStatus"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\n\nimport type {\n  Category,\n  Message,\n  ComponentStack,\n  CodeFrame,\n} from './parseLogBoxLog';\nimport type {Stack} from './LogBoxSymbolication';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax';\n\nexport type LogBoxLogData = $ReadOnly<{|\n  level: LogLevel,\n  type?: ?string,\n  message: Message,\n  stack: Stack,\n  category: string,\n  componentStack: ComponentStack,\n  codeFrame?: ?CodeFrame,\n  isComponentError: boolean,\n|}>;\n\nclass LogBoxLog {\n  message: Message;\n  type: ?string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame: ?CodeFrame;\n  isComponentError: boolean;\n  symbolicated:\n    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>\n    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>\n    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>\n    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}> = {\n    error: null,\n    stack: null,\n    status: 'NONE',\n  };\n\n  constructor(data: LogBoxLogData) {\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(): Stack {\n    return this.symbolicated.status === 'COMPLETE'\n      ? this.symbolicated.stack\n      : this.stack;\n  }\n\n  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'COMPLETE') {\n      LogBoxSymbolication.deleteStack(this.stack);\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  symbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status === 'NONE') {\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'PENDING') {\n      this.updateStatus(null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.stack).then(\n        data => {\n          this.updateStatus(null, data?.stack, data?.codeFrame, callback);\n        },\n        error => {\n          this.updateStatus(error, null, null, callback);\n        },\n      );\n    }\n  }\n\n  updateStatus(\n    error: ?Error,\n    stack: ?Stack,\n    codeFrame: ?CodeFrame,\n    callback?: (status: SymbolicationStatus) => void,\n  ): void {\n    const lastStatus = this.symbolicated.status;\n    if (error != null) {\n      this.symbolicated = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    if (callback && lastStatus !== this.symbolicated.status) {\n      callback(this.symbolicated.status);\n    }\n  }\n}\n\nexport default LogBoxLog;\n"]},"metadata":{},"sourceType":"script"}