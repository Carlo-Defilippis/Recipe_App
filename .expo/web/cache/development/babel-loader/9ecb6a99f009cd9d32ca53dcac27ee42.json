{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\n\nvar ReactNativeVersion = require('./ReactNativeVersion');\n\nexports.checkVersions = function checkVersions() {\n  var nativeVersion = _Platform.default.constants.reactNativeVersion;\n\n  if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {\n    console.error(\"React Native version mismatch.\\n\\nJavaScript version: \" + _formatVersion(ReactNativeVersion.version) + \"\\n\" + (\"Native version: \" + _formatVersion(nativeVersion) + \"\\n\\n\") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');\n  }\n};\n\nfunction _formatVersion(version) {\n  return version.major + \".\" + version.minor + \".\" + version.patch + (version.prerelease != undefined ? \"-\" + version.prerelease : '');\n}","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js"],"names":["ReactNativeVersion","require","exports","checkVersions","nativeVersion","Platform","constants","reactNativeVersion","version","major","minor","console","error","_formatVersion","patch","prerelease","undefined"],"mappings":"AAUA;;;;AAEA;;AACA,IAAMA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAlC;;AAWAC,OAAO,CAACC,aAAR,GAAwB,SAASA,aAAT,GAA+B;AACrD,MAAMC,aAAa,GAAGC,kBAASC,SAAT,CAAmBC,kBAAzC;;AACA,MACEP,kBAAkB,CAACQ,OAAnB,CAA2BC,KAA3B,KAAqCL,aAAa,CAACK,KAAnD,IACAT,kBAAkB,CAACQ,OAAnB,CAA2BE,KAA3B,KAAqCN,aAAa,CAACM,KAFrD,EAGE;AACAC,IAAAA,OAAO,CAACC,KAAR,CACE,2DAAyDC,cAAc,CACrEb,kBAAkB,CAACQ,OADkD,CAAvE,gCAGqBK,cAAc,CAACT,aAAD,CAHnC,aAIE,kEAJF,GAKE,8DALF,GAME,+DAPJ;AASD;AACF,CAhBD;;AAkBA,SAASS,cAAT,CAAwBL,OAAxB,EAAyC;AACvC,SACKA,OAAO,CAACC,KAAX,SAAoBD,OAAO,CAACE,KAA5B,SAAqCF,OAAO,CAACM,KAA7C,IAECN,OAAO,CAACO,UAAR,IAAsBC,SAAtB,SAAsCR,OAAO,CAACO,UAA9C,GAA6D,EAF9D,CADF;AAKD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Platform from '../Utilities/Platform';\nconst ReactNativeVersion = require('./ReactNativeVersion');\n\n/**\n * Checks that the version of this React Native JS is compatible with the native\n * code, throwing an error if it isn't.\n *\n * The existence of this module is part of the public interface of React Native\n * even though it is used only internally within React Native. React Native\n * implementations for other platforms (ex: Windows) may override this module\n * and rely on its existence as a separate module.\n */\nexports.checkVersions = function checkVersions(): void {\n  const nativeVersion = Platform.constants.reactNativeVersion;\n  if (\n    ReactNativeVersion.version.major !== nativeVersion.major ||\n    ReactNativeVersion.version.minor !== nativeVersion.minor\n  ) {\n    console.error(\n      `React Native version mismatch.\\n\\nJavaScript version: ${_formatVersion(\n        ReactNativeVersion.version,\n      )}\\n` +\n        `Native version: ${_formatVersion(nativeVersion)}\\n\\n` +\n        'Make sure that you have rebuilt the native code. If the problem ' +\n        'persists try clearing the Watchman and packager caches with ' +\n        '`watchman watch-del-all && react-native start --reset-cache`.',\n    );\n  }\n};\n\nfunction _formatVersion(version): string {\n  return (\n    `${version.major}.${version.minor}.${version.patch}` +\n    // eslint-disable-next-line eqeqeq\n    (version.prerelease != undefined ? `-${version.prerelease}` : '')\n  );\n}\n"]},"metadata":{},"sourceType":"script"}