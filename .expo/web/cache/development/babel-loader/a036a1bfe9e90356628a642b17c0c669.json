{"ast":null,"code":"'use strict';\n\nvar Promise = require('promise/setimmediate/es6-extensions');\n\nrequire('promise/setimmediate/done');\n\nrequire('promise/setimmediate/finally');\n\nif (__DEV__) {\n  require('promise/setimmediate/rejection-tracking').enable({\n    allRejections: true,\n    onUnhandled: function onUnhandled(id) {\n      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var message;\n      var stack;\n      var stringValue = Object.prototype.toString.call(error);\n\n      if (stringValue === '[object Error]') {\n        message = Error.prototype.toString.call(error);\n        stack = error.stack;\n      } else {\n        try {\n          message = require('pretty-format')(error);\n        } catch (_unused) {\n          message = typeof error === 'string' ? error : JSON.stringify(error);\n        }\n      }\n\n      var warning = \"Possible Unhandled Promise Rejection (id: \" + id + \"):\\n\" + (message + \"\\n\") + (stack == null ? '' : stack);\n      console.warn(warning);\n    },\n    onHandled: function onHandled(id) {\n      var warning = \"Promise Rejection Handled (id: \" + id + \")\\n\" + 'This means you can ignore any previous messages of the form ' + (\"\\\"Possible Unhandled Promise Rejection (id: \" + id + \"):\\\"\");\n      console.warn(warning);\n    }\n  });\n}\n\nmodule.exports = Promise;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Promise.js"],"names":["Promise","require","__DEV__","enable","allRejections","onUnhandled","id","error","message","stack","stringValue","Object","prototype","toString","call","Error","JSON","stringify","warning","console","warn","onHandled","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,qCAAD,CAAvB;;AAEAA,OAAO,CAAC,2BAAD,CAAP;;AACAA,OAAO,CAAC,8BAAD,CAAP;;AAEA,IAAIC,OAAJ,EAAa;AACXD,EAAAA,OAAO,CAAC,yCAAD,CAAP,CAAmDE,MAAnD,CAA0D;AACxDC,IAAAA,aAAa,EAAE,IADyC;AAExDC,IAAAA,WAAW,EAAE,qBAACC,EAAD,EAAoB;AAAA,UAAfC,KAAe,uEAAP,EAAO;AAC/B,UAAIC,OAAJ;AACA,UAAIC,KAAJ;AAEA,UAAMC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,KAA/B,CAApB;;AACA,UAAIG,WAAW,KAAK,gBAApB,EAAsC;AACpCF,QAAAA,OAAO,GAAGO,KAAK,CAACH,SAAN,CAAgBC,QAAhB,CAAyBC,IAAzB,CAA8BP,KAA9B,CAAV;AACAE,QAAAA,KAAK,GAAGF,KAAK,CAACE,KAAd;AACD,OAHD,MAGO;AACL,YAAI;AACFD,UAAAA,OAAO,GAAGP,OAAO,CAAC,eAAD,CAAP,CAAyBM,KAAzB,CAAV;AACD,SAFD,CAEE,gBAAM;AACNC,UAAAA,OAAO,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCS,IAAI,CAACC,SAAL,CAAeV,KAAf,CAA9C;AACD;AACF;;AAED,UAAMW,OAAO,GACX,+CAA6CZ,EAA7C,aACGE,OADH,YAECC,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAFtB,CADF;AAIAU,MAAAA,OAAO,CAACC,IAAR,CAAaF,OAAb;AACD,KAvBuD;AAwBxDG,IAAAA,SAAS,EAAE,mBAAAf,EAAE,EAAI;AACf,UAAMY,OAAO,GACX,oCAAkCZ,EAAlC,WACA,8DADA,qDAE8CA,EAF9C,UADF;AAIAa,MAAAA,OAAO,CAACC,IAAR,CAAaF,OAAb;AACD;AA9BuD,GAA1D;AAgCD;;AAEDI,MAAM,CAACC,OAAP,GAAiBvB,OAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Promise = require('promise/setimmediate/es6-extensions');\n\nrequire('promise/setimmediate/done');\nrequire('promise/setimmediate/finally');\n\nif (__DEV__) {\n  require('promise/setimmediate/rejection-tracking').enable({\n    allRejections: true,\n    onUnhandled: (id, error = {}) => {\n      let message: string;\n      let stack: ?string;\n\n      const stringValue = Object.prototype.toString.call(error);\n      if (stringValue === '[object Error]') {\n        message = Error.prototype.toString.call(error);\n        stack = error.stack;\n      } else {\n        try {\n          message = require('pretty-format')(error);\n        } catch {\n          message = typeof error === 'string' ? error : JSON.stringify(error);\n        }\n      }\n\n      const warning =\n        `Possible Unhandled Promise Rejection (id: ${id}):\\n` +\n        `${message}\\n` +\n        (stack == null ? '' : stack);\n      console.warn(warning);\n    },\n    onHandled: id => {\n      const warning =\n        `Promise Rejection Handled (id: ${id})\\n` +\n        'This means you can ignore any previous messages of the form ' +\n        `\"Possible Unhandled Promise Rejection (id: ${id}):\"`;\n      console.warn(warning);\n    },\n  });\n}\n\nmodule.exports = Promise;\n"]},"metadata":{},"sourceType":"script"}