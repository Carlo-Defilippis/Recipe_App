{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedNode = require('./AnimatedNode');\n\nvar AnimatedWithChildren = require('./AnimatedWithChildren');\n\nvar NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nvar AnimatedTransform = function (_AnimatedWithChildren) {\n  _inherits(AnimatedTransform, _AnimatedWithChildren);\n\n  var _super = _createSuper(AnimatedTransform);\n\n  function AnimatedTransform(transforms) {\n    var _this;\n\n    _classCallCheck(this, AnimatedTransform);\n\n    _this = _super.call(this);\n    _this._transforms = transforms;\n    return _this;\n  }\n\n  _createClass(AnimatedTransform, [{\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            value.__makeNative();\n          }\n        }\n      });\n\n      _get(_getPrototypeOf(AnimatedTransform.prototype), \"__makeNative\", this).call(this);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      return this._transforms.map(function (transform) {\n        var result = {};\n\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getValue();\n          } else {\n            result[key] = value;\n          }\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"__getAnimatedValue\",\n    value: function __getAnimatedValue() {\n      return this._transforms.map(function (transform) {\n        var result = {};\n\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getAnimatedValue();\n          } else {\n            result[key] = value;\n          }\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      var _this2 = this;\n\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            value.__addChild(_this2);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      var _this3 = this;\n\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            value.__removeChild(_this3);\n          }\n        }\n      });\n\n      _get(_getPrototypeOf(AnimatedTransform.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      var transConfigs = [];\n\n      this._transforms.forEach(function (transform) {\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            transConfigs.push({\n              type: 'animated',\n              property: key,\n              nodeTag: value.__getNativeTag()\n            });\n          } else {\n            transConfigs.push({\n              type: 'static',\n              property: key,\n              value: NativeAnimatedHelper.transformDataType(value)\n            });\n          }\n        }\n      });\n\n      NativeAnimatedHelper.validateTransform(transConfigs);\n      return {\n        type: 'transform',\n        transforms: transConfigs\n      };\n    }\n  }]);\n\n  return AnimatedTransform;\n}(AnimatedWithChildren);\n\nmodule.exports = AnimatedTransform;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedTransform.js"],"names":["AnimatedNode","require","AnimatedWithChildren","NativeAnimatedHelper","AnimatedTransform","transforms","_transforms","forEach","transform","key","value","__makeNative","map","result","__getValue","__getAnimatedValue","__addChild","__removeChild","transConfigs","push","type","property","nodeTag","__getNativeTag","transformDataType","validateTransform","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nclass AnimatedTransform extends AnimatedWithChildren {\n  _transforms: $ReadOnlyArray<Object>;\n\n  constructor(transforms: $ReadOnlyArray<Object>) {\n    super();\n    this._transforms = transforms;\n  }\n\n  __makeNative() {\n    this._transforms.forEach(transform => {\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n    });\n    super.__makeNative();\n  }\n\n  __getValue(): $ReadOnlyArray<Object> {\n    return this._transforms.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        } else {\n          result[key] = value;\n        }\n      }\n      return result;\n    });\n  }\n\n  __getAnimatedValue(): $ReadOnlyArray<Object> {\n    return this._transforms.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getAnimatedValue();\n        } else {\n          // All transform components needed to recompose matrix\n          result[key] = value;\n        }\n      }\n      return result;\n    });\n  }\n\n  __attach(): void {\n    this._transforms.forEach(transform => {\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    });\n  }\n\n  __detach(): void {\n    this._transforms.forEach(transform => {\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n    });\n    super.__detach();\n  }\n\n  __getNativeConfig(): any {\n    const transConfigs = [];\n\n    this._transforms.forEach(transform => {\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          transConfigs.push({\n            type: 'animated',\n            property: key,\n            nodeTag: value.__getNativeTag(),\n          });\n        } else {\n          transConfigs.push({\n            type: 'static',\n            property: key,\n            value: NativeAnimatedHelper.transformDataType(value),\n          });\n        }\n      }\n    });\n\n    NativeAnimatedHelper.validateTransform(transConfigs);\n    return {\n      type: 'transform',\n      transforms: transConfigs,\n    };\n  }\n}\n\nmodule.exports = AnimatedTransform;\n"]},"metadata":{},"sourceType":"script"}