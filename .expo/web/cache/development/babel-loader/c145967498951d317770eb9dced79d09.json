{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar invariant = require('invariant');\n\nfunction elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {\n  var out = [];\n  var outLength = 0;\n\n  for (var ii = 0; ii < itemCount; ii++) {\n    var frame = getFrameMetrics(ii);\n    var trailingOffset = frame.offset + frame.length;\n\n    for (var kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n\n        if (kk === offsets.length - 1) {\n          invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));\n          return out;\n        }\n      }\n    }\n  }\n\n  return out;\n}\n\nfunction newRangeCount(prev, next) {\n  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n}\n\nfunction computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {\n  var data = props.data,\n      getItemCount = props.getItemCount,\n      maxToRenderPerBatch = props.maxToRenderPerBatch,\n      windowSize = props.windowSize;\n  var itemCount = getItemCount(data);\n\n  if (itemCount === 0) {\n    return prev;\n  }\n\n  var offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength;\n  var visibleBegin = Math.max(0, offset);\n  var visibleEnd = visibleBegin + visibleLength;\n  var overscanLength = (windowSize - 1) * visibleLength;\n  var leadFactor = 0.5;\n  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n  var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n\n  if (lastItemOffset < overscanBegin) {\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1\n    };\n  }\n\n  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),\n      _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),\n      overscanFirst = _elementsThatOverlapO2[0],\n      first = _elementsThatOverlapO2[1],\n      last = _elementsThatOverlapO2[2],\n      overscanLast = _elementsThatOverlapO2[3];\n\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n  var visible = {\n    first: first,\n    last: last\n  };\n  var newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      break;\n    }\n\n    var maxNewCells = newCellCount >= maxToRenderPerBatch;\n    var firstWillAddMore = first <= prev.first || first > prev.last;\n    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    var lastWillAddMore = last >= prev.last || last < prev.first;\n    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      break;\n    }\n\n    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n\n      first--;\n    }\n\n    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n\n      last++;\n    }\n  }\n\n  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n    throw new Error('Bad window calculation ' + JSON.stringify({\n      first: first,\n      last: last,\n      itemCount: itemCount,\n      overscanFirst: overscanFirst,\n      overscanLast: overscanLast,\n      visible: visible\n    }));\n  }\n\n  return {\n    first: first,\n    last: last\n  };\n}\n\nvar VirtualizeUtils = {\n  computeWindowedRenderLimits: computeWindowedRenderLimits,\n  elementsThatOverlapOffsets: elementsThatOverlapOffsets,\n  newRangeCount: newRangeCount\n};\nmodule.exports = VirtualizeUtils;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Lists/VirtualizeUtils.js"],"names":["invariant","require","elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","props","getFrameMetricsApprox","scrollMetrics","data","getItemCount","maxToRenderPerBatch","windowSize","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","VirtualizeUtils","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nfunction elementsThatOverlapOffsets(\n  offsets: Array<number>,\n  itemCount: number,\n  getFrameMetrics: (\n    index: number,\n  ) => {\n    length: number,\n    offset: number,\n    ...\n  },\n): Array<number> {\n  const out = [];\n  let outLength = 0;\n  for (let ii = 0; ii < itemCount; ii++) {\n    const frame = getFrameMetrics(ii);\n    const trailingOffset = frame.offset + frame.length;\n    for (let kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n        if (kk === offsets.length - 1) {\n          invariant(\n            outLength === offsets.length,\n            'bad offsets input, should be in increasing order: %s',\n            JSON.stringify(offsets),\n          );\n          return out;\n        }\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nfunction newRangeCount(\n  prev: {\n    first: number,\n    last: number,\n    ...\n  },\n  next: {\n    first: number,\n    last: number,\n    ...\n  },\n): number {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nfunction computeWindowedRenderLimits(\n  props: {\n    data: any,\n    getItemCount: (data: any) => number,\n    maxToRenderPerBatch: number,\n    windowSize: number,\n    ...\n  },\n  prev: {\n    first: number,\n    last: number,\n    ...\n  },\n  getFrameMetricsApprox: (\n    index: number,\n  ) => {\n    length: number,\n    offset: number,\n    ...\n  },\n  scrollMetrics: {\n    dt: number,\n    offset: number,\n    velocity: number,\n    visibleLength: number,\n    ...\n  },\n): {\n  first: number,\n  last: number,\n  ...\n} {\n  const {data, getItemCount, maxToRenderPerBatch, windowSize} = props;\n  const itemCount = getItemCount(data);\n  if (itemCount === 0) {\n    return prev;\n  }\n  const {offset, velocity, visibleLength} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props.getItemCount(props.data),\n    getFrameMetricsApprox,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nconst VirtualizeUtils = {\n  computeWindowedRenderLimits,\n  elementsThatOverlapOffsets,\n  newRangeCount,\n};\n\nmodule.exports = VirtualizeUtils;\n"]},"metadata":{},"sourceType":"script"}