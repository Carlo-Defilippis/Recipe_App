{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _ReactNative = _interopRequireDefault(require(\"../../Renderer/shims/ReactNative\"));\n\nvar _Platform = _interopRequireDefault(require(\"../../Utilities/Platform\"));\n\nvar _TVEventHandler = _interopRequireDefault(require(\"../../Components/AppleTV/TVEventHandler\"));\n\nvar TVTouchable = function () {\n  function TVTouchable(component, config) {\n    (0, _classCallCheck2.default)(this, TVTouchable);\n    (0, _invariant.default)(_Platform.default.isTV, 'TVTouchable: Requires `Platform.isTV`.');\n    this._tvEventHandler = new _TVEventHandler.default();\n\n    this._tvEventHandler.enable(component, function (_, tvData) {\n      tvData.dispatchConfig = {};\n\n      if (_ReactNative.default.findNodeHandle(component) === tvData.tag) {\n        if (tvData.eventType === 'focus') {\n          config.onFocus(tvData);\n        } else if (tvData.eventType === 'blur') {\n          config.onBlur(tvData);\n        } else if (tvData.eventType === 'select') {\n          if (!config.getDisabled()) {\n            config.onPress(tvData);\n          }\n        }\n      }\n    });\n  }\n\n  (0, _createClass2.default)(TVTouchable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this._tvEventHandler.disable();\n    }\n  }]);\n  return TVTouchable;\n}();\n\nexports.default = TVTouchable;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Components/Touchable/TVTouchable.js"],"names":["TVTouchable","component","config","Platform","isTV","_tvEventHandler","TVEventHandler","enable","_","tvData","dispatchConfig","ReactNative","findNodeHandle","tag","eventType","onFocus","onBlur","getDisabled","onPress","disable"],"mappings":"AAUA;;;;;;;;;;;;;AAEA;;AACA;;AAMA;;AACA;;IASqBA,W;AAGnB,uBAAYC,SAAZ,EAA4BC,MAA5B,EAAuD;AAAA;AACrD,4BAAUC,kBAASC,IAAnB,EAAyB,wCAAzB;AACA,SAAKC,eAAL,GAAuB,IAAIC,uBAAJ,EAAvB;;AACA,SAAKD,eAAL,CAAqBE,MAArB,CAA4BN,SAA5B,EAAuC,UAACO,CAAD,EAAIC,MAAJ,EAAe;AACpDA,MAAAA,MAAM,CAACC,cAAP,GAAwB,EAAxB;;AACA,UAAIC,qBAAYC,cAAZ,CAA2BX,SAA3B,MAA0CQ,MAAM,CAACI,GAArD,EAA0D;AACxD,YAAIJ,MAAM,CAACK,SAAP,KAAqB,OAAzB,EAAkC;AAChCZ,UAAAA,MAAM,CAACa,OAAP,CAAeN,MAAf;AACD,SAFD,MAEO,IAAIA,MAAM,CAACK,SAAP,KAAqB,MAAzB,EAAiC;AACtCZ,UAAAA,MAAM,CAACc,MAAP,CAAcP,MAAd;AACD,SAFM,MAEA,IAAIA,MAAM,CAACK,SAAP,KAAqB,QAAzB,EAAmC;AACxC,cAAI,CAACZ,MAAM,CAACe,WAAP,EAAL,EAA2B;AACzBf,YAAAA,MAAM,CAACgB,OAAP,CAAeT,MAAf;AACD;AACF;AACF;AACF,KAbD;AAcD;;;;8BAEe;AACd,WAAKJ,eAAL,CAAqBc,OAArB;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport invariant from 'invariant';\nimport ReactNative from '../../Renderer/shims/ReactNative';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport Platform from '../../Utilities/Platform';\nimport TVEventHandler from '../../Components/AppleTV/TVEventHandler';\n\ntype TVTouchableConfig = $ReadOnly<{|\n  getDisabled: () => boolean,\n  onBlur: (event: BlurEvent) => mixed,\n  onFocus: (event: FocusEvent) => mixed,\n  onPress: (event: PressEvent) => mixed,\n|}>;\n\nexport default class TVTouchable {\n  _tvEventHandler: TVEventHandler;\n\n  constructor(component: any, config: TVTouchableConfig) {\n    invariant(Platform.isTV, 'TVTouchable: Requires `Platform.isTV`.');\n    this._tvEventHandler = new TVEventHandler();\n    this._tvEventHandler.enable(component, (_, tvData) => {\n      tvData.dispatchConfig = {};\n      if (ReactNative.findNodeHandle(component) === tvData.tag) {\n        if (tvData.eventType === 'focus') {\n          config.onFocus(tvData);\n        } else if (tvData.eventType === 'blur') {\n          config.onBlur(tvData);\n        } else if (tvData.eventType === 'select') {\n          if (!config.getDisabled()) {\n            config.onPress(tvData);\n          }\n        }\n      }\n    });\n  }\n\n  destroy(): void {\n    this._tvEventHandler.disable();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}