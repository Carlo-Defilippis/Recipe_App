{"ast":null,"code":"'use strict';\n\nvar DeprecatedColorPropType = require('./DeprecatedColorPropType');\n\nvar DeprecatedEdgeInsetsPropType = require('./DeprecatedEdgeInsetsPropType');\n\nvar DeprecatedStyleSheetPropType = require('./DeprecatedStyleSheetPropType');\n\nvar PropTypes = require('prop-types');\n\nvar DeprecatedTextStylePropTypes = require('./DeprecatedTextStylePropTypes');\n\nvar stylePropType = DeprecatedStyleSheetPropType(DeprecatedTextStylePropTypes);\nvar DataDetectorTypes = ['phoneNumber', 'link', 'email', 'none', 'all'];\nmodule.exports = {\n  ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),\n  numberOfLines: PropTypes.number,\n  textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n  onLayout: PropTypes.func,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  pressRetentionOffset: DeprecatedEdgeInsetsPropType,\n  selectable: PropTypes.bool,\n  selectionColor: DeprecatedColorPropType,\n  suppressHighlighting: PropTypes.bool,\n  style: stylePropType,\n  testID: PropTypes.string,\n  nativeID: PropTypes.string,\n  allowFontScaling: PropTypes.bool,\n  maxFontSizeMultiplier: PropTypes.number,\n  accessible: PropTypes.bool,\n  adjustsFontSizeToFit: PropTypes.bool,\n  minimumFontScale: PropTypes.number,\n  disabled: PropTypes.bool,\n  dataDetectorType: PropTypes.oneOf(DataDetectorTypes)\n};","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/DeprecatedPropTypes/DeprecatedTextPropTypes.js"],"names":["DeprecatedColorPropType","require","DeprecatedEdgeInsetsPropType","DeprecatedStyleSheetPropType","PropTypes","DeprecatedTextStylePropTypes","stylePropType","DataDetectorTypes","module","exports","ellipsizeMode","oneOf","numberOfLines","number","textBreakStrategy","onLayout","func","onPress","onLongPress","pressRetentionOffset","selectable","bool","selectionColor","suppressHighlighting","style","testID","string","nativeID","allowFontScaling","maxFontSizeMultiplier","accessible","adjustsFontSizeToFit","minimumFontScale","disabled","dataDetectorType"],"mappings":"AAUA;;AAEA,IAAMA,uBAAuB,GAAGC,OAAO,CAAC,2BAAD,CAAvC;;AACA,IAAMC,4BAA4B,GAAGD,OAAO,CAAC,gCAAD,CAA5C;;AACA,IAAME,4BAA4B,GAAGF,OAAO,CAAC,gCAAD,CAA5C;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAMI,4BAA4B,GAAGJ,OAAO,CAAC,gCAAD,CAA5C;;AAEA,IAAMK,aAAkC,GAAGH,4BAA4B,CACrEE,4BADqE,CAAvE;AAIA,IAAME,iBAAiB,GAAG,CAAC,aAAD,EAAgB,MAAhB,EAAwB,OAAxB,EAAiC,MAAjC,EAAyC,KAAzC,CAA1B;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAOfC,EAAAA,aAAa,EAAGN,SAAS,CAACO,KAAV,CAAgB,CAC9B,MAD8B,EAE9B,QAF8B,EAG9B,MAH8B,EAI9B,MAJ8B,CAAhB,CAPD;AAkBfC,EAAAA,aAAa,EAAER,SAAS,CAACS,MAlBV;AAwBfC,EAAAA,iBAAiB,EAAGV,SAAS,CAACO,KAAV,CAAgB,CAClC,QADkC,EAElC,aAFkC,EAGlC,UAHkC,CAAhB,CAxBL;AAkCfI,EAAAA,QAAQ,EAAEX,SAAS,CAACY,IAlCL;AAwCfC,EAAAA,OAAO,EAAEb,SAAS,CAACY,IAxCJ;AA8CfE,EAAAA,WAAW,EAAEd,SAAS,CAACY,IA9CR;AAqDfG,EAAAA,oBAAoB,EAAEjB,4BArDP;AA2DfkB,EAAAA,UAAU,EAAEhB,SAAS,CAACiB,IA3DP;AAiEfC,EAAAA,cAAc,EAAEtB,uBAjED;AAuEfuB,EAAAA,oBAAoB,EAAEnB,SAAS,CAACiB,IAvEjB;AAwEfG,EAAAA,KAAK,EAAElB,aAxEQ;AA8EfmB,EAAAA,MAAM,EAAErB,SAAS,CAACsB,MA9EH;AAoFfC,EAAAA,QAAQ,EAAEvB,SAAS,CAACsB,MApFL;AA0FfE,EAAAA,gBAAgB,EAAExB,SAAS,CAACiB,IA1Fb;AAkGfQ,EAAAA,qBAAqB,EAAEzB,SAAS,CAACS,MAlGlB;AAwGfiB,EAAAA,UAAU,EAAE1B,SAAS,CAACiB,IAxGP;AA8GfU,EAAAA,oBAAoB,EAAE3B,SAAS,CAACiB,IA9GjB;AAoHfW,EAAAA,gBAAgB,EAAE5B,SAAS,CAACS,MApHb;AA0HfoB,EAAAA,QAAQ,EAAE7B,SAAS,CAACiB,IA1HL;AAgIfa,EAAAA,gBAAgB,EAAG9B,SAAS,CAACO,KAAV,CACjBJ,iBADiB;AAhIJ,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst DeprecatedColorPropType = require('./DeprecatedColorPropType');\nconst DeprecatedEdgeInsetsPropType = require('./DeprecatedEdgeInsetsPropType');\nconst DeprecatedStyleSheetPropType = require('./DeprecatedStyleSheetPropType');\nconst PropTypes = require('prop-types');\nconst DeprecatedTextStylePropTypes = require('./DeprecatedTextStylePropTypes');\n\nconst stylePropType: ReactPropsCheckType = DeprecatedStyleSheetPropType(\n  DeprecatedTextStylePropTypes,\n);\n\nconst DataDetectorTypes = ['phoneNumber', 'link', 'email', 'none', 'all'];\n\nmodule.exports = {\n  /**\n   * When `numberOfLines` is set, this prop defines how text will be\n   * truncated.\n   *\n   * See https://reactnative.dev/docs/text.html#ellipsizemode\n   */\n  ellipsizeMode: (PropTypes.oneOf([\n    'head',\n    'middle',\n    'tail',\n    'clip',\n  ]): React$PropType$Primitive<'head' | 'middle' | 'tail' | 'clip'>),\n  /**\n   * Used to truncate the text with an ellipsis.\n   *\n   * See https://reactnative.dev/docs/text.html#numberoflines\n   */\n  numberOfLines: PropTypes.number,\n  /**\n   * Set text break strategy on Android.\n   *\n   * See https://reactnative.dev/docs/text.html#textbreakstrategy\n   */\n  textBreakStrategy: (PropTypes.oneOf([\n    'simple',\n    'highQuality',\n    'balanced',\n  ]): React$PropType$Primitive<'simple' | 'highQuality' | 'balanced'>),\n  /**\n   * Invoked on mount and layout changes.\n   *\n   * See https://reactnative.dev/docs/text.html#onlayout\n   */\n  onLayout: PropTypes.func,\n  /**\n   * This function is called on press.\n   *\n   * See https://reactnative.dev/docs/text.html#onpress\n   */\n  onPress: PropTypes.func,\n  /**\n   * This function is called on long press.\n   *\n   * See https://reactnative.dev/docs/text.html#onlongpress\n   */\n  onLongPress: PropTypes.func,\n  /**\n   * Defines how far your touch may move off of the button, before\n   * deactivating the button.\n   *\n   * See https://reactnative.dev/docs/text.html#pressretentionoffset\n   */\n  pressRetentionOffset: DeprecatedEdgeInsetsPropType,\n  /**\n   * Lets the user select text.\n   *\n   * See https://reactnative.dev/docs/text.html#selectable\n   */\n  selectable: PropTypes.bool,\n  /**\n   * The highlight color of the text.\n   *\n   * See https://reactnative.dev/docs/text.html#selectioncolor\n   */\n  selectionColor: DeprecatedColorPropType,\n  /**\n   * When `true`, no visual change is made when text is pressed down.\n   *\n   * See https://reactnative.dev/docs/text.html#supperhighlighting\n   */\n  suppressHighlighting: PropTypes.bool,\n  style: stylePropType,\n  /**\n   * Used to locate this view in end-to-end tests.\n   *\n   * See https://reactnative.dev/docs/text.html#testid\n   */\n  testID: PropTypes.string,\n  /**\n   * Used to locate this view from native code.\n   *\n   * See https://reactnative.dev/docs/text.html#nativeid\n   */\n  nativeID: PropTypes.string,\n  /**\n   * Whether fonts should scale to respect Text Size accessibility settings.\n   *\n   * See https://reactnative.dev/docs/text.html#allowfontscaling\n   */\n  allowFontScaling: PropTypes.bool,\n  /**\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n   * Possible values:\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\n   * `0`: no max, ignore parent/global default\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n   */\n  maxFontSizeMultiplier: PropTypes.number,\n  /**\n   * Indicates whether the view is an accessibility element.\n   *\n   * See https://reactnative.dev/docs/text.html#accessible\n   */\n  accessible: PropTypes.bool,\n  /**\n   * Whether font should be scaled down automatically.\n   *\n   * See https://reactnative.dev/docs/text.html#adjustsfontsizetofit\n   */\n  adjustsFontSizeToFit: PropTypes.bool,\n  /**\n   * Smallest possible scale a font can reach.\n   *\n   * See https://reactnative.dev/docs/text.html#minimumfontscale\n   */\n  minimumFontScale: PropTypes.number,\n  /**\n   * Specifies the disabled state of the text view for testing purposes.\n   *\n   * See https://reactnative.dev/docs/text.html#disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Determines the types of data converted to clickable URLs in text.\n   *\n   * See https://reactnative.dev/docs/text.html#dataDetectorType\n   */\n  dataDetectorType: (PropTypes.oneOf(\n    DataDetectorTypes,\n  ): React$PropType$Primitive<\n    'phoneNumber' | 'link' | 'email' | 'none' | 'all',\n  >),\n};\n"]},"metadata":{},"sourceType":"script"}