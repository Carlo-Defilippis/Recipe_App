{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Api = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _apisauce = require(\"apisauce\");\n\nvar _apiProblem = require(\"./api-problem\");\n\nvar _apiConfig = require(\"./api-config\");\n\nvar Api = function () {\n  function Api() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _apiConfig.DEFAULT_API_CONFIG;\n    (0, _classCallCheck2.default)(this, Api);\n    this.config = config;\n  }\n\n  (0, _createClass2.default)(Api, [{\n    key: \"setup\",\n    value: function setup() {\n      this.apisauce = (0, _apisauce.create)({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\"\n        }\n      });\n    }\n  }, {\n    key: \"getUsers\",\n    value: function getUsers() {\n      var response, problem, convertUser, rawUsers, resultUsers;\n      return _regenerator.default.async(function getUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(this.apisauce.get(\"/users\"));\n\n            case 2:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 7;\n                break;\n              }\n\n              problem = (0, _apiProblem.getGeneralApiProblem)(response);\n\n              if (!problem) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", problem);\n\n            case 7:\n              convertUser = function convertUser(raw) {\n                return {\n                  id: raw.id,\n                  name: raw.name\n                };\n              };\n\n              _context.prev = 8;\n              rawUsers = response.data;\n              resultUsers = rawUsers.map(convertUser);\n              return _context.abrupt(\"return\", {\n                kind: \"ok\",\n                users: resultUsers\n              });\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n              return _context.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[8, 14]], Promise);\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser(id) {\n      var response, problem, resultUser;\n      return _regenerator.default.async(function getUser$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(this.apisauce.get(\"/users/\" + id));\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.ok) {\n                _context2.next = 7;\n                break;\n              }\n\n              problem = (0, _apiProblem.getGeneralApiProblem)(response);\n\n              if (!problem) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", problem);\n\n            case 7:\n              _context2.prev = 7;\n              resultUser = {\n                id: response.data.id,\n                name: response.data.name\n              };\n              return _context2.abrupt(\"return\", {\n                kind: \"ok\",\n                user: resultUser\n              });\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](7);\n              return _context2.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[7, 12]], Promise);\n    }\n  }]);\n  return Api;\n}();\n\nexports.Api = Api;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/app/services/api/api.ts"],"names":["Api","config","DEFAULT_API_CONFIG","apisauce","baseURL","url","timeout","headers","Accept","get","response","ok","problem","convertUser","raw","id","name","rawUsers","data","resultUsers","map","kind","users","resultUser","user"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAMaA,G;AAgBX,iBAAoD;AAAA,QAAxCC,MAAwC,uEAApBC,6BAAoB;AAAA;AAClD,SAAKD,MAAL,GAAcA,MAAd;AACD;;;;4BASO;AAEN,WAAKE,QAAL,GAAgB,sBAAO;AACrBC,QAAAA,OAAO,EAAE,KAAKH,MAAL,CAAYI,GADA;AAErBC,QAAAA,OAAO,EAAE,KAAKL,MAAL,CAAYK,OAFA;AAGrBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD;AAHY,OAAP,CAAhB;AAOD;;;;;;;;;;gDAO0C,KAAKL,QAAL,CAAcM,GAAd,U;;;AAAnCC,cAAAA,Q;;kBAGDA,QAAQ,CAACC,E;;;;;AACNC,cAAAA,O,GAAU,sCAAqBF,QAArB,C;;mBACZE,O;;;;;+CAAgBA,O;;;AAGhBC,cAAAA,W,GAAc,SAAdA,WAAc,CAAAC,GAAG,EAAI;AACzB,uBAAO;AACLC,kBAAAA,EAAE,EAAED,GAAG,CAACC,EADH;AAELC,kBAAAA,IAAI,EAAEF,GAAG,CAACE;AAFL,iBAAP;AAID,e;;;AAIOC,cAAAA,Q,GAAWP,QAAQ,CAACQ,I;AACpBC,cAAAA,W,GAA4BF,QAAQ,CAACG,GAAT,CAAaP,WAAb,C;+CAC3B;AAAEQ,gBAAAA,IAAI,EAAE,IAAR;AAAcC,gBAAAA,KAAK,EAAEH;AAArB,e;;;;;+CAEA;AAAEE,gBAAAA,IAAI,EAAE;AAAR,e;;;;;;;;;;;4BAQGN,E;;;;;;;gDAE6B,KAAKZ,QAAL,CAAcM,GAAd,aAA4BM,EAA5B,C;;;AAAnCL,cAAAA,Q;;kBAGDA,QAAQ,CAACC,E;;;;;AACNC,cAAAA,O,GAAU,sCAAqBF,QAArB,C;;mBACZE,O;;;;;gDAAgBA,O;;;;AAKdW,cAAAA,U,GAAyB;AAC7BR,gBAAAA,EAAE,EAAEL,QAAQ,CAACQ,IAAT,CAAcH,EADW;AAE7BC,gBAAAA,IAAI,EAAEN,QAAQ,CAACQ,IAAT,CAAcF;AAFS,e;gDAIxB;AAAEK,gBAAAA,IAAI,EAAE,IAAR;AAAcG,gBAAAA,IAAI,EAAED;AAApB,e;;;;;gDAEA;AAAEF,gBAAAA,IAAI,EAAE;AAAR,e","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from \"apisauce\"\r\nimport { getGeneralApiProblem } from \"./api-problem\"\r\nimport { ApiConfig, DEFAULT_API_CONFIG } from \"./api-config\"\r\nimport * as Types from \"./api.types\"\r\n\r\n/**\r\n * Manages all requests to the API.\r\n */\r\nexport class Api {\r\n  /**\r\n   * The underlying apisauce instance which performs the requests.\r\n   */\r\n  apisauce: ApisauceInstance\r\n\r\n  /**\r\n   * Configurable options.\r\n   */\r\n  config: ApiConfig\r\n\r\n  /**\r\n   * Creates the api.\r\n   *\r\n   * @param config The configuration to use.\r\n   */\r\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\r\n    this.config = config\r\n  }\r\n\r\n  /**\r\n   * Sets up the API.  This will be called during the bootup\r\n   * sequence and will happen before the first React component\r\n   * is mounted.\r\n   *\r\n   * Be as quick as possible in here.\r\n   */\r\n  setup() {\r\n    // construct the apisauce instance\r\n    this.apisauce = create({\r\n      baseURL: this.config.url,\r\n      timeout: this.config.timeout,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Gets a list of users.\r\n   */\r\n  async getUsers(): Promise<Types.GetUsersResult> {\r\n    // make the api call\r\n    const response: ApiResponse<any> = await this.apisauce.get(`/users`)\r\n\r\n    // the typical ways to die when calling an api\r\n    if (!response.ok) {\r\n      const problem = getGeneralApiProblem(response)\r\n      if (problem) return problem\r\n    }\r\n\r\n    const convertUser = raw => {\r\n      return {\r\n        id: raw.id,\r\n        name: raw.name,\r\n      }\r\n    }\r\n\r\n    // transform the data into the format we are expecting\r\n    try {\r\n      const rawUsers = response.data\r\n      const resultUsers: Types.User[] = rawUsers.map(convertUser)\r\n      return { kind: \"ok\", users: resultUsers }\r\n    } catch {\r\n      return { kind: \"bad-data\" }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a single user by ID\r\n   */\r\n\r\n  async getUser(id: string): Promise<Types.GetUserResult> {\r\n    // make the api call\r\n    const response: ApiResponse<any> = await this.apisauce.get(`/users/${id}`)\r\n\r\n    // the typical ways to die when calling an api\r\n    if (!response.ok) {\r\n      const problem = getGeneralApiProblem(response)\r\n      if (problem) return problem\r\n    }\r\n\r\n    // transform the data into the format we are expecting\r\n    try {\r\n      const resultUser: Types.User = {\r\n        id: response.data.id,\r\n        name: response.data.name,\r\n      }\r\n      return { kind: \"ok\", user: resultUser }\r\n    } catch {\r\n      return { kind: \"bad-data\" }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}