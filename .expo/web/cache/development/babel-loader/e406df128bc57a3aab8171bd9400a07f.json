{"ast":null,"code":"'use strict';\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _NativeRedBox = _interopRequireDefault(require(\"../NativeModules/specs/NativeRedBox\"));\n\nvar LogBoxData = _interopRequireWildcard(require(\"../LogBox/Data/LogBoxData\"));\n\nvar DevSettings = require('./DevSettings');\n\nvar invariant = require('invariant');\n\nvar MetroHMRClient = require('metro/src/lib/bundle-modules/HMRClient');\n\nvar Platform = require('./Platform');\n\nvar prettyFormat = require('pretty-format');\n\nvar pendingEntryPoints = [];\nvar hmrClient = null;\nvar hmrUnavailableReason = null;\nvar currentCompileErrorMessage = null;\nvar didConnect = false;\nvar pendingLogs = [];\nvar HMRClient = {\n  enable: function enable() {\n    if (hmrUnavailableReason !== null) {\n      throw new Error(hmrUnavailableReason);\n    }\n\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n\n    var LoadingView = require('./LoadingView');\n\n    hmrClient.send(JSON.stringify({\n      type: 'log-opt-in'\n    }));\n    var hasUpdates = hmrClient.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    showCompileError();\n  },\n  disable: function disable() {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n  registerBundle: function registerBundle(requestUrl) {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n  log: function log(level, data) {\n    if (!hmrClient) {\n      pendingLogs.push([level, data]);\n\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n\n      return;\n    }\n\n    try {\n      hmrClient.send(JSON.stringify({\n        type: 'log',\n        level: level,\n        data: data.map(function (item) {\n          return typeof item === 'string' ? item : prettyFormat(item, {\n            escapeString: true,\n            highlight: true,\n            maxDepth: 3,\n            min: true,\n            plugins: [prettyFormat.plugins.ReactElement]\n          });\n        })\n      }));\n    } catch (error) {}\n  },\n  setup: function setup(platform, bundleEntry, host, port, isEnabled) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required parameter `bundleEntry`');\n    invariant(host, 'Missing required parameter `host`');\n    invariant(!hmrClient, 'Cannot initialize hmrClient twice');\n\n    var LoadingView = require('./LoadingView');\n\n    var wsHost = port !== null && port !== '' ? host + \":\" + port : host;\n    var client = new MetroHMRClient(\"ws://\" + wsHost + \"/hot\");\n    hmrClient = client;\n    pendingEntryPoints.push(\"ws://\" + wsHost + \"/hot?bundleEntry=\" + bundleEntry + \"&platform=\" + platform);\n    client.on('connection-error', function (e) {\n      var error = \"Cannot connect to the Metro server.\\n\\nTry the following to fix the issue:\\n- Ensure that the Metro server is running and available on the same network\";\n\n      if (Platform.OS === 'ios') {\n        error += \"\\n- Ensure that the Metro server URL is correctly set in AppDelegate\";\n      } else {\n        error += \"\\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081\";\n      }\n\n      error += \"\\n\\nURL: \" + host + \":\" + port + \"\\n\\nError: \" + e.message;\n      setHMRUnavailableReason(error);\n    });\n    client.on('update-start', function (_ref) {\n      var isInitialUpdate = _ref.isInitialUpdate;\n      currentCompileErrorMessage = null;\n      didConnect = true;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView.showMessage('Refreshing...', 'refresh');\n      }\n    });\n    client.on('update', function (_ref2) {\n      var isInitialUpdate = _ref2.isInitialUpdate;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBoxData.clear();\n      }\n    });\n    client.on('update-done', function () {\n      LoadingView.hide();\n    });\n    client.on('error', function (data) {\n      LoadingView.hide();\n\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('The Metro server has restarted since the last edit. Reload to reconnect.');\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('The Metro server and the client are out of sync. Reload to reconnect.');\n      } else {\n        currentCompileErrorMessage = data.type + \" \" + data.message;\n\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n    client.on('close', function (data) {\n      LoadingView.hide();\n      setHMRUnavailableReason('Disconnected from the Metro server.');\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs(hmrClient);\n  }\n};\n\nfunction setHMRUnavailableReason(reason) {\n  invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n\n  if (hmrUnavailableReason !== null) {\n    return;\n  }\n\n  hmrUnavailableReason = reason;\n\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n  }\n}\n\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason) {\n    DevSettings.reload('Bundle Splitting â€“ Metro disconnected');\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client.send(JSON.stringify({\n      type: 'register-entrypoints',\n      entryPoints: pendingEntryPoints\n    }));\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs(client) {\n  try {\n    pendingLogs.forEach(function (_ref3) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n          level = _ref4[0],\n          data = _ref4[1];\n\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {\n  if (Platform.OS === 'ios' && _NativeRedBox.default != null && _NativeRedBox.default.dismiss != null) {\n    _NativeRedBox.default.dismiss();\n  } else {\n    var NativeExceptionsManager = require('../Core/NativeExceptionsManager').default;\n\n    NativeExceptionsManager && NativeExceptionsManager.dismissRedbox && NativeExceptionsManager.dismissRedbox();\n  }\n}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  dismissRedbox();\n  var message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n  var error = new Error(message);\n  error.preventSymbolication = true;\n  throw error;\n}\n\nmodule.exports = HMRClient;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Utilities/HMRClient.js"],"names":["DevSettings","require","invariant","MetroHMRClient","Platform","prettyFormat","pendingEntryPoints","hmrClient","hmrUnavailableReason","currentCompileErrorMessage","didConnect","pendingLogs","HMRClient","enable","Error","LoadingView","send","JSON","stringify","type","hasUpdates","hasPendingUpdates","showMessage","hide","showCompileError","disable","registerBundle","requestUrl","push","registerBundleEntryPoints","log","level","data","length","shift","map","item","escapeString","highlight","maxDepth","min","plugins","ReactElement","error","setup","platform","bundleEntry","host","port","isEnabled","wsHost","client","on","e","OS","message","setHMRUnavailableReason","isInitialUpdate","dismissRedbox","LogBoxData","clear","close","flushEarlyLogs","reason","console","warn","reload","entryPoints","forEach","NativeRedBox","dismiss","NativeExceptionsManager","default","preventSymbolication","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst DevSettings = require('./DevSettings');\nconst invariant = require('invariant');\nconst MetroHMRClient = require('metro/src/lib/bundle-modules/HMRClient');\nconst Platform = require('./Platform');\nconst prettyFormat = require('pretty-format');\n\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\nimport * as LogBoxData from '../LogBox/Data/LogBoxData';\nimport type {ExtendedError} from '../Core/Devtools/parseErrorStack';\n\nconst pendingEntryPoints = [];\nlet hmrClient = null;\nlet hmrUnavailableReason: string | null = null;\nlet currentCompileErrorMessage: string | null = null;\nlet didConnect: boolean = false;\nlet pendingLogs: Array<[LogLevel, Array<mixed>]> = [];\n\ntype LogLevel =\n  | 'trace'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'log'\n  | 'group'\n  | 'groupCollapsed'\n  | 'groupEnd'\n  | 'debug';\n\nexport type HMRClientNativeInterface = {|\n  enable(): void,\n  disable(): void,\n  registerBundle(requestUrl: string): void,\n  log(level: LogLevel, data: Array<mixed>): void,\n  setup(\n    platform: string,\n    bundleEntry: string,\n    host: string,\n    port: number | string,\n    isEnabled: boolean,\n  ): void,\n|};\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient: HMRClientNativeInterface = {\n  enable() {\n    if (hmrUnavailableReason !== null) {\n      // If HMR became unavailable while you weren't using it,\n      // explain why when you try to turn it on.\n      // This is an error (and not a warning) because it is shown\n      // in response to a direct user action.\n      throw new Error(hmrUnavailableReason);\n    }\n\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    const LoadingView = require('./LoadingView');\n\n    // We use this for internal logging only.\n    // It doesn't affect the logic.\n    hmrClient.send(JSON.stringify({type: 'log-opt-in'}));\n\n    // When toggling Fast Refresh on, we might already have some stashed updates.\n    // Since they'll get applied now, we'll show a banner.\n    const hasUpdates = hmrClient.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    // There could be a compile error while Fast Refresh was off,\n    // but we ignored it at the time. Show it now.\n    showCompileError();\n  },\n\n  disable() {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n\n  registerBundle(requestUrl: string) {\n    invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n\n  log(level: LogLevel, data: Array<mixed>) {\n    if (!hmrClient) {\n      // Catch a reasonable number of early logs\n      // in case hmrClient gets initialized later.\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(\n        JSON.stringify({\n          type: 'log',\n          level,\n          data: data.map(item =>\n            typeof item === 'string'\n              ? item\n              : prettyFormat(item, {\n                  escapeString: true,\n                  highlight: true,\n                  maxDepth: 3,\n                  min: true,\n                  plugins: [prettyFormat.plugins.ReactElement],\n                }),\n          ),\n        }),\n      );\n    } catch (error) {\n      // If sending logs causes any failures we want to silently ignore them\n      // to ensure we do not cause infinite-logging loops.\n    }\n  },\n\n  // Called once by the bridge on startup, even if Fast Refresh is off.\n  // It creates the HMR client but doesn't actually set up the socket yet.\n  setup(\n    platform: string,\n    bundleEntry: string,\n    host: string,\n    port: number | string,\n    isEnabled: boolean,\n  ) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required parameter `bundleEntry`');\n    invariant(host, 'Missing required parameter `host`');\n    invariant(!hmrClient, 'Cannot initialize hmrClient twice');\n\n    // Moving to top gives errors due to NativeModules not being initialized\n    const LoadingView = require('./LoadingView');\n\n    const wsHost = port !== null && port !== '' ? `${host}:${port}` : host;\n    const client = new MetroHMRClient(`ws://${wsHost}/hot`);\n    hmrClient = client;\n\n    pendingEntryPoints.push(\n      `ws://${wsHost}/hot?bundleEntry=${bundleEntry}&platform=${platform}`,\n    );\n\n    client.on('connection-error', e => {\n      let error = `Cannot connect to the Metro server.\n\nTry the following to fix the issue:\n- Ensure that the Metro server is running and available on the same network`;\n\n      if (Platform.OS === 'ios') {\n        error += `\n- Ensure that the Metro server URL is correctly set in AppDelegate`;\n      } else {\n        error += `\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081`;\n      }\n\n      error += `\n\nURL: ${host}:${port}\n\nError: ${e.message}`;\n\n      setHMRUnavailableReason(error);\n    });\n\n    client.on('update-start', ({isInitialUpdate}) => {\n      currentCompileErrorMessage = null;\n      didConnect = true;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView.showMessage('Refreshing...', 'refresh');\n      }\n    });\n\n    client.on('update', ({isInitialUpdate}) => {\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBoxData.clear();\n      }\n    });\n\n    client.on('update-done', () => {\n      LoadingView.hide();\n    });\n\n    client.on('error', data => {\n      LoadingView.hide();\n\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason(\n          'The Metro server has restarted since the last edit. Reload to reconnect.',\n        );\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason(\n          'The Metro server and the client are out of sync. Reload to reconnect.',\n        );\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n\n    client.on('close', data => {\n      LoadingView.hide();\n      setHMRUnavailableReason('Disconnected from the Metro server.');\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs(hmrClient);\n  },\n};\n\nfunction setHMRUnavailableReason(reason) {\n  invariant(hmrClient, 'Expected HMRClient.setup() call at startup.');\n  if (hmrUnavailableReason !== null) {\n    // Don't show more than one warning.\n    return;\n  }\n  hmrUnavailableReason = reason;\n\n  // We only want to show a warning if Fast Refresh is on *and* if we ever\n  // previously managed to connect successfully. We don't want to show\n  // the warning to native engineers who use cached bundles without Metro.\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n    // (Not using the `warning` module to prevent a Buck cycle.)\n  }\n}\n\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason) {\n    DevSettings.reload('Bundle Splitting â€“ Metro disconnected');\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client.send(\n      JSON.stringify({\n        type: 'register-entrypoints',\n        entryPoints: pendingEntryPoints,\n      }),\n    );\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs(client) {\n  try {\n    pendingLogs.forEach(([level: LogLevel, data: Array<mixed>]) => {\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {\n  if (\n    Platform.OS === 'ios' &&\n    NativeRedBox != null &&\n    NativeRedBox.dismiss != null\n  ) {\n    NativeRedBox.dismiss();\n  } else {\n    const NativeExceptionsManager = require('../Core/NativeExceptionsManager')\n      .default;\n    NativeExceptionsManager &&\n      NativeExceptionsManager.dismissRedbox &&\n      NativeExceptionsManager.dismissRedbox();\n  }\n}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  // Even if there is already a redbox, syntax errors are more important.\n  // Otherwise you risk seeing a stale runtime error while a syntax error is more recent.\n  dismissRedbox();\n\n  const message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n\n  const error: ExtendedError = new Error(message);\n  // Symbolicating compile errors is wasted effort\n  // because the stack trace is meaningless:\n  error.preventSymbolication = true;\n  throw error;\n}\n\nmodule.exports = HMRClient;\n"]},"metadata":{},"sourceType":"script"}