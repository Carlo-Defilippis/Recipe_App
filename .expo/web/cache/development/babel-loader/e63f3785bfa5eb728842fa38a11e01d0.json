{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _NativeStackView = _interopRequireDefault(require(\"../views/NativeStackView\"));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction NativeStackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  if (!(0, _reactNativeScreens.screensEnabled)()) {\n    throw new Error('Native stack is only available if React Native Screens is enabled.');\n  }\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: screenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, _native.StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(_NativeStackView.default, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  }));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(NativeStackNavigator);\n\nexports.default = _default;","map":{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["screenOptions","rest","navigation","useNavigationBuilder","initialRouteName","children","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","descriptors","createNavigatorFactory"],"mappings":";;;;;;;;;AAAA;;AAWA;;AACA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,oBAAA,CAAA,IAAA,EAK8B;AAAA,MALA,gBAKA,GAAA,IAAA,CALA,gBAKA;AAAA,MALA,QAKA,GAAA,IAAA,CALA,QAKA;AAAA,MAF5BA,aAE4B,GAAA,IAAA,CAF5BA,aAE4B;AAAA,MADzBC,IACyB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,kBAAA,EAAA,UAAA,EAAA,eAAA,CAAA,CAAA;;AAC5B,MAAI,CAAJ,yCAAA,EAAuB;AACrB,UAAM,IAAA,KAAA,CAAN,oEAAM,CAAN;AAGD;;AAL2B,8BAOeE,kCAAoB,mBAApBA,EAM5B;AACbC,IAAAA,gBADa,EACbA,gBADa;AAEbC,IAAAA,QAFa,EAEbA,QAFa;AAGbL,IAAAA,aAAAA,EAAAA;AAHa,GAN4BG,CAPf;AAAA,MAOtB,KAPsB,yBAOtB,KAPsB;AAAA,MAOtB,WAPsB,yBAOtB,WAPsB;AAAA,MAOAD,UAPA,yBAOAA,UAPA;;AAmB5BI,EAAAA,KAAK,CAALA,SAAAA,CACE,YAAA;AAAA,QAAA,qBAAA;;AAAA,WACEJ,UADF,KAAA,IACEA,IAAAA,UADF,KAAA,KAAA,CACEA,GADF,KAAA,CACEA,GADF,CAAA,qBAAA,GACEA,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAuCK,UAAAA,CAAD,EAAO;AAC3C,UAAMC,SAAS,GAAGN,UAAU,CADe,SACzBA,EAAlB;AAIAO,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AAGAL,UAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKS,qBADLT,QACKS,EADLT,CAAAA,EAAAA,EAAAA,EAAAA;AAEEU,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFhBX,WAAAA,CAAAA;AAID;AAZHO,OAAqB,CAArBA;AANJ,KACEP,CADF;AADFI,GAAAA,EAsBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA;AAyBA,SACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,WAAW,EAAEQ;AAJf,GAAA,CAAA,CADF;AAQD;;eAEcC,oCAAf,oBAAeA,C","sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  StackActions,\n  StackActionHelpers,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { screensEnabled } from 'react-native-screens';\nimport {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  if (!screensEnabled()) {\n    throw new Error(\n      'Native stack is only available if React Native Screens is enabled.'\n    );\n  }\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"script"}