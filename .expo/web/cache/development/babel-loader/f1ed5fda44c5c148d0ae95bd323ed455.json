{"ast":null,"code":"'use strict';\n\nvar XMLHttpRequest = require('./XMLHttpRequest');\n\nvar originalXHROpen = XMLHttpRequest.prototype.open;\nvar originalXHRSend = XMLHttpRequest.prototype.send;\nvar originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\nvar openCallback;\nvar sendCallback;\nvar requestHeaderCallback;\nvar headerReceivedCallback;\nvar responseCallback;\nvar _isInterceptorEnabled = false;\nvar XHRInterceptor = {\n  setOpenCallback: function setOpenCallback(callback) {\n    openCallback = callback;\n  },\n  setSendCallback: function setSendCallback(callback) {\n    sendCallback = callback;\n  },\n  setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {\n    headerReceivedCallback = callback;\n  },\n  setResponseCallback: function setResponseCallback(callback) {\n    responseCallback = callback;\n  },\n  setRequestHeaderCallback: function setRequestHeaderCallback(callback) {\n    requestHeaderCallback = callback;\n  },\n  isInterceptorEnabled: function isInterceptorEnabled() {\n    return _isInterceptorEnabled;\n  },\n  enableInterception: function enableInterception() {\n    if (_isInterceptorEnabled) {\n      return;\n    }\n\n    XMLHttpRequest.prototype.open = function (method, url) {\n      if (openCallback) {\n        openCallback(method, url, this);\n      }\n\n      originalXHROpen.apply(this, arguments);\n    };\n\n    XMLHttpRequest.prototype.setRequestHeader = function (header, value) {\n      if (requestHeaderCallback) {\n        requestHeaderCallback(header, value, this);\n      }\n\n      originalXHRSetRequestHeader.apply(this, arguments);\n    };\n\n    XMLHttpRequest.prototype.send = function (data) {\n      var _this = this;\n\n      if (sendCallback) {\n        sendCallback(data, this);\n      }\n\n      if (this.addEventListener) {\n        this.addEventListener('readystatechange', function () {\n          if (!_isInterceptorEnabled) {\n            return;\n          }\n\n          if (_this.readyState === _this.HEADERS_RECEIVED) {\n            var contentTypeString = _this.getResponseHeader('Content-Type');\n\n            var contentLengthString = _this.getResponseHeader('Content-Length');\n\n            var responseContentType, responseSize;\n\n            if (contentTypeString) {\n              responseContentType = contentTypeString.split(';')[0];\n            }\n\n            if (contentLengthString) {\n              responseSize = parseInt(contentLengthString, 10);\n            }\n\n            if (headerReceivedCallback) {\n              headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);\n            }\n          }\n\n          if (_this.readyState === _this.DONE) {\n            if (responseCallback) {\n              responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);\n            }\n          }\n        }, false);\n      }\n\n      originalXHRSend.apply(this, arguments);\n    };\n\n    _isInterceptorEnabled = true;\n  },\n  disableInterception: function disableInterception() {\n    if (!_isInterceptorEnabled) {\n      return;\n    }\n\n    _isInterceptorEnabled = false;\n    XMLHttpRequest.prototype.send = originalXHRSend;\n    XMLHttpRequest.prototype.open = originalXHROpen;\n    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;\n    responseCallback = null;\n    openCallback = null;\n    sendCallback = null;\n    headerReceivedCallback = null;\n    requestHeaderCallback = null;\n  }\n};\nmodule.exports = XHRInterceptor;","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Network/XHRInterceptor.js"],"names":["XMLHttpRequest","require","originalXHROpen","prototype","open","originalXHRSend","send","originalXHRSetRequestHeader","setRequestHeader","openCallback","sendCallback","requestHeaderCallback","headerReceivedCallback","responseCallback","isInterceptorEnabled","XHRInterceptor","setOpenCallback","callback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","enableInterception","method","url","apply","arguments","header","value","data","addEventListener","readyState","HEADERS_RECEIVED","contentTypeString","getResponseHeader","contentLengthString","responseContentType","responseSize","split","parseInt","getAllResponseHeaders","DONE","status","timeout","response","responseURL","responseType","disableInterception","module","exports"],"mappings":"AASA;;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAMC,eAAe,GAAGF,cAAc,CAACG,SAAf,CAAyBC,IAAjD;AACA,IAAMC,eAAe,GAAGL,cAAc,CAACG,SAAf,CAAyBG,IAAjD;AACA,IAAMC,2BAA2B,GAAGP,cAAc,CAACG,SAAf,CAAyBK,gBAA7D;AAEA,IAAIC,YAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,qBAAJ;AACA,IAAIC,sBAAJ;AACA,IAAIC,gBAAJ;AAEA,IAAIC,qBAAoB,GAAG,KAA3B;AASA,IAAMC,cAAc,GAAG;AAIrBC,EAAAA,eAJqB,2BAILC,QAJK,EAIK;AACxBR,IAAAA,YAAY,GAAGQ,QAAf;AACD,GANoB;AAWrBC,EAAAA,eAXqB,2BAWLD,QAXK,EAWK;AACxBP,IAAAA,YAAY,GAAGO,QAAf;AACD,GAboB;AAkBrBE,EAAAA,yBAlBqB,qCAkBKF,QAlBL,EAkBe;AAClCL,IAAAA,sBAAsB,GAAGK,QAAzB;AACD,GApBoB;AAyBrBG,EAAAA,mBAzBqB,+BAyBDH,QAzBC,EAyBS;AAC5BJ,IAAAA,gBAAgB,GAAGI,QAAnB;AACD,GA3BoB;AAgCrBI,EAAAA,wBAhCqB,oCAgCIJ,QAhCJ,EAgCc;AACjCN,IAAAA,qBAAqB,GAAGM,QAAxB;AACD,GAlCoB;AAoCrBH,EAAAA,oBApCqB,kCAoCE;AACrB,WAAOA,qBAAP;AACD,GAtCoB;AAwCrBQ,EAAAA,kBAxCqB,gCAwCA;AACnB,QAAIR,qBAAJ,EAA0B;AACxB;AACD;;AAGDd,IAAAA,cAAc,CAACG,SAAf,CAAyBC,IAAzB,GAAgC,UAASmB,MAAT,EAAiBC,GAAjB,EAAsB;AACpD,UAAIf,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACc,MAAD,EAASC,GAAT,EAAc,IAAd,CAAZ;AACD;;AACDtB,MAAAA,eAAe,CAACuB,KAAhB,CAAsB,IAAtB,EAA4BC,SAA5B;AACD,KALD;;AASA1B,IAAAA,cAAc,CAACG,SAAf,CAAyBK,gBAAzB,GAA4C,UAASmB,MAAT,EAAiBC,KAAjB,EAAwB;AAClE,UAAIjB,qBAAJ,EAA2B;AACzBA,QAAAA,qBAAqB,CAACgB,MAAD,EAASC,KAAT,EAAgB,IAAhB,CAArB;AACD;;AACDrB,MAAAA,2BAA2B,CAACkB,KAA5B,CAAkC,IAAlC,EAAwCC,SAAxC;AACD,KALD;;AASA1B,IAAAA,cAAc,CAACG,SAAf,CAAyBG,IAAzB,GAAgC,UAASuB,IAAT,EAAe;AAAA;;AAC7C,UAAInB,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACmB,IAAD,EAAO,IAAP,CAAZ;AACD;;AACD,UAAI,KAAKC,gBAAT,EAA2B;AACzB,aAAKA,gBAAL,CACE,kBADF,EAEE,YAAM;AACJ,cAAI,CAAChB,qBAAL,EAA2B;AACzB;AACD;;AACD,cAAI,KAAI,CAACiB,UAAL,KAAoB,KAAI,CAACC,gBAA7B,EAA+C;AAC7C,gBAAMC,iBAAiB,GAAG,KAAI,CAACC,iBAAL,CAAuB,cAAvB,CAA1B;;AACA,gBAAMC,mBAAmB,GAAG,KAAI,CAACD,iBAAL,CAC1B,gBAD0B,CAA5B;;AAGA,gBAAIE,mBAAJ,EAAyBC,YAAzB;;AACA,gBAAIJ,iBAAJ,EAAuB;AACrBG,cAAAA,mBAAmB,GAAGH,iBAAiB,CAACK,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAtB;AACD;;AACD,gBAAIH,mBAAJ,EAAyB;AACvBE,cAAAA,YAAY,GAAGE,QAAQ,CAACJ,mBAAD,EAAsB,EAAtB,CAAvB;AACD;;AACD,gBAAIvB,sBAAJ,EAA4B;AAC1BA,cAAAA,sBAAsB,CACpBwB,mBADoB,EAEpBC,YAFoB,EAGpB,KAAI,CAACG,qBAAL,EAHoB,EAIpB,KAJoB,CAAtB;AAMD;AACF;;AACD,cAAI,KAAI,CAACT,UAAL,KAAoB,KAAI,CAACU,IAA7B,EAAmC;AACjC,gBAAI5B,gBAAJ,EAAsB;AACpBA,cAAAA,gBAAgB,CACd,KAAI,CAAC6B,MADS,EAEd,KAAI,CAACC,OAFS,EAGd,KAAI,CAACC,QAHS,EAId,KAAI,CAACC,WAJS,EAKd,KAAI,CAACC,YALS,EAMd,KANc,CAAhB;AAQD;AACF;AACF,SAvCH,EAwCE,KAxCF;AA0CD;;AACDzC,MAAAA,eAAe,CAACoB,KAAhB,CAAsB,IAAtB,EAA4BC,SAA5B;AACD,KAjDD;;AAkDAZ,IAAAA,qBAAoB,GAAG,IAAvB;AACD,GAnHoB;AAsHrBiC,EAAAA,mBAtHqB,iCAsHC;AACpB,QAAI,CAACjC,qBAAL,EAA2B;AACzB;AACD;;AACDA,IAAAA,qBAAoB,GAAG,KAAvB;AACAd,IAAAA,cAAc,CAACG,SAAf,CAAyBG,IAAzB,GAAgCD,eAAhC;AACAL,IAAAA,cAAc,CAACG,SAAf,CAAyBC,IAAzB,GAAgCF,eAAhC;AACAF,IAAAA,cAAc,CAACG,SAAf,CAAyBK,gBAAzB,GAA4CD,2BAA5C;AACAM,IAAAA,gBAAgB,GAAG,IAAnB;AACAJ,IAAAA,YAAY,GAAG,IAAf;AACAC,IAAAA,YAAY,GAAG,IAAf;AACAE,IAAAA,sBAAsB,GAAG,IAAzB;AACAD,IAAAA,qBAAqB,GAAG,IAAxB;AACD;AAnIoB,CAAvB;AAsIAqC,MAAM,CAACC,OAAP,GAAiBlC,cAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst XMLHttpRequest = require('./XMLHttpRequest');\nconst originalXHROpen = XMLHttpRequest.prototype.open;\nconst originalXHRSend = XMLHttpRequest.prototype.send;\nconst originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\n\nlet openCallback;\nlet sendCallback;\nlet requestHeaderCallback;\nlet headerReceivedCallback;\nlet responseCallback;\n\nlet isInterceptorEnabled = false;\n\n/**\n * A network interceptor which monkey-patches XMLHttpRequest methods\n * to gather all network requests/responses, in order to show their\n * information in the React Native inspector development tool.\n * This supports interception with XMLHttpRequest API, including Fetch API\n * and any other third party libraries that depend on XMLHttpRequest.\n */\nconst XHRInterceptor = {\n  /**\n   * Invoked before XMLHttpRequest.open(...) is called.\n   */\n  setOpenCallback(callback) {\n    openCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.send(...) is called.\n   */\n  setSendCallback(callback) {\n    sendCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n   */\n  setHeaderReceivedCallback(callback) {\n    headerReceivedCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.DONE.\n   */\n  setResponseCallback(callback) {\n    responseCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n   */\n  setRequestHeaderCallback(callback) {\n    requestHeaderCallback = callback;\n  },\n\n  isInterceptorEnabled() {\n    return isInterceptorEnabled;\n  },\n\n  enableInterception() {\n    if (isInterceptorEnabled) {\n      return;\n    }\n    // Override `open` method for all XHR requests to intercept the request\n    // method and url, then pass them through the `openCallback`.\n    XMLHttpRequest.prototype.open = function(method, url) {\n      if (openCallback) {\n        openCallback(method, url, this);\n      }\n      originalXHROpen.apply(this, arguments);\n    };\n\n    // Override `setRequestHeader` method for all XHR requests to intercept\n    // the request headers, then pass them through the `requestHeaderCallback`.\n    XMLHttpRequest.prototype.setRequestHeader = function(header, value) {\n      if (requestHeaderCallback) {\n        requestHeaderCallback(header, value, this);\n      }\n      originalXHRSetRequestHeader.apply(this, arguments);\n    };\n\n    // Override `send` method of all XHR requests to intercept the data sent,\n    // register listeners to intercept the response, and invoke the callbacks.\n    XMLHttpRequest.prototype.send = function(data) {\n      if (sendCallback) {\n        sendCallback(data, this);\n      }\n      if (this.addEventListener) {\n        this.addEventListener(\n          'readystatechange',\n          () => {\n            if (!isInterceptorEnabled) {\n              return;\n            }\n            if (this.readyState === this.HEADERS_RECEIVED) {\n              const contentTypeString = this.getResponseHeader('Content-Type');\n              const contentLengthString = this.getResponseHeader(\n                'Content-Length',\n              );\n              let responseContentType, responseSize;\n              if (contentTypeString) {\n                responseContentType = contentTypeString.split(';')[0];\n              }\n              if (contentLengthString) {\n                responseSize = parseInt(contentLengthString, 10);\n              }\n              if (headerReceivedCallback) {\n                headerReceivedCallback(\n                  responseContentType,\n                  responseSize,\n                  this.getAllResponseHeaders(),\n                  this,\n                );\n              }\n            }\n            if (this.readyState === this.DONE) {\n              if (responseCallback) {\n                responseCallback(\n                  this.status,\n                  this.timeout,\n                  this.response,\n                  this.responseURL,\n                  this.responseType,\n                  this,\n                );\n              }\n            }\n          },\n          false,\n        );\n      }\n      originalXHRSend.apply(this, arguments);\n    };\n    isInterceptorEnabled = true;\n  },\n\n  // Unpatch XMLHttpRequest methods and remove the callbacks.\n  disableInterception() {\n    if (!isInterceptorEnabled) {\n      return;\n    }\n    isInterceptorEnabled = false;\n    XMLHttpRequest.prototype.send = originalXHRSend;\n    XMLHttpRequest.prototype.open = originalXHROpen;\n    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;\n    responseCallback = null;\n    openCallback = null;\n    sendCallback = null;\n    headerReceivedCallback = null;\n    requestHeaderCallback = null;\n  },\n};\n\nmodule.exports = XHRInterceptor;\n"]},"metadata":{},"sourceType":"script"}