{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.findBestAvailableLanguage = findBestAvailableLanguage;\nObject.defineProperty(exports, \"getCalendar\", {\n  enumerable: true,\n  get: function get() {\n    return _module.getCalendar;\n  }\n});\nObject.defineProperty(exports, \"getCountry\", {\n  enumerable: true,\n  get: function get() {\n    return _module.getCountry;\n  }\n});\nObject.defineProperty(exports, \"getCurrencies\", {\n  enumerable: true,\n  get: function get() {\n    return _module.getCurrencies;\n  }\n});\nObject.defineProperty(exports, \"getLocales\", {\n  enumerable: true,\n  get: function get() {\n    return _module.getLocales;\n  }\n});\nObject.defineProperty(exports, \"getNumberFormatSettings\", {\n  enumerable: true,\n  get: function get() {\n    return _module.getNumberFormatSettings;\n  }\n});\nObject.defineProperty(exports, \"getTemperatureUnit\", {\n  enumerable: true,\n  get: function get() {\n    return _module.getTemperatureUnit;\n  }\n});\nObject.defineProperty(exports, \"getTimeZone\", {\n  enumerable: true,\n  get: function get() {\n    return _module.getTimeZone;\n  }\n});\nObject.defineProperty(exports, \"uses24HourClock\", {\n  enumerable: true,\n  get: function get() {\n    return _module.uses24HourClock;\n  }\n});\nObject.defineProperty(exports, \"usesMetricSystem\", {\n  enumerable: true,\n  get: function get() {\n    return _module.usesMetricSystem;\n  }\n});\nObject.defineProperty(exports, \"usesAutoDateAndTime\", {\n  enumerable: true,\n  get: function get() {\n    return _module.usesAutoDateAndTime;\n  }\n});\nObject.defineProperty(exports, \"usesAutoTimeZone\", {\n  enumerable: true,\n  get: function get() {\n    return _module.usesAutoTimeZone;\n  }\n});\n\nvar _module = require(\"./module\");\n\nfunction logUnknownEvent(type) {\n  console.error(\"`\".concat(type, \"` is not a valid react-native-localize event\"));\n}\n\nfunction getPartialTag(_ref) {\n  var languageCode = _ref.languageCode,\n      scriptCode = _ref.scriptCode;\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nfunction addEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!_module.handlers.has(handler)) {\n    _module.handlers.add(handler);\n  }\n}\n\nfunction removeEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (_module.handlers.has(handler)) {\n    _module.handlers.delete(handler);\n  }\n}\n\nfunction findBestAvailableLanguage(languageTags) {\n  var locales = (0, _module.getLocales)();\n\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    var languageTag = currentLocale.languageTag,\n        languageCode = currentLocale.languageCode,\n        isRTL = currentLocale.isRTL;\n\n    if (languageTags.includes(languageTag)) {\n      return {\n        languageTag: languageTag,\n        isRTL: isRTL\n      };\n    }\n\n    var partial = getPartialTag(currentLocale);\n    var next = locales[i + 1];\n\n    if ((!next || partial !== getPartialTag(next)) && languageTags.includes(partial)) {\n      return {\n        languageTag: partial,\n        isRTL: isRTL\n      };\n    }\n\n    if ((!next || languageCode !== next.languageCode) && languageTags.includes(languageCode)) {\n      return {\n        languageTag: languageCode,\n        isRTL: isRTL\n      };\n    }\n  }\n}","map":{"version":3,"sources":["index.js"],"names":["console","scriptCode","languageCode","type","logUnknownEvent","handlers","locales","i","currentLocale","isRTL","languageTags","languageTag","partial","getPartialTag","next"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAiCA,SAAA,eAAA,CAAA,IAAA,EAAuC;AACrCA,EAAAA,OAAO,CAAPA,KAAAA,CAAAA,IAAAA,MAAAA,CAAAA,IAAAA,EAAAA,8CAAAA,CAAAA;AACD;;AACD,SAAA,aAAA,OAA6D;AAAA,MAAtC,YAAsC,QAAtC,YAAsC;AAAA,MAAtBC,UAAsB,QAAtBA,UAAsB;AAC3D,SAAOC,YAAY,IAAID,UAAU,GAAG,MAAH,UAAA,GAAjC,EAAmB,CAAnB;AACD;;AAEM,SAAA,gBAAA,CAAA,IAAA,EAAA,OAAA,EAGC;AACN,MAAIE,IAAI,KAAR,QAAA,EAAuB;AACrBC,IAAAA,eAAe,CAAfA,IAAe,CAAfA;AADF,GAAA,MAEO,IAAI,CAACC,iBAAAA,GAAAA,CAAL,OAAKA,CAAL,EAA4B;AACjCA,qBAAAA,GAAAA,CAAAA,OAAAA;AACD;AACF;;AAEM,SAAA,mBAAA,CAAA,IAAA,EAAA,OAAA,EAGC;AACN,MAAIF,IAAI,KAAR,QAAA,EAAuB;AACrBC,IAAAA,eAAe,CAAfA,IAAe,CAAfA;AADF,GAAA,MAEO,IAAIC,iBAAAA,GAAAA,CAAJ,OAAIA,CAAJ,EAA2B;AAChCA,qBAAAA,MAAAA,CAAAA,OAAAA;AACD;AACF;;AAEM,SAAA,yBAAA,CAAA,YAAA,EAEyD;AAC9D,MAAMC,OAAO,GAAb,yBAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,OAAO,CAA3B,MAAA,EAAoCC,CAApC,EAAA,EAAyC;AACvC,QAAMC,aAAa,GAAGF,OAAO,CAA7B,CAA6B,CAA7B;AADuC,QAEjC,WAFiC,GAEvC,aAFuC,CAEjC,WAFiC;AAAA,QAEjC,YAFiC,GAEvC,aAFuC,CAEjC,YAFiC;AAAA,QAEJG,KAFI,GAEvC,aAFuC,CAEJA,KAFI;;AAIvC,QAAIC,YAAY,CAAZA,QAAAA,CAAJ,WAAIA,CAAJ,EAAwC;AACtC,aAAO;AAAEC,QAAAA,WAAF,EAAEA,WAAF;AAAeF,QAAAA,KAAAA,EAAAA;AAAf,OAAP;AACD;;AAED,QAAMG,OAAO,GAAGC,aAAa,CAA7B,aAA6B,CAA7B;AACA,QAAMC,IAAI,GAAGR,OAAO,CAACC,CAAC,GAAtB,CAAoB,CAApB;;AAEA,QACE,CAAC,CAAA,IAAA,IAASK,OAAO,KAAKC,aAAa,CAAnC,IAAmC,CAAnC,KACAH,YAAY,CAAZA,QAAAA,CAFF,OAEEA,CAFF,EAGE;AACA,aAAO;AAAEC,QAAAA,WAAW,EAAb,OAAA;AAAwBF,QAAAA,KAAAA,EAAAA;AAAxB,OAAP;AACD;;AAED,QACE,CAAC,CAAA,IAAA,IAASP,YAAY,KAAKY,IAAI,CAA/B,YAAA,KACAJ,YAAY,CAAZA,QAAAA,CAFF,YAEEA,CAFF,EAGE;AACA,aAAO;AAAEC,QAAAA,WAAW,EAAb,YAAA;AAA6BF,QAAAA,KAAAA,EAAAA;AAA7B,OAAP;AACD;AACF;AACF","sourcesContent":["// @flow\n\nimport { getLocales, handlers } from \"./module\";\n\nimport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  Option,\n  TemperatureUnit,\n} from \"./types\";\n\nexport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  TemperatureUnit,\n} from \"./types\";\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesMetricSystem,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n} from \"./module\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\nfunction getPartialTag({ languageCode, scriptCode }: Locale) {\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage(\n  languageTags: string[],\n): {| languageTag: string, isRTL: boolean |} | typeof undefined {\n  const locales = getLocales();\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, isRTL } = currentLocale;\n\n    if (languageTags.includes(languageTag)) {\n      return { languageTag, isRTL };\n    }\n\n    const partial = getPartialTag(currentLocale);\n    const next = locales[i + 1];\n\n    if (\n      (!next || partial !== getPartialTag(next)) &&\n      languageTags.includes(partial)\n    ) {\n      return { languageTag: partial, isRTL };\n    }\n\n    if (\n      (!next || languageCode !== next.languageCode) &&\n      languageTags.includes(languageCode)\n    ) {\n      return { languageTag: languageCode, isRTL };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}