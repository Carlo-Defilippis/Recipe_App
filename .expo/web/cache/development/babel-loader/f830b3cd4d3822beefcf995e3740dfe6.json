{"ast":null,"code":"var _ExceptionsManager = require(\"./ExceptionsManager\");\n\nfunction showErrorDialog(capturedError) {\n  var componentStack = capturedError.componentStack,\n      error = capturedError.error;\n  var errorToHandle;\n\n  if (error instanceof Error) {\n    errorToHandle = error;\n  } else if (typeof error === 'string') {\n    errorToHandle = new _ExceptionsManager.SyntheticError(error);\n  } else {\n    errorToHandle = new _ExceptionsManager.SyntheticError('Unspecified error');\n  }\n\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n\n  (0, _ExceptionsManager.handleException)(errorToHandle, false);\n  return false;\n}\n\nmodule.exports = {\n  showErrorDialog: showErrorDialog\n};","map":{"version":3,"sources":["C:/Users/na2tt/Desktop/homework/Recipe_App/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"names":["showErrorDialog","capturedError","componentStack","error","errorToHandle","Error","SyntheticError","isComponentError","e","module","exports"],"mappings":"AAmBA;;AAMA,SAASA,eAAT,CAAyBC,aAAzB,EAAgE;AAAA,MACvDC,cADuD,GAC9BD,aAD8B,CACvDC,cADuD;AAAA,MACvCC,KADuC,GAC9BF,aAD8B,CACvCE,KADuC;AAG9D,MAAIC,aAAJ;;AAGA,MAAID,KAAK,YAAYE,KAArB,EAA4B;AAC1BD,IAAAA,aAAa,GAAID,KAAjB;AACD,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,IAAAA,aAAa,GAAI,IAAIE,iCAAJ,CAAmBH,KAAnB,CAAjB;AACD,GAFM,MAEA;AACLC,IAAAA,aAAa,GAAI,IAAIE,iCAAJ,CAAmB,mBAAnB,CAAjB;AACD;;AACD,MAAI;AACFF,IAAAA,aAAa,CAACF,cAAd,GAA+BA,cAA/B;AACAE,IAAAA,aAAa,CAACG,gBAAd,GAAiC,IAAjC;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;AACd,0CAAgBJ,aAAhB,EAA+B,KAA/B;AAMA,SAAO,KAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AAACV,EAAAA,eAAe,EAAfA;AAAD,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\n\nimport {handleException, SyntheticError} from './ExceptionsManager';\n\n/**\n * Intercept lifecycle errors and ensure they are shown with the correct stack\n * trace within the native redbox component.\n */\nfunction showErrorDialog(capturedError: CapturedError): boolean {\n  const {componentStack, error} = capturedError;\n\n  let errorToHandle;\n\n  // Typically Errors are thrown but eg strings or null can be thrown as well.\n  if (error instanceof Error) {\n    errorToHandle = (error: ExtendedError);\n  } else if (typeof error === 'string') {\n    errorToHandle = (new SyntheticError(error): ExtendedError);\n  } else {\n    errorToHandle = (new SyntheticError('Unspecified error'): ExtendedError);\n  }\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n  handleException(errorToHandle, false);\n\n  // Return false here to prevent ReactFiberErrorLogger default behavior of\n  // logging error details to console.error. Calls to console.error are\n  // automatically routed to the native redbox controller, which we've already\n  // done above by calling ExceptionsManager.\n  return false;\n}\n\nmodule.exports = {showErrorDialog};\n"]},"metadata":{},"sourceType":"script"}