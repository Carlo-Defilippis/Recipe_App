{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = NativeStackView;\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AppContainer = _interopRequireDefault(require(\"react-native/Libraries/ReactNative/AppContainer\"));\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _HeaderConfig = _interopRequireDefault(require(\"./HeaderConfig\"));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar Screen = _reactNativeScreens.Screen;\nvar isAndroid = _reactNative.Platform.OS === 'android';\nvar Container = _reactNative.View;\n\nif (__DEV__) {\n  var DebugContainer = function DebugContainer(props) {\n    var stackAnimation = props.stackAnimation,\n        rest = _objectWithoutProperties(props, [\"stackAnimation\"]);\n\n    if (_reactNative.Platform.OS === 'ios' && stackAnimation !== 'push') {\n      return React.createElement(_AppContainer.default, null, React.createElement(_reactNative.View, rest));\n    }\n\n    return React.createElement(_reactNative.View, rest);\n  };\n\n  Container = DebugContainer;\n}\n\nfunction NativeStackView(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var key = state.key,\n      routes = state.routes;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  return React.createElement(_reactNativeScreens.ScreenStack, {\n    style: styles.container\n  }, routes.map(function (route) {\n    var _descriptors$route$ke = descriptors[route.key],\n        options = _descriptors$route$ke.options,\n        renderScene = _descriptors$route$ke.render;\n    var gestureEnabled = options.gestureEnabled,\n        _options$replaceAnima = options.replaceAnimation,\n        replaceAnimation = _options$replaceAnima === void 0 ? 'pop' : _options$replaceAnima,\n        _options$stackPresent = options.stackPresentation,\n        stackPresentation = _options$stackPresent === void 0 ? 'push' : _options$stackPresent,\n        stackAnimation = options.stackAnimation,\n        contentStyle = options.contentStyle;\n    var viewStyles = [styles.container, stackPresentation !== 'transparentModal' && {\n      backgroundColor: colors.background\n    }, contentStyle];\n    return React.createElement(Screen, {\n      key: route.key,\n      style: _reactNative.StyleSheet.absoluteFill,\n      gestureEnabled: isAndroid ? false : gestureEnabled,\n      replaceAnimation: replaceAnimation,\n      stackPresentation: stackPresentation,\n      stackAnimation: stackAnimation,\n      onWillAppear: function onWillAppear() {\n        navigation.emit({\n          type: 'transitionStart',\n          data: {\n            closing: false\n          },\n          target: route.key\n        });\n      },\n      onWillDisappear: function onWillDisappear() {\n        navigation.emit({\n          type: 'transitionStart',\n          data: {\n            closing: true\n          },\n          target: route.key\n        });\n      },\n      onAppear: function onAppear() {\n        navigation.emit({\n          type: 'appear',\n          target: route.key\n        });\n        navigation.emit({\n          type: 'transitionEnd',\n          data: {\n            closing: false\n          },\n          target: route.key\n        });\n      },\n      onDisappear: function onDisappear() {\n        navigation.emit({\n          type: 'transitionEnd',\n          data: {\n            closing: true\n          },\n          target: route.key\n        });\n      },\n      onDismissed: function onDismissed() {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key\n        });\n        navigation.dispatch(_objectSpread(_objectSpread({}, _native.StackActions.pop()), {}, {\n          source: route.key,\n          target: key\n        }));\n      }\n    }, React.createElement(_HeaderConfig.default, _extends({}, options, {\n      route: route\n    })), React.createElement(Container, {\n      style: viewStyles,\n      stackPresentation: stackPresentation\n    }, renderScene()));\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["NativeStackView.tsx"],"names":["Screen","isAndroid","Platform","Container","DebugContainer","props","stackAnimation","descriptors","routes","colors","styles","container","route","render","renderScene","replaceAnimation","stackPresentation","contentStyle","viewStyles","backgroundColor","background","StyleSheet","navigation","type","data","closing","target","key","StackActions","source","flex"],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View, ViewProps } from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport {\n  Screen as ScreenComponent,\n  ScreenProps,\n  ScreenStack,\n} from 'react-native-screens';\nimport {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n} from '../types';\nimport HeaderConfig from './HeaderConfig';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\nconst isAndroid = Platform.OS === 'android';\n\nlet Container = View;\n\nif (__DEV__) {\n  const DebugContainer = (props: ViewProps & { stackAnimation: string }) => {\n    const { stackAnimation, ...rest } = props;\n    if (Platform.OS === 'ios' && stackAnimation !== 'push') {\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n    return <View {...rest} />;\n  };\n  // @ts-ignore Wrong props\n  Container = DebugContainer;\n}\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props): JSX.Element {\n  const { key, routes } = state;\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {routes.map((route) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          replaceAnimation = 'pop',\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        const viewStyles = [\n          styles.container,\n          stackPresentation !== 'transparentModal' && {\n            backgroundColor: colors.background,\n          },\n          contentStyle,\n        ];\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={isAndroid ? false : gestureEnabled}\n            replaceAnimation={replaceAnimation}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onWillAppear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: key,\n              });\n            }}>\n            <HeaderConfig {...options} route={route} />\n            <Container\n              style={viewStyles}\n              // @ts-ignore Wrong props passed to View\n              stackPresentation={stackPresentation}>\n              {renderScene()}\n            </Container>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}